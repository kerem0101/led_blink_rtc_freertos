
led_blink_rtc_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a58  08007a58  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007a58  08007a58  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a58  08007a58  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c4  20000080  08007ae0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001744  08007ae0  00021744  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169bf  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000379e  00000000  00000000  00036a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003b620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001456b  00000000  00000000  0003c8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018989  00000000  00000000  00050e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076aa0  00000000  00000000  000697a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aac  00000000  00000000  000e0294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007574 	.word	0x08007574

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08007574 	.word	0x08007574

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	4a06      	ldr	r2, [pc, #24]	; (8000280 <vApplicationGetIdleTaskMemory+0x28>)
 8000268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	4a05      	ldr	r2, [pc, #20]	; (8000284 <vApplicationGetIdleTaskMemory+0x2c>)
 800026e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b004      	add	sp, #16
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	2000009c 	.word	0x2000009c
 8000284:	200000f0 	.word	0x200000f0

08000288 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetTimerTaskMemory+0x28>)
 8000298:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	4a05      	ldr	r2, [pc, #20]	; (80002b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800029e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	0052      	lsls	r2, r2, #1
 80002a6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	200002f0 	.word	0x200002f0
 80002b4:	20000344 	.word	0x20000344

080002b8 <led_effect_stop>:
 *      Author: kerem
 */

#include "main.h"

void led_effect_stop(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <led_effect>:

void led_effect(int8_t num){
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b084      	sub	sp, #16
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	0002      	movs	r2, r0
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	701a      	strb	r2, [r3, #0]

	TickType_t xDelay;

	if(num == 1){
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d102      	bne.n	80002de <led_effect+0x1c>
		xDelay = 250 / portTICK_PERIOD_MS;
 80002d8:	23fa      	movs	r3, #250	; 0xfa
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e014      	b.n	8000308 <led_effect+0x46>
	}else if(num == 2){
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b25b      	sxtb	r3, r3
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d103      	bne.n	80002f0 <led_effect+0x2e>
		xDelay = 500 / portTICK_PERIOD_MS;
 80002e8:	23fa      	movs	r3, #250	; 0xfa
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	e00b      	b.n	8000308 <led_effect+0x46>
	}else if(num == 3){
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	b25b      	sxtb	r3, r3
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d103      	bne.n	8000302 <led_effect+0x40>
		xDelay = 1000 / portTICK_PERIOD_MS;
 80002fa:	23fa      	movs	r3, #250	; 0xfa
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e002      	b.n	8000308 <led_effect+0x46>
	}else{
		xDelay = 2000 / portTICK_PERIOD_MS;
 8000302:	23fa      	movs	r3, #250	; 0xfa
 8000304:	00db      	lsls	r3, r3, #3
 8000306:	60fb      	str	r3, [r7, #12]
	}



	for(int8_t i = 0; i < 10; ++i){
 8000308:	230b      	movs	r3, #11
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
 8000310:	e010      	b.n	8000334 <led_effect+0x72>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000312:	2390      	movs	r3, #144	; 0x90
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	2120      	movs	r1, #32
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fb6c 	bl	80019f6 <HAL_GPIO_TogglePin>
		vTaskDelay(xDelay);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	0018      	movs	r0, r3
 8000322:	f005 f883 	bl	800542c <vTaskDelay>
	for(int8_t i = 0; i < 10; ++i){
 8000326:	210b      	movs	r1, #11
 8000328:	187b      	adds	r3, r7, r1
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	187b      	adds	r3, r7, r1
 8000332:	701a      	strb	r2, [r3, #0]
 8000334:	230b      	movs	r3, #11
 8000336:	18fb      	adds	r3, r7, r3
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	b25b      	sxtb	r3, r3
 800033c:	2b09      	cmp	r3, #9
 800033e:	dde8      	ble.n	8000312 <led_effect+0x50>
	}
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b004      	add	sp, #16
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b08b      	sub	sp, #44	; 0x2c
 8000350:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000352:	f001 f869 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000356:	f000 f87b 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035a:	f000 f937 	bl	80005cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800035e:	f000 f905 	bl	800056c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000362:	f000 f8dd 	bl	8000520 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(cmd_task, "cmd_task", 64, NULL, osPriorityNormal, &handle_cmd_task);
 8000366:	4928      	ldr	r1, [pc, #160]	; (8000408 <main+0xbc>)
 8000368:	4828      	ldr	r0, [pc, #160]	; (800040c <main+0xc0>)
 800036a:	4b29      	ldr	r3, [pc, #164]	; (8000410 <main+0xc4>)
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2300      	movs	r3, #0
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2300      	movs	r3, #0
 8000374:	2240      	movs	r2, #64	; 0x40
 8000376:	f004 ff2f 	bl	80051d8 <xTaskCreate>

  xTaskCreate(print_task, "print_task", 64, NULL, osPriorityNormal, &handle_print_task);
 800037a:	4926      	ldr	r1, [pc, #152]	; (8000414 <main+0xc8>)
 800037c:	4826      	ldr	r0, [pc, #152]	; (8000418 <main+0xcc>)
 800037e:	4b27      	ldr	r3, [pc, #156]	; (800041c <main+0xd0>)
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2300      	movs	r3, #0
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2300      	movs	r3, #0
 8000388:	2240      	movs	r2, #64	; 0x40
 800038a:	f004 ff25 	bl	80051d8 <xTaskCreate>

  xTaskCreate(led_task, "led_task", 64, NULL, osPriorityNormal, &handle_led_task);
 800038e:	4924      	ldr	r1, [pc, #144]	; (8000420 <main+0xd4>)
 8000390:	4824      	ldr	r0, [pc, #144]	; (8000424 <main+0xd8>)
 8000392:	4b25      	ldr	r3, [pc, #148]	; (8000428 <main+0xdc>)
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2300      	movs	r3, #0
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2300      	movs	r3, #0
 800039c:	2240      	movs	r2, #64	; 0x40
 800039e:	f004 ff1b 	bl	80051d8 <xTaskCreate>

  xTaskCreate(rtc_task, "rtc_task", 250, NULL, osPriorityNormal, &handle_rtc_task);
 80003a2:	4922      	ldr	r1, [pc, #136]	; (800042c <main+0xe0>)
 80003a4:	4822      	ldr	r0, [pc, #136]	; (8000430 <main+0xe4>)
 80003a6:	4b23      	ldr	r3, [pc, #140]	; (8000434 <main+0xe8>)
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	2300      	movs	r3, #0
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	2300      	movs	r3, #0
 80003b0:	22fa      	movs	r2, #250	; 0xfa
 80003b2:	f004 ff11 	bl	80051d8 <xTaskCreate>

  q_data = xQueueCreate(10, sizeof(char));
 80003b6:	2200      	movs	r2, #0
 80003b8:	2101      	movs	r1, #1
 80003ba:	200a      	movs	r0, #10
 80003bc:	f004 fa7e 	bl	80048bc <xQueueGenericCreate>
 80003c0:	0002      	movs	r2, r0
 80003c2:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <main+0xec>)
 80003c4:	601a      	str	r2, [r3, #0]

  q_print = xQueueCreate(10, sizeof(size_t));
 80003c6:	2200      	movs	r2, #0
 80003c8:	2104      	movs	r1, #4
 80003ca:	200a      	movs	r0, #10
 80003cc:	f004 fa76 	bl	80048bc <xQueueGenericCreate>
 80003d0:	0002      	movs	r2, r0
 80003d2:	4b1a      	ldr	r3, [pc, #104]	; (800043c <main+0xf0>)
 80003d4:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 80003d6:	491a      	ldr	r1, [pc, #104]	; (8000440 <main+0xf4>)
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <main+0xf8>)
 80003da:	2201      	movs	r2, #1
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 ff35 	bl	800324c <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, menu_task, osPriorityNormal, 0, 64);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4a18      	ldr	r2, [pc, #96]	; (8000448 <main+0xfc>)
 80003e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003e8:	c313      	stmia	r3!, {r0, r1, r4}
 80003ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003ec:	c313      	stmia	r3!, {r0, r1, r4}
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2100      	movs	r1, #0
 80003f6:	0018      	movs	r0, r3
 80003f8:	f004 f8cb 	bl	8004592 <osThreadCreate>
 80003fc:	0002      	movs	r2, r0
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <main+0x100>)
 8000400:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000402:	f004 f8be 	bl	8004582 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000406:	e7fe      	b.n	8000406 <main+0xba>
 8000408:	080075b4 	.word	0x080075b4
 800040c:	080012ad 	.word	0x080012ad
 8000410:	200007f0 	.word	0x200007f0
 8000414:	080075c0 	.word	0x080075c0
 8000418:	0800126d 	.word	0x0800126d
 800041c:	200007f4 	.word	0x200007f4
 8000420:	080075cc 	.word	0x080075cc
 8000424:	08000c6d 	.word	0x08000c6d
 8000428:	200007f8 	.word	0x200007f8
 800042c:	080075d8 	.word	0x080075d8
 8000430:	08000dd5 	.word	0x08000dd5
 8000434:	200007fc 	.word	0x200007fc
 8000438:	20000800 	.word	0x20000800
 800043c:	20000804 	.word	0x20000804
 8000440:	20000808 	.word	0x20000808
 8000444:	20000764 	.word	0x20000764
 8000448:	080075e4 	.word	0x080075e4
 800044c:	200007ec 	.word	0x200007ec

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b097      	sub	sp, #92	; 0x5c
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	2428      	movs	r4, #40	; 0x28
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2330      	movs	r3, #48	; 0x30
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f006 fc1e 	bl	8006ca2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000466:	2318      	movs	r3, #24
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	0018      	movs	r0, r3
 800046c:	2310      	movs	r3, #16
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f006 fc16 	bl	8006ca2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	0018      	movs	r0, r3
 800047a:	2314      	movs	r3, #20
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f006 fc0f 	bl	8006ca2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	220a      	movs	r2, #10
 800048a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2201      	movs	r2, #1
 8000490:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2210      	movs	r2, #16
 8000496:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2201      	movs	r2, #1
 800049c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2202      	movs	r2, #2
 80004a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0212      	lsls	r2, r2, #8
 80004aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2280      	movs	r2, #128	; 0x80
 80004b0:	0352      	lsls	r2, r2, #13
 80004b2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fab5 	bl	8001a2c <HAL_RCC_OscConfig>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004c6:	f000 f9b1 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ca:	2118      	movs	r1, #24
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2207      	movs	r2, #7
 80004d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2202      	movs	r2, #2
 80004d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2101      	movs	r1, #1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fdbd 	bl	8002068 <HAL_RCC_ClockConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004f2:	f000 f99b 	bl	800082c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2280      	movs	r2, #128	; 0x80
 80004fa:	0252      	lsls	r2, r2, #9
 80004fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	0018      	movs	r0, r3
 800050a:	f001 ff1d 	bl	8002348 <HAL_RCCEx_PeriphCLKConfig>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000512:	f000 f98b 	bl	800082c <Error_Handler>
  }
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b017      	add	sp, #92	; 0x5c
 800051c:	bd90      	pop	{r4, r7, pc}
	...

08000520 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_RTC_Init+0x44>)
 8000526:	4a10      	ldr	r2, [pc, #64]	; (8000568 <MX_RTC_Init+0x48>)
 8000528:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_RTC_Init+0x44>)
 800052c:	2240      	movs	r2, #64	; 0x40
 800052e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_RTC_Init+0x44>)
 8000532:	227f      	movs	r2, #127	; 0x7f
 8000534:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_RTC_Init+0x44>)
 8000538:	22ff      	movs	r2, #255	; 0xff
 800053a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_RTC_Init+0x44>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_RTC_Init+0x44>)
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_RTC_Init+0x44>)
 800054a:	2200      	movs	r2, #0
 800054c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MX_RTC_Init+0x44>)
 8000550:	0018      	movs	r0, r3
 8000552:	f001 ffd7 	bl	8002504 <HAL_RTC_Init>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800055a:	f000 f967 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000744 	.word	0x20000744
 8000568:	40002800 	.word	0x40002800

0800056c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 8000572:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <MX_USART2_UART_Init+0x5c>)
 8000574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 8000578:	2296      	movs	r2, #150	; 0x96
 800057a:	0212      	lsls	r2, r2, #8
 800057c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 8000592:	220c      	movs	r2, #12
 8000594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MX_USART2_UART_Init+0x58>)
 80005b0:	0018      	movs	r0, r3
 80005b2:	f002 fd57 	bl	8003064 <HAL_UART_Init>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ba:	f000 f937 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000764 	.word	0x20000764
 80005c8:	40004400 	.word	0x40004400

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	240c      	movs	r4, #12
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	0018      	movs	r0, r3
 80005d8:	2314      	movs	r3, #20
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f006 fb60 	bl	8006ca2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <MX_GPIO_Init+0xcc>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <MX_GPIO_Init+0xcc>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0309      	lsls	r1, r1, #12
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <MX_GPIO_Init+0xcc>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	031b      	lsls	r3, r3, #12
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_GPIO_Init+0xcc>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_GPIO_Init+0xcc>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	03c9      	lsls	r1, r1, #15
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_GPIO_Init+0xcc>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	03db      	lsls	r3, r3, #15
 8000614:	4013      	ands	r3, r2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_GPIO_Init+0xcc>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_GPIO_Init+0xcc>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_GPIO_Init+0xcc>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	0018      	movs	r0, r3
 8000640:	f001 f9bc 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	0192      	lsls	r2, r2, #6
 800064a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064c:	193b      	adds	r3, r7, r4
 800064e:	2284      	movs	r2, #132	; 0x84
 8000650:	0392      	lsls	r2, r2, #14
 8000652:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065a:	193b      	adds	r3, r7, r4
 800065c:	4a0f      	ldr	r2, [pc, #60]	; (800069c <MX_GPIO_Init+0xd0>)
 800065e:	0019      	movs	r1, r3
 8000660:	0010      	movs	r0, r2
 8000662:	f001 f83b 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000666:	0021      	movs	r1, r4
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2220      	movs	r2, #32
 800066c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2201      	movs	r2, #1
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	187a      	adds	r2, r7, r1
 8000682:	2390      	movs	r3, #144	; 0x90
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f001 f827 	bl	80016dc <HAL_GPIO_Init>

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b009      	add	sp, #36	; 0x24
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800

080006a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]

	uint8_t dummy;

	if( ! xQueueIsQueueFullFromISR(q_data)){
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <HAL_UART_RxCpltCallback+0x80>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	0018      	movs	r0, r3
 80006ae:	f004 fcdc 	bl	800506a <xQueueIsQueueFullFromISR>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d107      	bne.n	80006c6 <HAL_UART_RxCpltCallback+0x26>
		//Enqueue data byte
		xQueueSendFromISR(q_data,(void*)&user_data, NULL);
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <HAL_UART_RxCpltCallback+0x80>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	491a      	ldr	r1, [pc, #104]	; (8000724 <HAL_UART_RxCpltCallback+0x84>)
 80006bc:	2300      	movs	r3, #0
 80006be:	2200      	movs	r2, #0
 80006c0:	f004 fa18 	bl	8004af4 <xQueueGenericSendFromISR>
 80006c4:	e013      	b.n	80006ee <HAL_UART_RxCpltCallback+0x4e>
	}
	else{
		if('\n' == user_data){
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_UART_RxCpltCallback+0x84>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b0a      	cmp	r3, #10
 80006ce:	d10e      	bne.n	80006ee <HAL_UART_RxCpltCallback+0x4e>
			//make sure that last byte of the queue is '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_UART_RxCpltCallback+0x80>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	220f      	movs	r2, #15
 80006d6:	18b9      	adds	r1, r7, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f004 fb30 	bl	8004d40 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data, NULL);
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_UART_RxCpltCallback+0x80>)
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	490f      	ldr	r1, [pc, #60]	; (8000724 <HAL_UART_RxCpltCallback+0x84>)
 80006e6:	2300      	movs	r3, #0
 80006e8:	2200      	movs	r2, #0
 80006ea:	f004 fa03 	bl	8004af4 <xQueueGenericSendFromISR>

		}

	}

	if('\n' == user_data){
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_UART_RxCpltCallback+0x84>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d108      	bne.n	800070a <HAL_UART_RxCpltCallback+0x6a>
		xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_UART_RxCpltCallback+0x88>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	f005 fbeb 	bl	8005ee0 <xTaskGenericNotifyFromISR>
	}

	HAL_UART_Receive_IT(&huart2, &user_data, 1);
 800070a:	4906      	ldr	r1, [pc, #24]	; (8000724 <HAL_UART_RxCpltCallback+0x84>)
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <HAL_UART_RxCpltCallback+0x8c>)
 800070e:	2201      	movs	r2, #1
 8000710:	0018      	movs	r0, r3
 8000712:	f002 fd9b 	bl	800324c <HAL_UART_Receive_IT>

}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b004      	add	sp, #16
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000800 	.word	0x20000800
 8000724:	20000808 	.word	0x20000808
 8000728:	200007f0 	.word	0x200007f0
 800072c:	20000764 	.word	0x20000764

08000730 <menu_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_menu_task */
void menu_task(void const * argument)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n\r========================\n\r"
 8000738:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <menu_task+0xc0>)
 800073a:	60bb      	str	r3, [r7, #8]


  /* Infinite loop */
  for(;;)
  {
	xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <menu_task+0xc4>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	425a      	negs	r2, r3
 8000744:	2308      	movs	r3, #8
 8000746:	18f9      	adds	r1, r7, r3
 8000748:	2300      	movs	r3, #0
 800074a:	f004 f90f 	bl	800496c <xQueueGenericSend>

	xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800074e:	2301      	movs	r3, #1
 8000750:	425b      	negs	r3, r3
 8000752:	220c      	movs	r2, #12
 8000754:	18ba      	adds	r2, r7, r2
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f005 fae1 	bl	8005d20 <xTaskNotifyWait>


    cmd = (command_t *)cmd_addr;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	617b      	str	r3, [r7, #20]

    if(cmd->len == 1){
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d12f      	bne.n	80007ca <menu_task+0x9a>
    	option = cmd->payload[0] - 48;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3b30      	subs	r3, #48	; 0x30
 8000770:	613b      	str	r3, [r7, #16]

    	switch(option){
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d031      	beq.n	80007dc <menu_task+0xac>
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	2b02      	cmp	r3, #2
 800077c:	dc1c      	bgt.n	80007b8 <menu_task+0x88>
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d003      	beq.n	800078c <menu_task+0x5c>
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d00b      	beq.n	80007a2 <menu_task+0x72>
 800078a:	e015      	b.n	80007b8 <menu_task+0x88>
    		case 0:
    			curr_state = sLedEffect;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <menu_task+0xc8>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
    			xTaskNotify(handle_led_task, 0, eNoAction);
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <menu_task+0xcc>)
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	f005 fb14 	bl	8005dc8 <xTaskGenericNotify>
    			break;
 80007a0:	e01d      	b.n	80007de <menu_task+0xae>

    		case 1:
				curr_state = sRtcMenu;
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <menu_task+0xc8>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task, 0, eNoAction);
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <menu_task+0xd0>)
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	f005 fb09 	bl	8005dc8 <xTaskGenericNotify>
				break;
 80007b6:	e012      	b.n	80007de <menu_task+0xae>
    		case 2:
    			break;

    		default:
    			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <menu_task+0xc4>)
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	425a      	negs	r2, r3
 80007c0:	4910      	ldr	r1, [pc, #64]	; (8000804 <menu_task+0xd4>)
 80007c2:	2300      	movs	r3, #0
 80007c4:	f004 f8d2 	bl	800496c <xQueueGenericSend>
    			continue;
 80007c8:	e010      	b.n	80007ec <menu_task+0xbc>

    	}
    }else{
    	xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <menu_task+0xc4>)
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	425a      	negs	r2, r3
 80007d2:	490c      	ldr	r1, [pc, #48]	; (8000804 <menu_task+0xd4>)
 80007d4:	2300      	movs	r3, #0
 80007d6:	f004 f8c9 	bl	800496c <xQueueGenericSend>
		continue;
 80007da:	e007      	b.n	80007ec <menu_task+0xbc>
    			break;
 80007dc:	46c0      	nop			; (mov r8, r8)

    }

    xTaskNotifyWait(0, 0,NULL, portMAX_DELAY);
 80007de:	2301      	movs	r3, #1
 80007e0:	425b      	negs	r3, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2000      	movs	r0, #0
 80007e8:	f005 fa9a 	bl	8005d20 <xTaskNotifyWait>
	xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80007ec:	e7a6      	b.n	800073c <menu_task+0xc>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	08007600 	.word	0x08007600
 80007f4:	20000804 	.word	0x20000804
 80007f8:	20000809 	.word	0x20000809
 80007fc:	200007f8 	.word	0x200007f8
 8000800:	200007fc 	.word	0x200007fc
 8000804:	20000000 	.word	0x20000000

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 fe19 	bl	8001450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40001000 	.word	0x40001000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <show_time_date>:
//	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
//	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
//
//}

void show_time_date(void){
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	b08d      	sub	sp, #52	; 0x34
 800083c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_time, 0, sizeof(rtc_time));
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2214      	movs	r2, #20
 8000842:	2100      	movs	r1, #0
 8000844:	0018      	movs	r0, r3
 8000846:	f006 fa2c 	bl	8006ca2 <memset>
	memset(&rtc_date, 0, sizeof(rtc_date));
 800084a:	2418      	movs	r4, #24
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2204      	movs	r2, #4
 8000850:	2100      	movs	r1, #0
 8000852:	0018      	movs	r0, r3
 8000854:	f006 fa25 	bl	8006ca2 <memset>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <show_time_date+0xbc>)
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f001 ff8e 	bl	8002780 <HAL_RTC_GetTime>

	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000864:	1939      	adds	r1, r7, r4
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <show_time_date+0xbc>)
 8000868:	2200      	movs	r2, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f002 f876 	bl	800295c <HAL_RTC_GetDate>

	char* format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	78db      	ldrb	r3, [r3, #3]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <show_time_date+0x44>
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <show_time_date+0xc0>)
 800087a:	e000      	b.n	800087e <show_time_date+0x46>
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <show_time_date+0xc4>)
 800087e:	61fb      	str	r3, [r7, #28]

	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\n\rCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	001e      	movs	r6, r3
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	001c      	movs	r4, r3
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	001d      	movs	r5, r3
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <show_time_date+0xc8>)
 8000894:	491b      	ldr	r1, [pc, #108]	; (8000904 <show_time_date+0xcc>)
 8000896:	481c      	ldr	r0, [pc, #112]	; (8000908 <show_time_date+0xd0>)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	9501      	str	r5, [sp, #4]
 800089e:	9400      	str	r4, [sp, #0]
 80008a0:	0033      	movs	r3, r6
 80008a2:	f006 fa07 	bl	8006cb4 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <show_time_date+0xd4>)
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	425a      	negs	r2, r3
 80008ae:	4918      	ldr	r1, [pc, #96]	; (8000910 <show_time_date+0xd8>)
 80008b0:	2300      	movs	r3, #0
 80008b2:	f004 f85b 	bl	800496c <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n\r",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80008b6:	2118      	movs	r1, #24
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	001a      	movs	r2, r3
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	789b      	ldrb	r3, [r3, #2]
 80008c2:	001c      	movs	r4, r3
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	78db      	ldrb	r3, [r3, #3]
 80008c8:	21fa      	movs	r1, #250	; 0xfa
 80008ca:	00c9      	lsls	r1, r1, #3
 80008cc:	468c      	mov	ip, r1
 80008ce:	4463      	add	r3, ip
 80008d0:	4910      	ldr	r1, [pc, #64]	; (8000914 <show_time_date+0xdc>)
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <show_time_date+0xe0>)
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	0023      	movs	r3, r4
 80008d8:	f006 f9ec 	bl	8006cb4 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <show_time_date+0xd4>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	2301      	movs	r3, #1
 80008e2:	425a      	negs	r2, r3
 80008e4:	490d      	ldr	r1, [pc, #52]	; (800091c <show_time_date+0xe4>)
 80008e6:	2300      	movs	r3, #0
 80008e8:	f004 f840 	bl	800496c <xQueueGenericSend>


}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b009      	add	sp, #36	; 0x24
 80008f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f4:	20000744 	.word	0x20000744
 80008f8:	080076b4 	.word	0x080076b4
 80008fc:	080076b8 	.word	0x080076b8
 8000900:	080076bc 	.word	0x080076bc
 8000904:	080076d0 	.word	0x080076d0
 8000908:	20000810 	.word	0x20000810
 800090c:	20000804 	.word	0x20000804
 8000910:	20000004 	.word	0x20000004
 8000914:	080076e8 	.word	0x080076e8
 8000918:	20000838 	.word	0x20000838
 800091c:	20000008 	.word	0x20000008

08000920 <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <rtc_configure_time+0x30>)
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fe77 	bl	8002634 <HAL_RTC_SetTime>
}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000744 	.word	0x20000744

08000954 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 800095c:	6879      	ldr	r1, [r7, #4]
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <rtc_configure_date+0x1c>)
 8000960:	2200      	movs	r2, #0
 8000962:	0018      	movs	r0, r3
 8000964:	f001 ff6a 	bl	800283c <HAL_RTC_SetDate>
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000744 	.word	0x20000744

08000974 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	if(time){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00d      	beq.n	80009a0 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b0c      	cmp	r3, #12
 800098a:	d807      	bhi.n	800099c <validate_rtc_information+0x28>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	2b3b      	cmp	r3, #59	; 0x3b
 8000992:	d803      	bhi.n	800099c <validate_rtc_information+0x28>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	789b      	ldrb	r3, [r3, #2]
 8000998:	2b3b      	cmp	r3, #59	; 0x3b
 800099a:	d901      	bls.n	80009a0 <validate_rtc_information+0x2c>
			return 1;
 800099c:	2301      	movs	r3, #1
 800099e:	e015      	b.n	80009cc <validate_rtc_information+0x58>
	}

	if(date){
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d011      	beq.n	80009ca <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	2b1f      	cmp	r3, #31
 80009ac:	d80b      	bhi.n	80009c6 <validate_rtc_information+0x52>
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d807      	bhi.n	80009c6 <validate_rtc_information+0x52>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	2b63      	cmp	r3, #99	; 0x63
 80009bc:	d803      	bhi.n	80009c6 <validate_rtc_information+0x52>
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	2b0c      	cmp	r3, #12
 80009c4:	d901      	bls.n	80009ca <validate_rtc_information+0x56>
			return 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e000      	b.n	80009cc <validate_rtc_information+0x58>
	}

	return 0;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_MspInit+0x50>)
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_MspInit+0x50>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x50>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x50>)
 80009f4:	69da      	ldr	r2, [r3, #28]
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_MspInit+0x50>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0549      	lsls	r1, r1, #21
 80009fc:	430a      	orrs	r2, r1
 80009fe:	61da      	str	r2, [r3, #28]
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_MspInit+0x50>)
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	055b      	lsls	r3, r3, #21
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000a0e:	2302      	movs	r3, #2
 8000a10:	425b      	negs	r3, r3
 8000a12:	2200      	movs	r2, #0
 8000a14:	2103      	movs	r1, #3
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fdbe 	bl	8001598 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_RTC_MspInit+0x28>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_RTC_MspInit+0x2c>)
 8000a3c:	6a1a      	ldr	r2, [r3, #32]
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_RTC_MspInit+0x2c>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0209      	lsls	r1, r1, #8
 8000a44:	430a      	orrs	r2, r1
 8000a46:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40002800 	.word	0x40002800
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b08b      	sub	sp, #44	; 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	2414      	movs	r4, #20
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f006 f919 	bl	8006ca2 <memset>
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <HAL_UART_MspInit+0xa0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d13a      	bne.n	8000af0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <HAL_UART_MspInit+0xa4>)
 8000a7c:	69da      	ldr	r2, [r3, #28]
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_UART_MspInit+0xa4>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0289      	lsls	r1, r1, #10
 8000a84:	430a      	orrs	r2, r1
 8000a86:	61da      	str	r2, [r3, #28]
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <HAL_UART_MspInit+0xa4>)
 8000a8a:	69da      	ldr	r2, [r3, #28]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_UART_MspInit+0xa4>)
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_UART_MspInit+0xa4>)
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	0289      	lsls	r1, r1, #10
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	615a      	str	r2, [r3, #20]
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_UART_MspInit+0xa4>)
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	029b      	lsls	r3, r3, #10
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab2:	0021      	movs	r1, r4
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2201      	movs	r2, #1
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	2390      	movs	r3, #144	; 0x90
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fdfe 	bl	80016dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	201c      	movs	r0, #28
 8000ae6:	f000 fd57 	bl	8001598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aea:	201c      	movs	r0, #28
 8000aec:	f000 fd69 	bl	80015c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b00b      	add	sp, #44	; 0x2c
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	0019      	movs	r1, r3
 8000b16:	2011      	movs	r0, #17
 8000b18:	f000 fd3e 	bl	8001598 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f000 fd50 	bl	80015c2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b24:	69da      	ldr	r2, [r3, #28]
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b28:	2110      	movs	r1, #16
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	61da      	str	r2, [r3, #28]
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	2210      	movs	r2, #16
 8000b34:	4013      	ands	r3, r2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	18fa      	adds	r2, r7, r3
 8000b3e:	2310      	movs	r3, #16
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 fbd5 	bl	80022f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4a:	f001 fbbd 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	4914      	ldr	r1, [pc, #80]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff faf2 	bl	8000140 <__udivsi3>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0xac>)
 8000b64:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <HAL_InitTick+0xb0>)
 8000b66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_InitTick+0xac>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <HAL_InitTick+0xb4>)
 8000b6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_InitTick+0xac>)
 8000b70:	6a3a      	ldr	r2, [r7, #32]
 8000b72:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_InitTick+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_InitTick+0xac>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_InitTick+0xac>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 f80e 	bl	8002ba4 <HAL_TIM_Base_Init>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d105      	bne.n	8000b98 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <HAL_InitTick+0xac>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f002 f860 	bl	8002c54 <HAL_TIM_Base_Start_IT>
 8000b94:	0003      	movs	r3, r0
 8000b96:	e000      	b.n	8000b9a <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b00a      	add	sp, #40	; 0x28
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	000f4240 	.word	0x000f4240
 8000bac:	20000860 	.word	0x20000860
 8000bb0:	40001000 	.word	0x40001000
 8000bb4:	000003e7 	.word	0x000003e7

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <TIM6_IRQHandler+0x14>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 f88e 	bl	8002cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000860 	.word	0x20000860

08000bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <USART2_IRQHandler+0x14>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 fb8a 	bl	80032fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	20000764 	.word	0x20000764

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f006 f80a 	bl	8006c3c <__errno>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	425b      	negs	r3, r3
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	18d2      	adds	r2, r2, r3
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b006      	add	sp, #24
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20004000 	.word	0x20004000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	200008a8 	.word	0x200008a8
 8000c5c:	20001748 	.word	0x20001748

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <led_task>:

#include "main.h"

const char *msg_inv = "////Invalid option////\n\r";

void led_task(void* param){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	const char* msg_led = "========================\n\r"
 8000c74:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <led_task+0xf8>)
 8000c76:	60fb      	str	r3, [r7, #12]
			  "(none,e1,e2,e3,e4)\n\r"
			  "Enter your choice here : \n\r";


	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000c78:	2301      	movs	r3, #1
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2000      	movs	r0, #0
 8000c82:	f005 f84d 	bl	8005d20 <xTaskNotifyWait>

		xQueueSend(q_print,&msg_led, portMAX_DELAY);
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <led_task+0xfc>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	425a      	negs	r2, r3
 8000c8e:	230c      	movs	r3, #12
 8000c90:	18f9      	adds	r1, r7, r3
 8000c92:	2300      	movs	r3, #0
 8000c94:	f003 fe6a 	bl	800496c <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000c98:	2301      	movs	r3, #1
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	18ba      	adds	r2, r7, r2
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f005 f83c 	bl	8005d20 <xTaskNotifyWait>

		cmd = (command_t*) cmd_addr;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4){
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d843      	bhi.n	8000d3c <led_task+0xd0>
			if( !strcmp((char*)cmd->payload, "none")){
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <led_task+0x100>)
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fa24 	bl	8000108 <strcmp>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d102      	bne.n	8000cca <led_task+0x5e>
				led_effect_stop();
 8000cc4:	f7ff faf8 	bl	80002b8 <led_effect_stop>
 8000cc8:	e040      	b.n	8000d4c <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e1")){
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <led_task+0x104>)
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff fa19 	bl	8000108 <strcmp>
 8000cd6:	1e03      	subs	r3, r0, #0
 8000cd8:	d103      	bne.n	8000ce2 <led_task+0x76>
				led_effect(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff faf1 	bl	80002c2 <led_effect>
 8000ce0:	e034      	b.n	8000d4c <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e2")){
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <led_task+0x108>)
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fa0d 	bl	8000108 <strcmp>
 8000cee:	1e03      	subs	r3, r0, #0
 8000cf0:	d103      	bne.n	8000cfa <led_task+0x8e>
				led_effect(2);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f7ff fae5 	bl	80002c2 <led_effect>
 8000cf8:	e028      	b.n	8000d4c <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e3")){
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <led_task+0x10c>)
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fa01 	bl	8000108 <strcmp>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d103      	bne.n	8000d12 <led_task+0xa6>
				led_effect(3);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f7ff fad9 	bl	80002c2 <led_effect>
 8000d10:	e01c      	b.n	8000d4c <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e4")){
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <led_task+0x110>)
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff f9f5 	bl	8000108 <strcmp>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d103      	bne.n	8000d2a <led_task+0xbe>
				led_effect(4);
 8000d22:	2004      	movs	r0, #4
 8000d24:	f7ff facd 	bl	80002c2 <led_effect>
 8000d28:	e010      	b.n	8000d4c <led_task+0xe0>
			}
			else{
				xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <led_task+0xfc>)
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425a      	negs	r2, r3
 8000d32:	4913      	ldr	r1, [pc, #76]	; (8000d80 <led_task+0x114>)
 8000d34:	2300      	movs	r3, #0
 8000d36:	f003 fe19 	bl	800496c <xQueueGenericSend>
 8000d3a:	e007      	b.n	8000d4c <led_task+0xe0>
			}
		}
		else{
			xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <led_task+0xfc>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	425a      	negs	r2, r3
 8000d44:	490e      	ldr	r1, [pc, #56]	; (8000d80 <led_task+0x114>)
 8000d46:	2300      	movs	r3, #0
 8000d48:	f003 fe10 	bl	800496c <xQueueGenericSend>
		}

		curr_state = sMainMenu;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <led_task+0x118>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]

		xTaskNotify(defaultTaskHandle, 0, eNoAction);
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <led_task+0x11c>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f005 f834 	bl	8005dc8 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000d60:	e78a      	b.n	8000c78 <led_task+0xc>
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	08007718 	.word	0x08007718
 8000d68:	20000804 	.word	0x20000804
 8000d6c:	08007798 	.word	0x08007798
 8000d70:	080077a0 	.word	0x080077a0
 8000d74:	080077a4 	.word	0x080077a4
 8000d78:	080077a8 	.word	0x080077a8
 8000d7c:	080077ac 	.word	0x080077ac
 8000d80:	20000010 	.word	0x20000010
 8000d84:	20000809 	.word	0x20000809
 8000d88:	200007ec 	.word	0x200007ec

08000d8c <getnumber>:
	}
}

uint8_t getnumber(uint8_t* p, int8_t len){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	000a      	movs	r2, r1
 8000d96:	1cfb      	adds	r3, r7, #3
 8000d98:	701a      	strb	r2, [r3, #0]
	if(len > 1){
 8000d9a:	1cfb      	adds	r3, r7, #3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b25b      	sxtb	r3, r3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	dd0e      	ble.n	8000dc2 <getnumber+0x36>
		return ((p[0] - 48) * 10 + (p[1] - 48));
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	1c1a      	adds	r2, r3, #0
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	18db      	adds	r3, r3, r3
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	18d3      	adds	r3, r2, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	3b10      	subs	r3, #16
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	e003      	b.n	8000dca <getnumber+0x3e>
	}else{
		return (p[0] - 48);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3b30      	subs	r3, #48	; 0x30
 8000dc8:	b2db      	uxtb	r3, r3
	}
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <rtc_task>:

void rtc_task(void* param){
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b09a      	sub	sp, #104	; 0x68
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]

	const char* msg_rtc1 = "\n\r========================\n\r"
 8000ddc:	4bca      	ldr	r3, [pc, #808]	; (8001108 <rtc_task+0x334>)
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n\r"
							"========================\n\r";

	const char* msg_rtc2 = "Configure Time            ----> 0\n\r"
 8000de0:	4bca      	ldr	r3, [pc, #808]	; (800110c <rtc_task+0x338>)
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n\r"
							"Exit                      ----> 3\n\r"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8000de4:	4bca      	ldr	r3, [pc, #808]	; (8001110 <rtc_task+0x33c>)
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8000de8:	4bca      	ldr	r3, [pc, #808]	; (8001114 <rtc_task+0x340>)
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8000dec:	4bca      	ldr	r3, [pc, #808]	; (8001118 <rtc_task+0x344>)
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 8000df0:	4bca      	ldr	r3, [pc, #808]	; (800111c <rtc_task+0x348>)
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8000df4:	4bca      	ldr	r3, [pc, #808]	; (8001120 <rtc_task+0x34c>)
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8000df8:	4bca      	ldr	r3, [pc, #808]	; (8001124 <rtc_task+0x350>)
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8000dfc:	4bca      	ldr	r3, [pc, #808]	; (8001128 <rtc_task+0x354>)
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n\r";
 8000e00:	4bca      	ldr	r3, [pc, #808]	; (800112c <rtc_task+0x358>)
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8000e04:	4bca      	ldr	r3, [pc, #808]	; (8001130 <rtc_task+0x35c>)
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24



	while(1){

		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f004 ff85 	bl	8005d20 <xTaskNotifyWait>

		xQueueSend(q_print,&msg_rtc1, portMAX_DELAY);
 8000e16:	4bc7      	ldr	r3, [pc, #796]	; (8001134 <rtc_task+0x360>)
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	425a      	negs	r2, r3
 8000e1e:	234c      	movs	r3, #76	; 0x4c
 8000e20:	18f9      	adds	r1, r7, r3
 8000e22:	2300      	movs	r3, #0
 8000e24:	f003 fda2 	bl	800496c <xQueueGenericSend>

		show_time_date();
 8000e28:	f7ff fd06 	bl	8000838 <show_time_date>

		xQueueSend(q_print,&msg_rtc2, portMAX_DELAY);
 8000e2c:	4bc1      	ldr	r3, [pc, #772]	; (8001134 <rtc_task+0x360>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	425a      	negs	r2, r3
 8000e34:	2348      	movs	r3, #72	; 0x48
 8000e36:	18f9      	adds	r1, r7, r3
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f003 fd97 	bl	800496c <xQueueGenericSend>

		while(curr_state != sMainMenu){
 8000e3e:	e1fb      	b.n	8001238 <rtc_task+0x464>


			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000e40:	2301      	movs	r3, #1
 8000e42:	425b      	negs	r3, r3
 8000e44:	2220      	movs	r2, #32
 8000e46:	18ba      	adds	r2, r7, r2
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f004 ff68 	bl	8005d20 <xTaskNotifyWait>
			cmd = (command_t*)cmd_addr;
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state){
 8000e54:	4bb8      	ldr	r3, [pc, #736]	; (8001138 <rtc_task+0x364>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d100      	bne.n	8000e5e <rtc_task+0x8a>
 8000e5c:	e1ab      	b.n	80011b6 <rtc_task+0x3e2>
 8000e5e:	dd00      	ble.n	8000e62 <rtc_task+0x8e>
 8000e60:	e1ea      	b.n	8001238 <rtc_task+0x464>
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d100      	bne.n	8000e68 <rtc_task+0x94>
 8000e66:	e0e4      	b.n	8001032 <rtc_task+0x25e>
 8000e68:	dd00      	ble.n	8000e6c <rtc_task+0x98>
 8000e6a:	e1e5      	b.n	8001238 <rtc_task+0x464>
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d002      	beq.n	8000e76 <rtc_task+0xa2>
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d05e      	beq.n	8000f32 <rtc_task+0x15e>
 8000e74:	e1e0      	b.n	8001238 <rtc_task+0x464>

			case sRtcMenu:{
				if(cmd->len == 1){
 8000e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d14d      	bne.n	8000f1a <rtc_task+0x146>
					menu_code = cmd->payload[0]-48;
 8000e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	3b30      	subs	r3, #48	; 0x30
 8000e84:	653b      	str	r3, [r7, #80]	; 0x50
 8000e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d036      	beq.n	8000efa <rtc_task+0x126>
 8000e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	dc37      	bgt.n	8000f02 <rtc_task+0x12e>
 8000e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d023      	beq.n	8000ee0 <rtc_task+0x10c>
 8000e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	dc31      	bgt.n	8000f02 <rtc_task+0x12e>
 8000e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <rtc_task+0xd8>
 8000ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d00d      	beq.n	8000ec6 <rtc_task+0xf2>
 8000eaa:	e02a      	b.n	8000f02 <rtc_task+0x12e>

					switch(menu_code){
					case 0:
						curr_state = sRtcTimeConfig;
 8000eac:	4ba2      	ldr	r3, [pc, #648]	; (8001138 <rtc_task+0x364>)
 8000eae:	2203      	movs	r2, #3
 8000eb0:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 8000eb2:	4ba0      	ldr	r3, [pc, #640]	; (8001134 <rtc_task+0x360>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	425a      	negs	r2, r3
 8000eba:	2344      	movs	r3, #68	; 0x44
 8000ebc:	18f9      	adds	r1, r7, r3
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f003 fd54 	bl	800496c <xQueueGenericSend>
						break;
 8000ec4:	e034      	b.n	8000f30 <rtc_task+0x15c>
					case 1:
						curr_state = sRtcDateConfig;
 8000ec6:	4b9c      	ldr	r3, [pc, #624]	; (8001138 <rtc_task+0x364>)
 8000ec8:	2204      	movs	r2, #4
 8000eca:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8000ecc:	4b99      	ldr	r3, [pc, #612]	; (8001134 <rtc_task+0x360>)
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	425a      	negs	r2, r3
 8000ed4:	2338      	movs	r3, #56	; 0x38
 8000ed6:	18f9      	adds	r1, r7, r3
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f003 fd47 	bl	800496c <xQueueGenericSend>
						break;
 8000ede:	e027      	b.n	8000f30 <rtc_task+0x15c>
					case 2:
						curr_state = sRtcReport;
 8000ee0:	4b95      	ldr	r3, [pc, #596]	; (8001138 <rtc_task+0x364>)
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
 8000ee6:	4b93      	ldr	r3, [pc, #588]	; (8001134 <rtc_task+0x360>)
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	425a      	negs	r2, r3
 8000eee:	2324      	movs	r3, #36	; 0x24
 8000ef0:	18f9      	adds	r1, r7, r3
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f003 fd3a 	bl	800496c <xQueueGenericSend>
						break;
 8000ef8:	e01a      	b.n	8000f30 <rtc_task+0x15c>
					case 3:
						curr_state = sMainMenu;
 8000efa:	4b8f      	ldr	r3, [pc, #572]	; (8001138 <rtc_task+0x364>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
						break;
 8000f00:	e016      	b.n	8000f30 <rtc_task+0x15c>

					default:
						curr_state = sMainMenu;
 8000f02:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <rtc_task+0x364>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000f08:	4b8a      	ldr	r3, [pc, #552]	; (8001134 <rtc_task+0x360>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	425a      	negs	r2, r3
 8000f10:	498a      	ldr	r1, [pc, #552]	; (800113c <rtc_task+0x368>)
 8000f12:	2300      	movs	r3, #0
 8000f14:	f003 fd2a 	bl	800496c <xQueueGenericSend>
 8000f18:	e18e      	b.n	8001238 <rtc_task+0x464>

					}

				}else{
					curr_state = sMainMenu;
 8000f1a:	4b87      	ldr	r3, [pc, #540]	; (8001138 <rtc_task+0x364>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000f20:	4b84      	ldr	r3, [pc, #528]	; (8001134 <rtc_task+0x360>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	2301      	movs	r3, #1
 8000f26:	425a      	negs	r2, r3
 8000f28:	4984      	ldr	r1, [pc, #528]	; (800113c <rtc_task+0x368>)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f003 fd1e 	bl	800496c <xQueueGenericSend>

				}
			break;}
 8000f30:	e182      	b.n	8001238 <rtc_task+0x464>
			case sRtcTimeConfig:{

				switch(rtc_state){
 8000f32:	4b83      	ldr	r3, [pc, #524]	; (8001140 <rtc_task+0x36c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d042      	beq.n	8000fc0 <rtc_task+0x1ec>
 8000f3a:	dd00      	ble.n	8000f3e <rtc_task+0x16a>
 8000f3c:	e17c      	b.n	8001238 <rtc_task+0x464>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <rtc_task+0x174>
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d01e      	beq.n	8000f84 <rtc_task+0x1b0>
 8000f46:	e177      	b.n	8001238 <rtc_task+0x464>
				case HH_CONFIG:{
					uint8_t hour = getnumber(cmd->payload, cmd->len);
 8000f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	2555      	movs	r5, #85	; 0x55
 8000f52:	197c      	adds	r4, r7, r5
 8000f54:	0019      	movs	r1, r3
 8000f56:	0010      	movs	r0, r2
 8000f58:	f7ff ff18 	bl	8000d8c <getnumber>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	7023      	strb	r3, [r4, #0]
					time.Hours = hour;
 8000f60:	230c      	movs	r3, #12
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	197a      	adds	r2, r7, r5
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	701a      	strb	r2, [r3, #0]
					rtc_state = MM_CONFIG;
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <rtc_task+0x36c>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8000f70:	4b70      	ldr	r3, [pc, #448]	; (8001134 <rtc_task+0x360>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	425a      	negs	r2, r3
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	18f9      	adds	r1, r7, r3
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f003 fcf5 	bl	800496c <xQueueGenericSend>
					break;
 8000f82:	e055      	b.n	8001030 <rtc_task+0x25c>
				}
				case MM_CONFIG:{
					uint8_t min = getnumber(cmd->payload, cmd->len);
 8000f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	2556      	movs	r5, #86	; 0x56
 8000f8e:	197c      	adds	r4, r7, r5
 8000f90:	0019      	movs	r1, r3
 8000f92:	0010      	movs	r0, r2
 8000f94:	f7ff fefa 	bl	8000d8c <getnumber>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	7023      	strb	r3, [r4, #0]
					time.Minutes = min;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	197a      	adds	r2, r7, r5
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	705a      	strb	r2, [r3, #1]
					rtc_state = SS_CONFIG;
 8000fa6:	4b66      	ldr	r3, [pc, #408]	; (8001140 <rtc_task+0x36c>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	601a      	str	r2, [r3, #0]
					xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 8000fac:	4b61      	ldr	r3, [pc, #388]	; (8001134 <rtc_task+0x360>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	425a      	negs	r2, r3
 8000fb4:	233c      	movs	r3, #60	; 0x3c
 8000fb6:	18f9      	adds	r1, r7, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f003 fcd7 	bl	800496c <xQueueGenericSend>
					break;
 8000fbe:	e037      	b.n	8001030 <rtc_task+0x25c>
				}
				case SS_CONFIG:{
					uint8_t sec = getnumber(cmd->payload, cmd->len);
 8000fc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	2557      	movs	r5, #87	; 0x57
 8000fca:	197c      	adds	r4, r7, r5
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0010      	movs	r0, r2
 8000fd0:	f7ff fedc 	bl	8000d8c <getnumber>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	7023      	strb	r3, [r4, #0]
					time.Seconds = sec;
 8000fd8:	210c      	movs	r1, #12
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	197a      	adds	r2, r7, r5
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	709a      	strb	r2, [r3, #2]
					if(!validate_rtc_information(&time,NULL)){
 8000fe2:	000c      	movs	r4, r1
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff fcc3 	bl	8000974 <validate_rtc_information>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d10f      	bne.n	8001012 <rtc_task+0x23e>
						rtc_configure_time(&time);
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff fc93 	bl	8000920 <rtc_configure_time>
						xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8000ffa:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <rtc_task+0x360>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	425a      	negs	r2, r3
 8001002:	2328      	movs	r3, #40	; 0x28
 8001004:	18f9      	adds	r1, r7, r3
 8001006:	2300      	movs	r3, #0
 8001008:	f003 fcb0 	bl	800496c <xQueueGenericSend>
						show_time_date();
 800100c:	f7ff fc14 	bl	8000838 <show_time_date>
 8001010:	e007      	b.n	8001022 <rtc_task+0x24e>
					}else{
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001012:	4b48      	ldr	r3, [pc, #288]	; (8001134 <rtc_task+0x360>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	425a      	negs	r2, r3
 800101a:	4948      	ldr	r1, [pc, #288]	; (800113c <rtc_task+0x368>)
 800101c:	2300      	movs	r3, #0
 800101e:	f003 fca5 	bl	800496c <xQueueGenericSend>
					}

					curr_state = sMainMenu;
 8001022:	4b45      	ldr	r3, [pc, #276]	; (8001138 <rtc_task+0x364>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
					rtc_state = 0;
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <rtc_task+0x36c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
					break;
 800102e:	46c0      	nop			; (mov r8, r8)
				}
				}
				break;}
 8001030:	e102      	b.n	8001238 <rtc_task+0x464>

				case sRtcDateConfig:{

					switch(rtc_state){
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <rtc_task+0x36c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d047      	beq.n	80010ca <rtc_task+0x2f6>
 800103a:	dd00      	ble.n	800103e <rtc_task+0x26a>
 800103c:	e0fc      	b.n	8001238 <rtc_task+0x464>
 800103e:	2b02      	cmp	r3, #2
 8001040:	d100      	bne.n	8001044 <rtc_task+0x270>
 8001042:	e07f      	b.n	8001144 <rtc_task+0x370>
 8001044:	dd00      	ble.n	8001048 <rtc_task+0x274>
 8001046:	e0f7      	b.n	8001238 <rtc_task+0x464>
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <rtc_task+0x27e>
 800104c:	2b01      	cmp	r3, #1
 800104e:	d01e      	beq.n	800108e <rtc_task+0x2ba>
 8001050:	e0f2      	b.n	8001238 <rtc_task+0x464>
					case DATE_CONFIG:{
						uint8_t d = getnumber(cmd->payload, cmd->len);
 8001052:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	b25b      	sxtb	r3, r3
 800105a:	2558      	movs	r5, #88	; 0x58
 800105c:	197c      	adds	r4, r7, r5
 800105e:	0019      	movs	r1, r3
 8001060:	0010      	movs	r0, r2
 8001062:	f7ff fe93 	bl	8000d8c <getnumber>
 8001066:	0003      	movs	r3, r0
 8001068:	7023      	strb	r3, [r4, #0]
						date.Date = d;
 800106a:	2308      	movs	r3, #8
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	197a      	adds	r2, r7, r5
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	709a      	strb	r2, [r3, #2]
						rtc_state = MONTH_CONFIG;
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <rtc_task+0x36c>)
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 800107a:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <rtc_task+0x360>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	425a      	negs	r2, r3
 8001082:	2334      	movs	r3, #52	; 0x34
 8001084:	18f9      	adds	r1, r7, r3
 8001086:	2300      	movs	r3, #0
 8001088:	f003 fc70 	bl	800496c <xQueueGenericSend>
						break;
 800108c:	e092      	b.n	80011b4 <rtc_task+0x3e0>
					}
					case MONTH_CONFIG:{
						uint8_t month = getnumber(cmd->payload, cmd->len);
 800108e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	2559      	movs	r5, #89	; 0x59
 8001098:	197c      	adds	r4, r7, r5
 800109a:	0019      	movs	r1, r3
 800109c:	0010      	movs	r0, r2
 800109e:	f7ff fe75 	bl	8000d8c <getnumber>
 80010a2:	0003      	movs	r3, r0
 80010a4:	7023      	strb	r3, [r4, #0]
						date.Month= month;
 80010a6:	2308      	movs	r3, #8
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	197a      	adds	r2, r7, r5
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	705a      	strb	r2, [r3, #1]
						rtc_state = DAY_CONFIG;
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <rtc_task+0x36c>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <rtc_task+0x360>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	425a      	negs	r2, r3
 80010be:	2330      	movs	r3, #48	; 0x30
 80010c0:	18f9      	adds	r1, r7, r3
 80010c2:	2300      	movs	r3, #0
 80010c4:	f003 fc52 	bl	800496c <xQueueGenericSend>
						break;
 80010c8:	e074      	b.n	80011b4 <rtc_task+0x3e0>
					}
					case DAY_CONFIG:{
						uint8_t day = getnumber(cmd->payload, cmd->len);
 80010ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	255b      	movs	r5, #91	; 0x5b
 80010d4:	197c      	adds	r4, r7, r5
 80010d6:	0019      	movs	r1, r3
 80010d8:	0010      	movs	r0, r2
 80010da:	f7ff fe57 	bl	8000d8c <getnumber>
 80010de:	0003      	movs	r3, r0
 80010e0:	7023      	strb	r3, [r4, #0]
						date.WeekDay = day;
 80010e2:	2308      	movs	r3, #8
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	197a      	adds	r2, r7, r5
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	701a      	strb	r2, [r3, #0]
						rtc_state = YEAR_CONFIG;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <rtc_task+0x36c>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	601a      	str	r2, [r3, #0]
						xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <rtc_task+0x360>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	425a      	negs	r2, r3
 80010fa:	232c      	movs	r3, #44	; 0x2c
 80010fc:	18f9      	adds	r1, r7, r3
 80010fe:	2300      	movs	r3, #0
 8001100:	f003 fc34 	bl	800496c <xQueueGenericSend>
						break;
 8001104:	e056      	b.n	80011b4 <rtc_task+0x3e0>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	080077b0 	.word	0x080077b0
 800110c:	08007804 	.word	0x08007804
 8001110:	080078ac 	.word	0x080078ac
 8001114:	080078c0 	.word	0x080078c0
 8001118:	080078d8 	.word	0x080078d8
 800111c:	080078f0 	.word	0x080078f0
 8001120:	08007904 	.word	0x08007904
 8001124:	08007918 	.word	0x08007918
 8001128:	08007930 	.word	0x08007930
 800112c:	08007944 	.word	0x08007944
 8001130:	08007960 	.word	0x08007960
 8001134:	20000804 	.word	0x20000804
 8001138:	20000809 	.word	0x20000809
 800113c:	20000010 	.word	0x20000010
 8001140:	200008ac 	.word	0x200008ac
					}
					case YEAR_CONFIG:{
						uint8_t year = getnumber(cmd->payload, cmd->len);
 8001144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	b25b      	sxtb	r3, r3
 800114c:	255a      	movs	r5, #90	; 0x5a
 800114e:	197c      	adds	r4, r7, r5
 8001150:	0019      	movs	r1, r3
 8001152:	0010      	movs	r0, r2
 8001154:	f7ff fe1a 	bl	8000d8c <getnumber>
 8001158:	0003      	movs	r3, r0
 800115a:	7023      	strb	r3, [r4, #0]
						date.Year = year;
 800115c:	2108      	movs	r1, #8
 800115e:	187b      	adds	r3, r7, r1
 8001160:	197a      	adds	r2, r7, r5
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	70da      	strb	r2, [r3, #3]

						if(!validate_rtc_information(NULL,&date)){
 8001166:	000c      	movs	r4, r1
 8001168:	187b      	adds	r3, r7, r1
 800116a:	0019      	movs	r1, r3
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fc01 	bl	8000974 <validate_rtc_information>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d10f      	bne.n	8001196 <rtc_task+0x3c2>
							rtc_configure_date(&date);
 8001176:	193b      	adds	r3, r7, r4
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fbeb 	bl	8000954 <rtc_configure_date>
							xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <rtc_task+0x480>)
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	425a      	negs	r2, r3
 8001186:	2328      	movs	r3, #40	; 0x28
 8001188:	18f9      	adds	r1, r7, r3
 800118a:	2300      	movs	r3, #0
 800118c:	f003 fbee 	bl	800496c <xQueueGenericSend>
							show_time_date();
 8001190:	f7ff fb52 	bl	8000838 <show_time_date>
 8001194:	e007      	b.n	80011a6 <rtc_task+0x3d2>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <rtc_task+0x480>)
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	425a      	negs	r2, r3
 800119e:	492e      	ldr	r1, [pc, #184]	; (8001258 <rtc_task+0x484>)
 80011a0:	2300      	movs	r3, #0
 80011a2:	f003 fbe3 	bl	800496c <xQueueGenericSend>
						}

						curr_state = sMainMenu;
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <rtc_task+0x488>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
						rtc_state = 0;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <rtc_task+0x48c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
						break;
 80011b2:	46c0      	nop			; (mov r8, r8)

					}

					}

				break;}
 80011b4:	e040      	b.n	8001238 <rtc_task+0x464>

				case sRtcReport:{
					if(cmd->len == 1){
 80011b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d130      	bne.n	8001220 <rtc_task+0x44c>
						if(cmd->payload[0] == 'y'){
 80011be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b79      	cmp	r3, #121	; 0x79
 80011c4:	d114      	bne.n	80011f0 <rtc_task+0x41c>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE){
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <rtc_task+0x490>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f005 fa40 	bl	8006650 <xTimerIsTimerActive>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d12d      	bne.n	8001230 <rtc_task+0x45c>
								xTimerStart(rtc_timer, portMAX_DELAY);
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <rtc_task+0x490>)
 80011d6:	681c      	ldr	r4, [r3, #0]
 80011d8:	f004 fa3a 	bl	8005650 <xTaskGetTickCount>
 80011dc:	0002      	movs	r2, r0
 80011de:	2301      	movs	r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	2101      	movs	r1, #1
 80011e8:	0020      	movs	r0, r4
 80011ea:	f004 ffb5 	bl	8006158 <xTimerGenericCommand>
 80011ee:	e01f      	b.n	8001230 <rtc_task+0x45c>
							}
						}else if(cmd->payload[0] == 'n'){
 80011f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b6e      	cmp	r3, #110	; 0x6e
 80011f6:	d10a      	bne.n	800120e <rtc_task+0x43a>
							xTimerStop(rtc_timer, portMAX_DELAY);
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <rtc_task+0x490>)
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	425b      	negs	r3, r3
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	2200      	movs	r2, #0
 8001206:	2103      	movs	r1, #3
 8001208:	f004 ffa6 	bl	8006158 <xTimerGenericCommand>
 800120c:	e010      	b.n	8001230 <rtc_task+0x45c>
						}else{
							xQueueSend(q_print, &msg_inv,portMAX_DELAY);
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <rtc_task+0x480>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	425a      	negs	r2, r3
 8001216:	4910      	ldr	r1, [pc, #64]	; (8001258 <rtc_task+0x484>)
 8001218:	2300      	movs	r3, #0
 800121a:	f003 fba7 	bl	800496c <xQueueGenericSend>
 800121e:	e007      	b.n	8001230 <rtc_task+0x45c>
						}
					}else{
						xQueueSend(q_print, &msg_inv,portMAX_DELAY);
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <rtc_task+0x480>)
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	425a      	negs	r2, r3
 8001228:	490b      	ldr	r1, [pc, #44]	; (8001258 <rtc_task+0x484>)
 800122a:	2300      	movs	r3, #0
 800122c:	f003 fb9e 	bl	800496c <xQueueGenericSend>
					}

					curr_state = sMainMenu;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <rtc_task+0x488>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
					break;
 8001236:	46c0      	nop			; (mov r8, r8)
		while(curr_state != sMainMenu){
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <rtc_task+0x488>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d000      	beq.n	8001242 <rtc_task+0x46e>
 8001240:	e5fe      	b.n	8000e40 <rtc_task+0x6c>
			}



	}
		xTaskNotify(defaultTaskHandle, 0 ,eNoAction);
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <rtc_task+0x494>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	f004 fdbc 	bl	8005dc8 <xTaskGenericNotify>
	while(1){
 8001250:	e5da      	b.n	8000e08 <rtc_task+0x34>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000804 	.word	0x20000804
 8001258:	20000010 	.word	0x20000010
 800125c:	20000809 	.word	0x20000809
 8001260:	200008ac 	.word	0x200008ac
 8001264:	2000080c 	.word	0x2000080c
 8001268:	200007ec 	.word	0x200007ec

0800126c <print_task>:
}
}

void print_task(void* param){
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

	uint32_t* msg;

	while(1){

		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <print_task+0x38>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	4252      	negs	r2, r2
 800127c:	210c      	movs	r1, #12
 800127e:	1879      	adds	r1, r7, r1
 8001280:	0018      	movs	r0, r3
 8001282:	f003 fca8 	bl	8004bd6 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001286:	68fc      	ldr	r4, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	0018      	movs	r0, r3
 800128c:	f7fe ff46 	bl	800011c <strlen>
 8001290:	0003      	movs	r3, r0
 8001292:	b29a      	uxth	r2, r3
 8001294:	2301      	movs	r3, #1
 8001296:	425b      	negs	r3, r3
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <print_task+0x3c>)
 800129a:	0021      	movs	r1, r4
 800129c:	f001 ff36 	bl	800310c <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80012a0:	e7e8      	b.n	8001274 <print_task+0x8>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	20000804 	.word	0x20000804
 80012a8:	20000764 	.word	0x20000764

080012ac <cmd_task>:
	}
}



void cmd_task(void* param){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;

	while(1){
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80012b4:	2301      	movs	r3, #1
 80012b6:	425b      	negs	r3, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2000      	movs	r0, #0
 80012be:	f004 fd2f 	bl	8005d20 <xTaskNotifyWait>
 80012c2:	0003      	movs	r3, r0
 80012c4:	61fb      	str	r3, [r7, #28]

		if(pdTRUE == ret){
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d1f3      	bne.n	80012b4 <cmd_task+0x8>

			process_command(&cmd);
 80012cc:	230c      	movs	r3, #12
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	0018      	movs	r0, r3
 80012d2:	f000 f801 	bl	80012d8 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80012d6:	e7ed      	b.n	80012b4 <cmd_task+0x8>

080012d8 <process_command>:
		}
	}
}

void process_command(command_t* cmd){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f830 	bl	8001348 <extract_command>

	switch(curr_state){
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <process_command+0x60>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	dc1e      	bgt.n	800132e <process_command+0x56>
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	da14      	bge.n	800131e <process_command+0x46>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <process_command+0x26>
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d008      	beq.n	800130e <process_command+0x36>
	case sRtcReport:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}

}
 80012fc:	e017      	b.n	800132e <process_command+0x56>
		xTaskNotify(defaultTaskHandle, (uint32_t)cmd, eSetValueWithOverwrite);
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <process_command+0x64>)
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	2300      	movs	r3, #0
 8001306:	2203      	movs	r2, #3
 8001308:	f004 fd5e 	bl	8005dc8 <xTaskGenericNotify>
		break;
 800130c:	e00f      	b.n	800132e <process_command+0x56>
		xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <process_command+0x68>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	2300      	movs	r3, #0
 8001316:	2203      	movs	r2, #3
 8001318:	f004 fd56 	bl	8005dc8 <xTaskGenericNotify>
		break;
 800131c:	e007      	b.n	800132e <process_command+0x56>
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <process_command+0x6c>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	2300      	movs	r3, #0
 8001326:	2203      	movs	r2, #3
 8001328:	f004 fd4e 	bl	8005dc8 <xTaskGenericNotify>
		break;
 800132c:	46c0      	nop			; (mov r8, r8)
}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	20000809 	.word	0x20000809
 800133c:	200007ec 	.word	0x200007ec
 8001340:	200007f8 	.word	0x200007f8
 8001344:	200007fc 	.word	0x200007fc

08001348 <extract_command>:

int extract_command(command_t* cmd){
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <extract_command+0x88>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0018      	movs	r0, r3
 8001356:	f003 fd56 	bl	8004e06 <uxQueueMessagesWaiting>
 800135a:	0003      	movs	r3, r0
 800135c:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <extract_command+0x22>
 8001364:	2301      	movs	r3, #1
 8001366:	425b      	negs	r3, r3
 8001368:	e02e      	b.n	80013c8 <extract_command+0x80>

	uint8_t i = 0;
 800136a:	2317      	movs	r3, #23
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]

	do{

		status = xQueueReceive(q_data, &item, 0);
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <extract_command+0x88>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	240f      	movs	r4, #15
 8001378:	1939      	adds	r1, r7, r4
 800137a:	2200      	movs	r2, #0
 800137c:	0018      	movs	r0, r3
 800137e:	f003 fc2a 	bl	8004bd6 <xQueueReceive>
 8001382:	0003      	movs	r3, r0
 8001384:	613b      	str	r3, [r7, #16]
		if(pdTRUE == status) cmd->payload[i++] = item;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10a      	bne.n	80013a2 <extract_command+0x5a>
 800138c:	2217      	movs	r2, #23
 800138e:	18bb      	adds	r3, r7, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	18ba      	adds	r2, r7, r2
 8001394:	1c59      	adds	r1, r3, #1
 8001396:	7011      	strb	r1, [r2, #0]
 8001398:	001a      	movs	r2, r3
 800139a:	193b      	adds	r3, r7, r4
 800139c:	7819      	ldrb	r1, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	5499      	strb	r1, [r3, r2]

	}while(item != '\n');
 80013a2:	230f      	movs	r3, #15
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b0a      	cmp	r3, #10
 80013aa:	d1e2      	bne.n	8001372 <extract_command+0x2a>

	cmd->payload[i-1] = '\0';
 80013ac:	2017      	movs	r0, #23
 80013ae:	183b      	adds	r3, r7, r0
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	2100      	movs	r1, #0
 80013b8:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 80013ba:	183b      	adds	r3, r7, r0
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	001a      	movs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60da      	str	r2, [r3, #12]

	return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b007      	add	sp, #28
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	20000800 	.word	0x20000800

080013d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d8:	f7ff fc42 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001402:	f005 fc21 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001406:	f7fe ffa1 	bl	800034c <main>

0800140a <LoopForever>:

LoopForever:
    b LoopForever
 800140a:	e7fe      	b.n	800140a <LoopForever>
  ldr   r0, =_estack
 800140c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001418:	08007a60 	.word	0x08007a60
  ldr r2, =_sbss
 800141c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001420:	20001744 	.word	0x20001744

08001424 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_IRQHandler>
	...

08001428 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_Init+0x24>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_Init+0x24>)
 8001432:	2110      	movs	r1, #16
 8001434:	430a      	orrs	r2, r1
 8001436:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001438:	2003      	movs	r0, #3
 800143a:	f7ff fb61 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143e:	f7ff fac9 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	40022000 	.word	0x40022000

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	001a      	movs	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	18d2      	adds	r2, r2, r3
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_IncTick+0x20>)
 8001462:	601a      	str	r2, [r3, #0]
}
 8001464:	46c0      	nop			; (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	20000014 	.word	0x20000014
 8001470:	200008b0 	.word	0x200008b0

08001474 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <HAL_GetTick+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	200008b0 	.word	0x200008b0

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	0002      	movs	r2, r0
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b7f      	cmp	r3, #127	; 0x7f
 800149a:	d809      	bhi.n	80014b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	001a      	movs	r2, r3
 80014a2:	231f      	movs	r3, #31
 80014a4:	401a      	ands	r2, r3
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_EnableIRQ+0x30>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	4091      	lsls	r1, r2
 80014ac:	000a      	movs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
  }
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	0002      	movs	r2, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b7f      	cmp	r3, #127	; 0x7f
 80014d0:	d828      	bhi.n	8001524 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <__NVIC_SetPriority+0xd4>)
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	33c0      	adds	r3, #192	; 0xc0
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	589b      	ldr	r3, [r3, r2]
 80014e2:	1dfa      	adds	r2, r7, #7
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	0011      	movs	r1, r2
 80014e8:	2203      	movs	r2, #3
 80014ea:	400a      	ands	r2, r1
 80014ec:	00d2      	lsls	r2, r2, #3
 80014ee:	21ff      	movs	r1, #255	; 0xff
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	43d2      	mvns	r2, r2
 80014f6:	401a      	ands	r2, r3
 80014f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	22ff      	movs	r2, #255	; 0xff
 8001500:	401a      	ands	r2, r3
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	2303      	movs	r3, #3
 800150a:	4003      	ands	r3, r0
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	481f      	ldr	r0, [pc, #124]	; (8001590 <__NVIC_SetPriority+0xd4>)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	430a      	orrs	r2, r1
 800151c:	33c0      	adds	r3, #192	; 0xc0
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001522:	e031      	b.n	8001588 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <__NVIC_SetPriority+0xd8>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	0019      	movs	r1, r3
 800152c:	230f      	movs	r3, #15
 800152e:	400b      	ands	r3, r1
 8001530:	3b08      	subs	r3, #8
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3306      	adds	r3, #6
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	3304      	adds	r3, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1dfa      	adds	r2, r7, #7
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	0011      	movs	r1, r2
 8001544:	2203      	movs	r2, #3
 8001546:	400a      	ands	r2, r1
 8001548:	00d2      	lsls	r2, r2, #3
 800154a:	21ff      	movs	r1, #255	; 0xff
 800154c:	4091      	lsls	r1, r2
 800154e:	000a      	movs	r2, r1
 8001550:	43d2      	mvns	r2, r2
 8001552:	401a      	ands	r2, r3
 8001554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	22ff      	movs	r2, #255	; 0xff
 800155c:	401a      	ands	r2, r3
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	0018      	movs	r0, r3
 8001564:	2303      	movs	r3, #3
 8001566:	4003      	ands	r3, r0
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <__NVIC_SetPriority+0xd8>)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	001c      	movs	r4, r3
 8001574:	230f      	movs	r3, #15
 8001576:	4023      	ands	r3, r4
 8001578:	3b08      	subs	r3, #8
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	430a      	orrs	r2, r1
 800157e:	3306      	adds	r3, #6
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	18c3      	adds	r3, r0, r3
 8001584:	3304      	adds	r3, #4
 8001586:	601a      	str	r2, [r3, #0]
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b003      	add	sp, #12
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	210f      	movs	r1, #15
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	1c02      	adds	r2, r0, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff81 	bl	80014bc <__NVIC_SetPriority>
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	0002      	movs	r2, r0
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ff57 	bl	8001488 <__NVIC_EnableIRQ>
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2221      	movs	r2, #33	; 0x21
 80015ee:	5c9b      	ldrb	r3, [r3, r2]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d008      	beq.n	8001608 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2204      	movs	r2, #4
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2220      	movs	r2, #32
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e020      	b.n	800164a <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	210e      	movs	r1, #14
 8001614:	438a      	bics	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2101      	movs	r1, #1
 8001624:	438a      	bics	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	2101      	movs	r1, #1
 8001632:	4091      	lsls	r1, r2
 8001634:	000a      	movs	r2, r1
 8001636:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2221      	movs	r2, #33	; 0x21
 800163c:	2101      	movs	r1, #1
 800163e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	2100      	movs	r1, #0
 8001646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	210f      	movs	r1, #15
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2221      	movs	r2, #33	; 0x21
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d006      	beq.n	800167c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2204      	movs	r2, #4
 8001672:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001674:	187b      	adds	r3, r7, r1
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e028      	b.n	80016ce <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	210e      	movs	r1, #14
 8001688:	438a      	bics	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2101      	movs	r1, #1
 8001698:	438a      	bics	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a4:	2101      	movs	r1, #1
 80016a6:	4091      	lsls	r1, r2
 80016a8:	000a      	movs	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2221      	movs	r2, #33	; 0x21
 80016b0:	2101      	movs	r1, #1
 80016b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2220      	movs	r2, #32
 80016b8:	2100      	movs	r1, #0
 80016ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d004      	beq.n	80016ce <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	0010      	movs	r0, r2
 80016cc:	4798      	blx	r3
    }
  }
  return status;
 80016ce:	230f      	movs	r3, #15
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b004      	add	sp, #16
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e14f      	b.n	800198c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4091      	lsls	r1, r2
 80016f6:	000a      	movs	r2, r1
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d100      	bne.n	8001704 <HAL_GPIO_Init+0x28>
 8001702:	e140      	b.n	8001986 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	4013      	ands	r3, r2
 800170c:	2b01      	cmp	r3, #1
 800170e:	d005      	beq.n	800171c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2203      	movs	r2, #3
 8001716:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001718:	2b02      	cmp	r3, #2
 800171a:	d130      	bne.n	800177e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	43da      	mvns	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	409a      	lsls	r2, r3
 800173e:	0013      	movs	r3, r2
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001752:	2201      	movs	r2, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
 8001758:	0013      	movs	r3, r2
 800175a:	43da      	mvns	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	2201      	movs	r2, #1
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	4013      	ands	r3, r2
 8001786:	2b03      	cmp	r3, #3
 8001788:	d017      	beq.n	80017ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2203      	movs	r2, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d123      	bne.n	800180e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	58d3      	ldr	r3, [r2, r3]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2207      	movs	r2, #7
 80017d8:	4013      	ands	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2107      	movs	r1, #7
 80017f2:	400b      	ands	r3, r1
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	6939      	ldr	r1, [r7, #16]
 800180c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	43da      	mvns	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	401a      	ands	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	23c0      	movs	r3, #192	; 0xc0
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d100      	bne.n	8001850 <HAL_GPIO_Init+0x174>
 800184e:	e09a      	b.n	8001986 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 8001856:	2101      	movs	r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	619a      	str	r2, [r3, #24]
 800185c:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <HAL_GPIO_Init+0x2c8>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001868:	4a4f      	ldr	r2, [pc, #316]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	589b      	ldr	r3, [r3, r2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2203      	movs	r2, #3
 800187a:	4013      	ands	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	409a      	lsls	r2, r3
 8001882:	0013      	movs	r3, r2
 8001884:	43da      	mvns	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	2390      	movs	r3, #144	; 0x90
 8001890:	05db      	lsls	r3, r3, #23
 8001892:	429a      	cmp	r2, r3
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1e2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a44      	ldr	r2, [pc, #272]	; (80019ac <HAL_GPIO_Init+0x2d0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1de>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a43      	ldr	r2, [pc, #268]	; (80019b0 <HAL_GPIO_Init+0x2d4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1da>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <HAL_GPIO_Init+0x2d8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1d6>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e004      	b.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018be:	2300      	movs	r3, #0
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	2103      	movs	r1, #3
 80018c4:	400a      	ands	r2, r1
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	4093      	lsls	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d0:	4935      	ldr	r1, [pc, #212]	; (80019a8 <HAL_GPIO_Init+0x2cc>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43da      	mvns	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	035b      	lsls	r3, r3, #13
 80018f6:	4013      	ands	r3, r2
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001902:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43da      	mvns	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	039b      	lsls	r3, r3, #14
 8001920:	4013      	ands	r3, r2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	029b      	lsls	r3, r3, #10
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_GPIO_Init+0x2dc>)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	40da      	lsrs	r2, r3
 8001994:	1e13      	subs	r3, r2, #0
 8001996:	d000      	beq.n	800199a <HAL_GPIO_Init+0x2be>
 8001998:	e6a8      	b.n	80016ec <HAL_GPIO_Init+0x10>
  } 
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b006      	add	sp, #24
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000c00 	.word	0x48000c00
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	0008      	movs	r0, r1
 80019c6:	0011      	movs	r1, r2
 80019c8:	1cbb      	adds	r3, r7, #2
 80019ca:	1c02      	adds	r2, r0, #0
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	1c7b      	adds	r3, r7, #1
 80019d0:	1c0a      	adds	r2, r1, #0
 80019d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d4:	1c7b      	adds	r3, r7, #1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019dc:	1cbb      	adds	r3, r7, #2
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e4:	e003      	b.n	80019ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019e6:	1cbb      	adds	r3, r7, #2
 80019e8:	881a      	ldrh	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	000a      	movs	r2, r1
 8001a00:	1cbb      	adds	r3, r7, #2
 8001a02:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0a:	1cbb      	adds	r3, r7, #2
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	041a      	lsls	r2, r3, #16
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	1cb9      	adds	r1, r7, #2
 8001a1a:	8809      	ldrh	r1, [r1, #0]
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b004      	add	sp, #16
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e305      	b.n	800204a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	d100      	bne.n	8001a4a <HAL_RCC_OscConfig+0x1e>
 8001a48:	e08d      	b.n	8001b66 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a4a:	4bc5      	ldr	r3, [pc, #788]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	220c      	movs	r2, #12
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d00e      	beq.n	8001a74 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a56:	4bc2      	ldr	r3, [pc, #776]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x64>
 8001a62:	4bbf      	ldr	r3, [pc, #764]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	025b      	lsls	r3, r3, #9
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	025b      	lsls	r3, r3, #9
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d10d      	bne.n	8001a90 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	4bba      	ldr	r3, [pc, #744]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	029b      	lsls	r3, r3, #10
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x56>
 8001a80:	e070      	b.n	8001b64 <HAL_RCC_OscConfig+0x138>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d000      	beq.n	8001a8c <HAL_RCC_OscConfig+0x60>
 8001a8a:	e06b      	b.n	8001b64 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e2dc      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x7c>
 8001a98:	4bb1      	ldr	r3, [pc, #708]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4bb0      	ldr	r3, [pc, #704]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	0249      	lsls	r1, r1, #9
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e02f      	b.n	8001b08 <HAL_RCC_OscConfig+0xdc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x9e>
 8001ab0:	4bab      	ldr	r3, [pc, #684]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4baa      	ldr	r3, [pc, #680]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ab6:	49ab      	ldr	r1, [pc, #684]	; (8001d64 <HAL_RCC_OscConfig+0x338>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4ba8      	ldr	r3, [pc, #672]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4ba7      	ldr	r3, [pc, #668]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ac2:	49a9      	ldr	r1, [pc, #676]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e01e      	b.n	8001b08 <HAL_RCC_OscConfig+0xdc>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d10e      	bne.n	8001af0 <HAL_RCC_OscConfig+0xc4>
 8001ad2:	4ba3      	ldr	r3, [pc, #652]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4ba2      	ldr	r3, [pc, #648]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	02c9      	lsls	r1, r1, #11
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b9e      	ldr	r3, [pc, #632]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	0249      	lsls	r1, r1, #9
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	e00b      	b.n	8001b08 <HAL_RCC_OscConfig+0xdc>
 8001af0:	4b9b      	ldr	r3, [pc, #620]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b9a      	ldr	r3, [pc, #616]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001af6:	499b      	ldr	r1, [pc, #620]	; (8001d64 <HAL_RCC_OscConfig+0x338>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4b98      	ldr	r3, [pc, #608]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001b02:	4999      	ldr	r1, [pc, #612]	; (8001d68 <HAL_RCC_OscConfig+0x33c>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d014      	beq.n	8001b3a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fcb0 	bl	8001474 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fcab 	bl	8001474 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b64      	cmp	r3, #100	; 0x64
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e28e      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2c:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	029b      	lsls	r3, r3, #10
 8001b34:	4013      	ands	r3, r2
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0xee>
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fc9b 	bl	8001474 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fc96 	bl	8001474 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e279      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x118>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_OscConfig+0x146>
 8001b70:	e06c      	b.n	8001c4c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b72:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	220c      	movs	r2, #12
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d00e      	beq.n	8001b9a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b7c:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	220c      	movs	r2, #12
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d11f      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x19c>
 8001b88:	4b75      	ldr	r3, [pc, #468]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	025b      	lsls	r3, r3, #9
 8001b90:	401a      	ands	r2, r3
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d116      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9a:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x184>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e24c      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	22f8      	movs	r2, #248	; 0xf8
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00da      	lsls	r2, r3, #3
 8001bc0:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	e041      	b.n	8001c4c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d024      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd0:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fc4a 	bl	8001474 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fc45 	bl	8001474 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e228      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d0f1      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	22f8      	movs	r2, #248	; 0xf8
 8001c08:	4393      	bics	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00da      	lsls	r2, r3, #3
 8001c12:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e018      	b.n	8001c4c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b51      	ldr	r3, [pc, #324]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	438a      	bics	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff fc25 	bl	8001474 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fc20 	bl	8001474 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e203      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d1f1      	bne.n	8001c30 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2208      	movs	r2, #8
 8001c52:	4013      	ands	r3, r2
 8001c54:	d036      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d019      	beq.n	8001c92 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fc03 	bl	8001474 <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c74:	f7ff fbfe 	bl	8001474 <HAL_GetTick>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1e1      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d0f1      	beq.n	8001c74 <HAL_RCC_OscConfig+0x248>
 8001c90:	e018      	b.n	8001cc4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c96:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001c98:	2101      	movs	r1, #1
 8001c9a:	438a      	bics	r2, r1
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fbe9 	bl	8001474 <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fbe4 	bl	8001474 <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1c7      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d1f1      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d100      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2a4>
 8001cce:	e0b5      	b.n	8001e3c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd0:	201f      	movs	r0, #31
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001cda:	69da      	ldr	r2, [r3, #28]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	055b      	lsls	r3, r3, #21
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d110      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001ce6:	69da      	ldr	r2, [r3, #28]
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	0549      	lsls	r1, r1, #21
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	61da      	str	r2, [r3, #28]
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	055b      	lsls	r3, r3, #21
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_OscConfig+0x340>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d11a      	bne.n	8001d48 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_RCC_OscConfig+0x340>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_RCC_OscConfig+0x340>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0049      	lsls	r1, r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fba8 	bl	8001474 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2a:	f7ff fba3 	bl	8001474 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e186      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_OscConfig+0x340>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10f      	bne.n	8001d70 <HAL_RCC_OscConfig+0x344>
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001d52:	6a1a      	ldr	r2, [r3, #32]
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <HAL_RCC_OscConfig+0x334>)
 8001d56:	2101      	movs	r1, #1
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	621a      	str	r2, [r3, #32]
 8001d5c:	e036      	b.n	8001dcc <HAL_RCC_OscConfig+0x3a0>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	40021000 	.word	0x40021000
 8001d64:	fffeffff 	.word	0xfffeffff
 8001d68:	fffbffff 	.word	0xfffbffff
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x366>
 8001d78:	4bb6      	ldr	r3, [pc, #728]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001d7a:	6a1a      	ldr	r2, [r3, #32]
 8001d7c:	4bb5      	ldr	r3, [pc, #724]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	438a      	bics	r2, r1
 8001d82:	621a      	str	r2, [r3, #32]
 8001d84:	4bb3      	ldr	r3, [pc, #716]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	4bb2      	ldr	r3, [pc, #712]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	621a      	str	r2, [r3, #32]
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x3a0>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x388>
 8001d9a:	4bae      	ldr	r3, [pc, #696]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	4bad      	ldr	r3, [pc, #692]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001da0:	2104      	movs	r1, #4
 8001da2:	430a      	orrs	r2, r1
 8001da4:	621a      	str	r2, [r3, #32]
 8001da6:	4bab      	ldr	r3, [pc, #684]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	4baa      	ldr	r3, [pc, #680]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	621a      	str	r2, [r3, #32]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x3a0>
 8001db4:	4ba7      	ldr	r3, [pc, #668]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4ba6      	ldr	r3, [pc, #664]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	621a      	str	r2, [r3, #32]
 8001dc0:	4ba4      	ldr	r3, [pc, #656]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001dc2:	6a1a      	ldr	r2, [r3, #32]
 8001dc4:	4ba3      	ldr	r3, [pc, #652]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	438a      	bics	r2, r1
 8001dca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d014      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fb4e 	bl	8001474 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	e009      	b.n	8001df2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7ff fb49 	bl	8001474 <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	4a9b      	ldr	r2, [pc, #620]	; (8002058 <HAL_RCC_OscConfig+0x62c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e12b      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	4b98      	ldr	r3, [pc, #608]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	2202      	movs	r2, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x3b2>
 8001dfc:	e013      	b.n	8001e26 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fb39 	bl	8001474 <HAL_GetTick>
 8001e02:	0003      	movs	r3, r0
 8001e04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	e009      	b.n	8001e1c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff fb34 	bl	8001474 <HAL_GetTick>
 8001e0c:	0002      	movs	r2, r0
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	4a91      	ldr	r2, [pc, #580]	; (8002058 <HAL_RCC_OscConfig+0x62c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e116      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	4b8d      	ldr	r3, [pc, #564]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e26:	231f      	movs	r3, #31
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	4b87      	ldr	r3, [pc, #540]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e36:	4989      	ldr	r1, [pc, #548]	; (800205c <HAL_RCC_OscConfig+0x630>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	4013      	ands	r3, r2
 8001e44:	d063      	beq.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d12a      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e4e:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e52:	4b80      	ldr	r3, [pc, #512]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e54:	2104      	movs	r1, #4
 8001e56:	430a      	orrs	r2, r1
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e5a:	4b7e      	ldr	r3, [pc, #504]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e66:	f7ff fb05 	bl	8001474 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e70:	f7ff fb00 	bl	8001474 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0e3      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e82:	4b74      	ldr	r3, [pc, #464]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d0f1      	beq.n	8001e70 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e8c:	4b71      	ldr	r3, [pc, #452]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	22f8      	movs	r2, #248	; 0xf8
 8001e92:	4393      	bics	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea2:	e034      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	d111      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001eb8:	4b66      	ldr	r3, [pc, #408]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebc:	22f8      	movs	r2, #248	; 0xf8
 8001ebe:	4393      	bics	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	00da      	lsls	r2, r3, #3
 8001ec8:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ece:	e01e      	b.n	8001f0e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ed0:	4b60      	ldr	r3, [pc, #384]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed4:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001edc:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fac4 	bl	8001474 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ef2:	f7ff fabf 	bl	8001474 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0a2      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f04:	4b53      	ldr	r3, [pc, #332]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d1f1      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d100      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4ec>
 8001f16:	e097      	b.n	8002048 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	220c      	movs	r2, #12
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d100      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4fa>
 8001f24:	e06b      	b.n	8001ffe <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d14c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b49      	ldr	r3, [pc, #292]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f34:	494a      	ldr	r1, [pc, #296]	; (8002060 <HAL_RCC_OscConfig+0x634>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fa9b 	bl	8001474 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fa96 	bl	8001474 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e079      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f56:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f62:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	220f      	movs	r2, #15
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f72:	430a      	orrs	r2, r1
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f76:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <HAL_RCC_OscConfig+0x638>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0449      	lsls	r1, r1, #17
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa69 	bl	8001474 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fa64 	bl	8001474 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e047      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	049b      	lsls	r3, r3, #18
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x57c>
 8001fc6:	e03f      	b.n	8002048 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001fce:	4924      	ldr	r1, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x634>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fa4e 	bl	8001474 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fa49 	bl	8001474 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e02c      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	049b      	lsls	r3, r3, #18
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x5b2>
 8001ffc:	e024      	b.n	8002048 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e01f      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_OscConfig+0x628>)
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	23c0      	movs	r3, #192	; 0xc0
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	429a      	cmp	r2, r3
 8002024:	d10e      	bne.n	8002044 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	220f      	movs	r2, #15
 800202a:	401a      	ands	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	23f0      	movs	r3, #240	; 0xf0
 8002038:	039b      	lsls	r3, r3, #14
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b008      	add	sp, #32
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40021000 	.word	0x40021000
 8002058:	00001388 	.word	0x00001388
 800205c:	efffffff 	.word	0xefffffff
 8002060:	feffffff 	.word	0xfeffffff
 8002064:	ffc27fff 	.word	0xffc27fff

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b3      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b5b      	ldr	r3, [pc, #364]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	4013      	ands	r3, r2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d911      	bls.n	80020ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b58      	ldr	r3, [pc, #352]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4393      	bics	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4b55      	ldr	r3, [pc, #340]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e09a      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2202      	movs	r2, #2
 80020b4:	4013      	ands	r3, r2
 80020b6:	d015      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	d006      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020c8:	21e0      	movs	r1, #224	; 0xe0
 80020ca:	00c9      	lsls	r1, r1, #3
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	22f0      	movs	r2, #240	; 0xf0
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	4b44      	ldr	r3, [pc, #272]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	d040      	beq.n	8002170 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	029b      	lsls	r3, r3, #10
 80020fe:	4013      	ands	r3, r2
 8002100:	d114      	bne.n	800212c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06e      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	; 0x80
 8002114:	049b      	lsls	r3, r3, #18
 8002116:	4013      	ands	r3, r2
 8002118:	d108      	bne.n	800212c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e062      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e05b      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212c:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	4393      	bics	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002140:	f7ff f998 	bl	8001474 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002148:	e009      	b.n	800215e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7ff f993 	bl	8001474 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <HAL_RCC_ClockConfig+0x18c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e042      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	220c      	movs	r2, #12
 8002164:	401a      	ands	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1ec      	bne.n	800214a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	4013      	ands	r3, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d211      	bcs.n	80021a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	4393      	bics	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_RCC_ClockConfig+0x184>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e020      	b.n	80021e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2204      	movs	r2, #4
 80021a8:	4013      	ands	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <HAL_RCC_ClockConfig+0x190>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021c0:	f000 f820 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021c4:	0001      	movs	r1, r0
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x188>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	220f      	movs	r2, #15
 80021ce:	4013      	ands	r3, r2
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x194>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	000a      	movs	r2, r1
 80021d6:	40da      	lsrs	r2, r3
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x198>)
 80021da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021dc:	2003      	movs	r0, #3
 80021de:	f7fe fc8f 	bl	8000b00 <HAL_InitTick>
  
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b004      	add	sp, #16
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	00001388 	.word	0x00001388
 80021f8:	fffff8ff 	.word	0xfffff8ff
 80021fc:	0800799c 	.word	0x0800799c
 8002200:	2000000c 	.word	0x2000000c

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800221e:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	220c      	movs	r2, #12
 8002228:	4013      	ands	r3, r2
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x30>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x36>
 8002232:	e02e      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002236:	613b      	str	r3, [r7, #16]
      break;
 8002238:	e02e      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	220f      	movs	r2, #15
 8002240:	4013      	ands	r3, r2
 8002242:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	220f      	movs	r2, #15
 800224e:	4013      	ands	r3, r2
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	23c0      	movs	r3, #192	; 0xc0
 800225a:	025b      	lsls	r3, r3, #9
 800225c:	401a      	ands	r2, r3
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	025b      	lsls	r3, r3, #9
 8002262:	429a      	cmp	r2, r3
 8002264:	d109      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800226a:	f7fd ff69 	bl	8000140 <__udivsi3>
 800226e:	0003      	movs	r3, r0
 8002270:	001a      	movs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4353      	muls	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e008      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	480a      	ldr	r0, [pc, #40]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800227e:	f7fd ff5f 	bl	8000140 <__udivsi3>
 8002282:	0003      	movs	r3, r0
 8002284:	001a      	movs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4353      	muls	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
      break;
 8002290:	e002      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002294:	613b      	str	r3, [r7, #16]
      break;
 8002296:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002298:	693b      	ldr	r3, [r7, #16]
}
 800229a:	0018      	movs	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	b006      	add	sp, #24
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40021000 	.word	0x40021000
 80022a8:	007a1200 	.word	0x007a1200
 80022ac:	080079b4 	.word	0x080079b4
 80022b0:	080079c4 	.word	0x080079c4

080022b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022cc:	f7ff fff2 	bl	80022b4 <HAL_RCC_GetHCLKFreq>
 80022d0:	0001      	movs	r1, r0
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	2207      	movs	r2, #7
 80022da:	4013      	ands	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	40d9      	lsrs	r1, r3
 80022e2:	000b      	movs	r3, r1
}    
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080079ac 	.word	0x080079ac

080022f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_RCC_GetClockConfig+0x4c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2203      	movs	r2, #3
 800230a:	401a      	ands	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetClockConfig+0x4c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	22f0      	movs	r2, #240	; 0xf0
 8002316:	401a      	ands	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_RCC_GetClockConfig+0x4c>)
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	23e0      	movs	r3, #224	; 0xe0
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	401a      	ands	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetClockConfig+0x50>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	401a      	ands	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	4013      	ands	r3, r2
 8002362:	d100      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002364:	e08e      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2017      	movs	r0, #23
 8002368:	183b      	adds	r3, r7, r0
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	055b      	lsls	r3, r3, #21
 8002376:	4013      	ands	r3, r2
 8002378:	d110      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b5c      	ldr	r3, [pc, #368]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0549      	lsls	r1, r1, #21
 8002384:	430a      	orrs	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
 8002388:	4b58      	ldr	r3, [pc, #352]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	183b      	adds	r3, r7, r0
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	d11a      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	0049      	lsls	r1, r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff f85d 	bl	8001474 <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	e008      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c0:	f7ff f858 	bl	8001474 <HAL_GetTick>
 80023c4:	0002      	movs	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e087      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d034      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	23c0      	movs	r3, #192	; 0xc0
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d02c      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002400:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a3b      	ldr	r2, [pc, #236]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002406:	4013      	ands	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	4b37      	ldr	r3, [pc, #220]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0249      	lsls	r1, r1, #9
 8002414:	430a      	orrs	r2, r1
 8002416:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002418:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800241e:	4936      	ldr	r1, [pc, #216]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002420:	400a      	ands	r2, r1
 8002422:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	4013      	ands	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff f81f 	bl	8001474 <HAL_GetTick>
 8002436:	0003      	movs	r3, r0
 8002438:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e009      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7ff f81a 	bl	8001474 <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	4a2d      	ldr	r2, [pc, #180]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e048      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d0f0      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800246a:	430a      	orrs	r2, r1
 800246c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246e:	2317      	movs	r3, #23
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d105      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800247e:	4920      	ldr	r1, [pc, #128]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002480:	400a      	ands	r2, r1
 8002482:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	2203      	movs	r2, #3
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2220      	movs	r2, #32
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2210      	movs	r2, #16
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	4393      	bics	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b006      	add	sp, #24
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
 80024f4:	fffffcff 	.word	0xfffffcff
 80024f8:	fffeffff 	.word	0xfffeffff
 80024fc:	00001388 	.word	0x00001388
 8002500:	efffffff 	.word	0xefffffff

08002504 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800250c:	230f      	movs	r3, #15
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e081      	b.n	8002622 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7f5b      	ldrb	r3, [r3, #29]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7fe fa79 	bl	8000a28 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2210      	movs	r2, #16
 8002544:	4013      	ands	r3, r2
 8002546:	2b10      	cmp	r3, #16
 8002548:	d05c      	beq.n	8002604 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	22ca      	movs	r2, #202	; 0xca
 8002550:	625a      	str	r2, [r3, #36]	; 0x24
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2253      	movs	r2, #83	; 0x53
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800255a:	250f      	movs	r5, #15
 800255c:	197c      	adds	r4, r7, r5
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 fa73 	bl	8002a4c <RTC_EnterInitMode>
 8002566:	0003      	movs	r3, r0
 8002568:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800256a:	0028      	movs	r0, r5
 800256c:	183b      	adds	r3, r7, r0
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12c      	bne.n	80025ce <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	492b      	ldr	r1, [pc, #172]	; (800262c <HAL_RTC_Init+0x128>)
 8002580:	400a      	ands	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6919      	ldr	r1, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	041a      	lsls	r2, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80025c0:	183c      	adds	r4, r7, r0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 fa84 	bl	8002ad2 <RTC_ExitInitMode>
 80025ca:	0003      	movs	r3, r0
 80025cc:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80025ce:	230f      	movs	r3, #15
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d110      	bne.n	80025fa <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4913      	ldr	r1, [pc, #76]	; (8002630 <HAL_RTC_Init+0x12c>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	22ff      	movs	r2, #255	; 0xff
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
 8002602:	e003      	b.n	800260c <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002604:	230f      	movs	r3, #15
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800260c:	230f      	movs	r3, #15
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800261c:	230f      	movs	r3, #15
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	781b      	ldrb	r3, [r3, #0]
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bdb0      	pop	{r4, r5, r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	ff8fffbf 	.word	0xff8fffbf
 8002630:	fffbffff 	.word	0xfffbffff

08002634 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	7f1b      	ldrb	r3, [r3, #28]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_RTC_SetTime+0x1c>
 800264c:	2302      	movs	r3, #2
 800264e:	e08e      	b.n	800276e <HAL_RTC_SetTime+0x13a>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2202      	movs	r2, #2
 800265a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d125      	bne.n	80026ae <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2240      	movs	r2, #64	; 0x40
 800266a:	4013      	ands	r3, r2
 800266c:	d102      	bne.n	8002674 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	0018      	movs	r0, r3
 800267a:	f000 fa53 	bl	8002b24 <RTC_ByteToBcd2>
 800267e:	0003      	movs	r3, r0
 8002680:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fa4c 	bl	8002b24 <RTC_ByteToBcd2>
 800268c:	0003      	movs	r3, r0
 800268e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002690:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	789b      	ldrb	r3, [r3, #2]
 8002696:	0018      	movs	r0, r3
 8002698:	f000 fa44 	bl	8002b24 <RTC_ByteToBcd2>
 800269c:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800269e:	0022      	movs	r2, r4
 80026a0:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	78db      	ldrb	r3, [r3, #3]
 80026a6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e017      	b.n	80026de <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2240      	movs	r2, #64	; 0x40
 80026b6:	4013      	ands	r3, r2
 80026b8:	d102      	bne.n	80026c0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80026cc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80026d2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	78db      	ldrb	r3, [r3, #3]
 80026d8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	22ca      	movs	r2, #202	; 0xca
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2253      	movs	r2, #83	; 0x53
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80026ee:	2513      	movs	r5, #19
 80026f0:	197c      	adds	r4, r7, r5
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f9a9 	bl	8002a4c <RTC_EnterInitMode>
 80026fa:	0003      	movs	r3, r0
 80026fc:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80026fe:	0028      	movs	r0, r5
 8002700:	183b      	adds	r3, r7, r0
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d120      	bne.n	800274a <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	491a      	ldr	r1, [pc, #104]	; (8002778 <HAL_RTC_SetTime+0x144>)
 8002710:	400a      	ands	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4917      	ldr	r1, [pc, #92]	; (800277c <HAL_RTC_SetTime+0x148>)
 8002720:	400a      	ands	r2, r1
 8002722:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800273c:	183c      	adds	r4, r7, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	0018      	movs	r0, r3
 8002742:	f000 f9c6 	bl	8002ad2 <RTC_ExitInitMode>
 8002746:	0003      	movs	r3, r0
 8002748:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800274a:	2313      	movs	r3, #19
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	22ff      	movs	r2, #255	; 0xff
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	771a      	strb	r2, [r3, #28]

  return status;
 8002768:	2313      	movs	r3, #19
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	781b      	ldrb	r3, [r3, #0]
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	b006      	add	sp, #24
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	007f7f7f 	.word	0x007f7f7f
 800277c:	fffbffff 	.word	0xfffbffff

08002780 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	045b      	lsls	r3, r3, #17
 80027a2:	0c5a      	lsrs	r2, r3, #17
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_RTC_GetTime+0xb8>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	223f      	movs	r2, #63	; 0x3f
 80027bc:	4013      	ands	r3, r2
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	227f      	movs	r2, #127	; 0x7f
 80027cc:	4013      	ands	r3, r2
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	227f      	movs	r2, #127	; 0x7f
 80027da:	4013      	ands	r3, r2
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	0d9b      	lsrs	r3, r3, #22
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2201      	movs	r2, #1
 80027ea:	4013      	ands	r3, r2
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d11a      	bne.n	800282e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 f9b2 	bl	8002b66 <RTC_Bcd2ToByte>
 8002802:	0003      	movs	r3, r0
 8002804:	001a      	movs	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f9a9 	bl	8002b66 <RTC_Bcd2ToByte>
 8002814:	0003      	movs	r3, r0
 8002816:	001a      	movs	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	789b      	ldrb	r3, [r3, #2]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f9a0 	bl	8002b66 <RTC_Bcd2ToByte>
 8002826:	0003      	movs	r3, r0
 8002828:	001a      	movs	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b006      	add	sp, #24
 8002836:	bd80      	pop	{r7, pc}
 8002838:	007f7f7f 	.word	0x007f7f7f

0800283c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800283c:	b5b0      	push	{r4, r5, r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	7f1b      	ldrb	r3, [r3, #28]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_RTC_SetDate+0x1c>
 8002854:	2302      	movs	r3, #2
 8002856:	e07a      	b.n	800294e <HAL_RTC_SetDate+0x112>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2202      	movs	r2, #2
 8002862:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10e      	bne.n	8002888 <HAL_RTC_SetDate+0x4c>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	001a      	movs	r2, r3
 8002870:	2310      	movs	r3, #16
 8002872:	4013      	ands	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	2210      	movs	r2, #16
 800287c:	4393      	bics	r3, r2
 800287e:	b2db      	uxtb	r3, r3
 8002880:	330a      	adds	r3, #10
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11c      	bne.n	80028c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	78db      	ldrb	r3, [r3, #3]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 f946 	bl	8002b24 <RTC_ByteToBcd2>
 8002898:	0003      	movs	r3, r0
 800289a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 f93f 	bl	8002b24 <RTC_ByteToBcd2>
 80028a6:	0003      	movs	r3, r0
 80028a8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80028aa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	789b      	ldrb	r3, [r3, #2]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 f937 	bl	8002b24 <RTC_ByteToBcd2>
 80028b6:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80028b8:	0022      	movs	r2, r4
 80028ba:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e00e      	b.n	80028e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	78db      	ldrb	r3, [r3, #3]
 80028cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80028d4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80028da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80028e2:	4313      	orrs	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	22ca      	movs	r2, #202	; 0xca
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2253      	movs	r2, #83	; 0x53
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80028f6:	2513      	movs	r5, #19
 80028f8:	197c      	adds	r4, r7, r5
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f000 f8a5 	bl	8002a4c <RTC_EnterInitMode>
 8002902:	0003      	movs	r3, r0
 8002904:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002906:	0028      	movs	r0, r5
 8002908:	183b      	adds	r3, r7, r0
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4910      	ldr	r1, [pc, #64]	; (8002958 <HAL_RTC_SetDate+0x11c>)
 8002918:	400a      	ands	r2, r1
 800291a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800291c:	183c      	adds	r4, r7, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f8d6 	bl	8002ad2 <RTC_ExitInitMode>
 8002926:	0003      	movs	r3, r0
 8002928:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800292a:	2313      	movs	r3, #19
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	22ff      	movs	r2, #255	; 0xff
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]

  return status;
 8002948:	2313      	movs	r3, #19
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b006      	add	sp, #24
 8002954:	bdb0      	pop	{r4, r5, r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	00ffff3f 	.word	0x00ffff3f

0800295c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <HAL_RTC_GetDate+0x9c>)
 8002974:	4013      	ands	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	b2db      	uxtb	r3, r3
 8002988:	221f      	movs	r2, #31
 800298a:	4013      	ands	r3, r2
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	223f      	movs	r2, #63	; 0x3f
 8002998:	4013      	ands	r3, r2
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d11a      	bne.n	80029ec <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f8d3 	bl	8002b66 <RTC_Bcd2ToByte>
 80029c0:	0003      	movs	r3, r0
 80029c2:	001a      	movs	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	785b      	ldrb	r3, [r3, #1]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f8ca 	bl	8002b66 <RTC_Bcd2ToByte>
 80029d2:	0003      	movs	r3, r0
 80029d4:	001a      	movs	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	789b      	ldrb	r3, [r3, #2]
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f8c1 	bl	8002b66 <RTC_Bcd2ToByte>
 80029e4:	0003      	movs	r3, r0
 80029e6:	001a      	movs	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b006      	add	sp, #24
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	00ffff3f 	.word	0x00ffff3f

080029fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <HAL_RTC_WaitForSynchro+0x4c>)
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a10:	f7fe fd30 	bl	8001474 <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a18:	e00a      	b.n	8002a30 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a1a:	f7fe fd2b 	bl	8001474 <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	23fa      	movs	r3, #250	; 0xfa
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d901      	bls.n	8002a30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e006      	b.n	8002a3e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0ee      	beq.n	8002a1a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	00017d5d 	.word	0x00017d5d

08002a4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a58:	230f      	movs	r3, #15
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d12b      	bne.n	8002ac4 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fcfa 	bl	8001474 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a84:	e013      	b.n	8002aae <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a86:	f7fe fcf5 	bl	8001474 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	200f      	movs	r0, #15
 8002a92:	183b      	adds	r3, r7, r0
 8002a94:	1839      	adds	r1, r7, r0
 8002a96:	7809      	ldrb	r1, [r1, #0]
 8002a98:	7019      	strb	r1, [r3, #0]
 8002a9a:	23fa      	movs	r3, #250	; 0xfa
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d905      	bls.n	8002aae <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002aa8:	183b      	adds	r3, r7, r0
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d104      	bne.n	8002ac4 <RTC_EnterInitMode+0x78>
 8002aba:	230f      	movs	r3, #15
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d1e0      	bne.n	8002a86 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ad2:	b590      	push	{r4, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	240f      	movs	r4, #15
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	438a      	bics	r2, r1
 8002af0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2220      	movs	r2, #32
 8002afa:	4013      	ands	r3, r2
 8002afc:	d10b      	bne.n	8002b16 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff ff7b 	bl	80029fc <HAL_RTC_WaitForSynchro>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d005      	beq.n	8002b16 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b005      	add	sp, #20
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002b34:	e007      	b.n	8002b46 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	1dfa      	adds	r2, r7, #7
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	3a0a      	subs	r2, #10
 8002b44:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002b46:	1dfb      	adds	r3, r7, #7
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b09      	cmp	r3, #9
 8002b4c:	d8f3      	bhi.n	8002b36 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	1dfb      	adds	r3, r7, #7
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	b2db      	uxtb	r3, r3
}
 8002b5e:	0018      	movs	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b004      	add	sp, #16
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002b76:	1dfb      	adds	r3, r7, #7
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	001a      	movs	r2, r3
 8002b80:	0013      	movs	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	189b      	adds	r3, r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	210f      	movs	r1, #15
 8002b94:	400b      	ands	r3, r1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	18d3      	adds	r3, r2, r3
 8002b9a:	b2db      	uxtb	r3, r3
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b004      	add	sp, #16
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e042      	b.n	8002c3c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	223d      	movs	r2, #61	; 0x3d
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d107      	bne.n	8002bd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223c      	movs	r2, #60	; 0x3c
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 f839 	bl	8002c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223d      	movs	r2, #61	; 0x3d
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	0019      	movs	r1, r3
 8002be4:	0010      	movs	r0, r2
 8002be6:	f000 f9b7 	bl	8002f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2246      	movs	r2, #70	; 0x46
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223e      	movs	r2, #62	; 0x3e
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223f      	movs	r2, #63	; 0x3f
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2240      	movs	r2, #64	; 0x40
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2241      	movs	r2, #65	; 0x41
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2242      	movs	r2, #66	; 0x42
 8002c16:	2101      	movs	r1, #1
 8002c18:	5499      	strb	r1, [r3, r2]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2243      	movs	r2, #67	; 0x43
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2244      	movs	r2, #68	; 0x44
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2245      	movs	r2, #69	; 0x45
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223d      	movs	r2, #61	; 0x3d
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	223d      	movs	r2, #61	; 0x3d
 8002c60:	5c9b      	ldrb	r3, [r3, r2]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d001      	beq.n	8002c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e035      	b.n	8002cd8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	223d      	movs	r2, #61	; 0x3d
 8002c70:	2102      	movs	r1, #2
 8002c72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	430a      	orrs	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <HAL_TIM_Base_Start_IT+0x8c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_TIM_Base_Start_IT+0x90>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d004      	beq.n	8002ca2 <HAL_TIM_Base_Start_IT+0x4e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_TIM_Base_Start_IT+0x94>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d111      	bne.n	8002cc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2207      	movs	r2, #7
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d010      	beq.n	8002cd6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc4:	e007      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b004      	add	sp, #16
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40014000 	.word	0x40014000

08002cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d124      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d11d      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2203      	movs	r2, #3
 8002d16:	4252      	negs	r2, r2
 8002d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2203      	movs	r2, #3
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f8fa 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f8ed 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f8f9 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2204      	movs	r2, #4
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d125      	bne.n	8002da6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2204      	movs	r2, #4
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d11e      	bne.n	8002da6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	4252      	negs	r2, r2
 8002d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f8cd 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002d8e:	e007      	b.n	8002da0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f8c0 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f8cc 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2208      	movs	r2, #8
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d124      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11d      	bne.n	8002dfe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2209      	movs	r2, #9
 8002dc8:	4252      	negs	r2, r2
 8002dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f000 f8a1 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002de6:	e007      	b.n	8002df8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f894 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 f8a0 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2210      	movs	r2, #16
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d125      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2210      	movs	r2, #16
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d11e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2211      	movs	r2, #17
 8002e20:	4252      	negs	r2, r2
 8002e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2208      	movs	r2, #8
 8002e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	23c0      	movs	r3, #192	; 0xc0
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f874 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e007      	b.n	8002e52 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f867 	bl	8002f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f873 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10f      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d108      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4252      	negs	r2, r2
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fd fcc1 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d10f      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b80      	cmp	r3, #128	; 0x80
 8002ea0:	d108      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2281      	movs	r2, #129	; 0x81
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f8d0 	bl	8003054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2240      	movs	r2, #64	; 0x40
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b40      	cmp	r3, #64	; 0x40
 8002ece:	d108      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2241      	movs	r2, #65	; 0x41
 8002ed6:	4252      	negs	r2, r2
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f833 	bl	8002f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d10f      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d108      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	4252      	negs	r2, r2
 8002f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f89a 	bl	8003044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <TIM_Base_SetConfig+0xd0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d003      	beq.n	8002f78 <TIM_Base_SetConfig+0x20>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a2e      	ldr	r2, [pc, #184]	; (800302c <TIM_Base_SetConfig+0xd4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2270      	movs	r2, #112	; 0x70
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a26      	ldr	r2, [pc, #152]	; (8003028 <TIM_Base_SetConfig+0xd0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <TIM_Base_SetConfig+0xd4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a24      	ldr	r2, [pc, #144]	; (8003030 <TIM_Base_SetConfig+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <TIM_Base_SetConfig+0xdc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <TIM_Base_SetConfig+0xe0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x62>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <TIM_Base_SetConfig+0xe4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <TIM_Base_SetConfig+0xe8>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	4393      	bics	r3, r2
 8002fd2:	001a      	movs	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <TIM_Base_SetConfig+0xd0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0xba>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <TIM_Base_SetConfig+0xdc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0xba>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <TIM_Base_SetConfig+0xe0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0xba>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <TIM_Base_SetConfig+0xe4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d103      	bne.n	800301a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	615a      	str	r2, [r3, #20]
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b004      	add	sp, #16
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40000400 	.word	0x40000400
 8003030:	40002000 	.word	0x40002000
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800
 8003040:	fffffcff 	.word	0xfffffcff

08003044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e044      	b.n	8003100 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2278      	movs	r2, #120	; 0x78
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f7fd fce5 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2224      	movs	r2, #36	; 0x24
 8003092:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	438a      	bics	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 fc0c 	bl	80038c4 <UART_SetConfig>
 80030ac:	0003      	movs	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e024      	b.n	8003100 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 fd57 	bl	8003b74 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	490d      	ldr	r1, [pc, #52]	; (8003108 <HAL_UART_Init+0xa4>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2108      	movs	r1, #8
 80030e2:	438a      	bics	r2, r1
 80030e4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fdef 	bl	8003cdc <UART_CheckIdleState>
 80030fe:	0003      	movs	r3, r0
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b002      	add	sp, #8
 8003106:	bd80      	pop	{r7, pc}
 8003108:	fffff7ff 	.word	0xfffff7ff

0800310c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	1dbb      	adds	r3, r7, #6
 800311a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003120:	2b20      	cmp	r3, #32
 8003122:	d000      	beq.n	8003126 <HAL_UART_Transmit+0x1a>
 8003124:	e08d      	b.n	8003242 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_UART_Transmit+0x28>
 800312c:	1dbb      	adds	r3, r7, #6
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e085      	b.n	8003244 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	429a      	cmp	r2, r3
 8003142:	d109      	bne.n	8003158 <HAL_UART_Transmit+0x4c>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d001      	beq.n	8003158 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e075      	b.n	8003244 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2284      	movs	r2, #132	; 0x84
 800315c:	2100      	movs	r1, #0
 800315e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2221      	movs	r2, #33	; 0x21
 8003164:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003166:	f7fe f985 	bl	8001474 <HAL_GetTick>
 800316a:	0003      	movs	r3, r0
 800316c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1dba      	adds	r2, r7, #6
 8003172:	2150      	movs	r1, #80	; 0x50
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1dba      	adds	r2, r7, #6
 800317c:	2152      	movs	r1, #82	; 0x52
 800317e:	8812      	ldrh	r2, [r2, #0]
 8003180:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	015b      	lsls	r3, r3, #5
 800318a:	429a      	cmp	r2, r3
 800318c:	d108      	bne.n	80031a0 <HAL_UART_Transmit+0x94>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e003      	b.n	80031a8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031a8:	e030      	b.n	800320c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	0013      	movs	r3, r2
 80031b4:	2200      	movs	r2, #0
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	f000 fe38 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d004      	beq.n	80031ca <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e03c      	b.n	8003244 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	881a      	ldrh	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	05d2      	lsls	r2, r2, #23
 80031da:	0dd2      	lsrs	r2, r2, #23
 80031dc:	b292      	uxth	r2, r2
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	3302      	adds	r3, #2
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	e008      	b.n	80031fa <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	781a      	ldrb	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b292      	uxth	r2, r2
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	3301      	adds	r3, #1
 80031f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2252      	movs	r2, #82	; 0x52
 80031fe:	5a9b      	ldrh	r3, [r3, r2]
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b299      	uxth	r1, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2252      	movs	r2, #82	; 0x52
 800320a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2252      	movs	r2, #82	; 0x52
 8003210:	5a9b      	ldrh	r3, [r3, r2]
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1c8      	bne.n	80031aa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	0013      	movs	r3, r2
 8003222:	2200      	movs	r2, #0
 8003224:	2140      	movs	r1, #64	; 0x40
 8003226:	f000 fe01 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 800322a:	1e03      	subs	r3, r0, #0
 800322c:	d004      	beq.n	8003238 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e005      	b.n	8003244 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b008      	add	sp, #32
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	1dbb      	adds	r3, r7, #6
 8003258:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	2b20      	cmp	r3, #32
 8003262:	d145      	bne.n	80032f0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_UART_Receive_IT+0x26>
 800326a:	1dbb      	adds	r3, r7, #6
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e03d      	b.n	80032f2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	015b      	lsls	r3, r3, #5
 800327e:	429a      	cmp	r2, r3
 8003280:	d109      	bne.n	8003296 <HAL_UART_Receive_IT+0x4a>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2201      	movs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d001      	beq.n	8003296 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e02d      	b.n	80032f2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	4013      	ands	r3, r2
 80032a8:	d019      	beq.n	80032de <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	613b      	str	r3, [r7, #16]
  return(result);
 80032b0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f383 8810 	msr	PRIMASK, r3
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	04c9      	lsls	r1, r1, #19
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032de:	1dbb      	adds	r3, r7, #6
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 fe0a 	bl	8003f00 <UART_Start_Receive_IT>
 80032ec:	0003      	movs	r3, r0
 80032ee:	e000      	b.n	80032f2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b008      	add	sp, #32
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b0ab      	sub	sp, #172	; 0xac
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	22a4      	movs	r2, #164	; 0xa4
 800330c:	18b9      	adds	r1, r7, r2
 800330e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	20a0      	movs	r0, #160	; 0xa0
 8003318:	1839      	adds	r1, r7, r0
 800331a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	219c      	movs	r1, #156	; 0x9c
 8003324:	1879      	adds	r1, r7, r1
 8003326:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003328:	0011      	movs	r1, r2
 800332a:	18bb      	adds	r3, r7, r2
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a99      	ldr	r2, [pc, #612]	; (8003594 <HAL_UART_IRQHandler+0x298>)
 8003330:	4013      	ands	r3, r2
 8003332:	2298      	movs	r2, #152	; 0x98
 8003334:	18bc      	adds	r4, r7, r2
 8003336:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003338:	18bb      	adds	r3, r7, r2
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d114      	bne.n	800336a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003340:	187b      	adds	r3, r7, r1
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2220      	movs	r2, #32
 8003346:	4013      	ands	r3, r2
 8003348:	d00f      	beq.n	800336a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800334a:	183b      	adds	r3, r7, r0
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2220      	movs	r2, #32
 8003350:	4013      	ands	r3, r2
 8003352:	d00a      	beq.n	800336a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003358:	2b00      	cmp	r3, #0
 800335a:	d100      	bne.n	800335e <HAL_UART_IRQHandler+0x62>
 800335c:	e286      	b.n	800386c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	0010      	movs	r0, r2
 8003366:	4798      	blx	r3
      }
      return;
 8003368:	e280      	b.n	800386c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800336a:	2398      	movs	r3, #152	; 0x98
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d100      	bne.n	8003376 <HAL_UART_IRQHandler+0x7a>
 8003374:	e114      	b.n	80035a0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003376:	239c      	movs	r3, #156	; 0x9c
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	4013      	ands	r3, r2
 8003380:	d106      	bne.n	8003390 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003382:	23a0      	movs	r3, #160	; 0xa0
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a83      	ldr	r2, [pc, #524]	; (8003598 <HAL_UART_IRQHandler+0x29c>)
 800338a:	4013      	ands	r3, r2
 800338c:	d100      	bne.n	8003390 <HAL_UART_IRQHandler+0x94>
 800338e:	e107      	b.n	80035a0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003390:	23a4      	movs	r3, #164	; 0xa4
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d012      	beq.n	80033c2 <HAL_UART_IRQHandler+0xc6>
 800339c:	23a0      	movs	r3, #160	; 0xa0
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2284      	movs	r2, #132	; 0x84
 80033b6:	589b      	ldr	r3, [r3, r2]
 80033b8:	2201      	movs	r2, #1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2184      	movs	r1, #132	; 0x84
 80033c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033c2:	23a4      	movs	r3, #164	; 0xa4
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2202      	movs	r2, #2
 80033ca:	4013      	ands	r3, r2
 80033cc:	d011      	beq.n	80033f2 <HAL_UART_IRQHandler+0xf6>
 80033ce:	239c      	movs	r3, #156	; 0x9c
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2202      	movs	r2, #2
 80033e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2284      	movs	r2, #132	; 0x84
 80033e6:	589b      	ldr	r3, [r3, r2]
 80033e8:	2204      	movs	r2, #4
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2184      	movs	r1, #132	; 0x84
 80033f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033f2:	23a4      	movs	r3, #164	; 0xa4
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2204      	movs	r2, #4
 80033fa:	4013      	ands	r3, r2
 80033fc:	d011      	beq.n	8003422 <HAL_UART_IRQHandler+0x126>
 80033fe:	239c      	movs	r3, #156	; 0x9c
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	4013      	ands	r3, r2
 8003408:	d00b      	beq.n	8003422 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2204      	movs	r2, #4
 8003410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2284      	movs	r2, #132	; 0x84
 8003416:	589b      	ldr	r3, [r3, r2]
 8003418:	2202      	movs	r2, #2
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2184      	movs	r1, #132	; 0x84
 8003420:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003422:	23a4      	movs	r3, #164	; 0xa4
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2208      	movs	r2, #8
 800342a:	4013      	ands	r3, r2
 800342c:	d017      	beq.n	800345e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800342e:	23a0      	movs	r3, #160	; 0xa0
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2220      	movs	r2, #32
 8003436:	4013      	ands	r3, r2
 8003438:	d105      	bne.n	8003446 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800343a:	239c      	movs	r3, #156	; 0x9c
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2201      	movs	r2, #1
 8003442:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003444:	d00b      	beq.n	800345e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2208      	movs	r2, #8
 800344c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2284      	movs	r2, #132	; 0x84
 8003452:	589b      	ldr	r3, [r3, r2]
 8003454:	2208      	movs	r2, #8
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2184      	movs	r1, #132	; 0x84
 800345c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800345e:	23a4      	movs	r3, #164	; 0xa4
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	4013      	ands	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_UART_IRQHandler+0x198>
 800346c:	23a0      	movs	r3, #160	; 0xa0
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	04db      	lsls	r3, r3, #19
 8003476:	4013      	ands	r3, r2
 8003478:	d00c      	beq.n	8003494 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2284      	movs	r2, #132	; 0x84
 8003488:	589b      	ldr	r3, [r3, r2]
 800348a:	2220      	movs	r2, #32
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2184      	movs	r1, #132	; 0x84
 8003492:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2284      	movs	r2, #132	; 0x84
 8003498:	589b      	ldr	r3, [r3, r2]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d100      	bne.n	80034a0 <HAL_UART_IRQHandler+0x1a4>
 800349e:	e1e7      	b.n	8003870 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034a0:	23a4      	movs	r3, #164	; 0xa4
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2220      	movs	r2, #32
 80034a8:	4013      	ands	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ac:	23a0      	movs	r3, #160	; 0xa0
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2220      	movs	r2, #32
 80034b4:	4013      	ands	r3, r2
 80034b6:	d008      	beq.n	80034ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	0010      	movs	r0, r2
 80034c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2284      	movs	r2, #132	; 0x84
 80034ce:	589b      	ldr	r3, [r3, r2]
 80034d0:	2194      	movs	r1, #148	; 0x94
 80034d2:	187a      	adds	r2, r7, r1
 80034d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2240      	movs	r2, #64	; 0x40
 80034de:	4013      	ands	r3, r2
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d004      	beq.n	80034ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2228      	movs	r2, #40	; 0x28
 80034ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034ec:	d047      	beq.n	800357e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fdcf 	bl	8004094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2240      	movs	r2, #64	; 0x40
 80034fe:	4013      	ands	r3, r2
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d137      	bne.n	8003574 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003504:	f3ef 8310 	mrs	r3, PRIMASK
 8003508:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800350a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800350c:	2090      	movs	r0, #144	; 0x90
 800350e:	183a      	adds	r2, r7, r0
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	2301      	movs	r3, #1
 8003514:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003518:	f383 8810 	msr	PRIMASK, r3
}
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2140      	movs	r1, #64	; 0x40
 800352a:	438a      	bics	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	183b      	adds	r3, r7, r0
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <HAL_UART_IRQHandler+0x2a0>)
 800354a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	0018      	movs	r0, r3
 8003552:	f7fe f87e 	bl	8001652 <HAL_DMA_Abort_IT>
 8003556:	1e03      	subs	r3, r0, #0
 8003558:	d01a      	beq.n	8003590 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	0018      	movs	r0, r3
 8003566:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	e012      	b.n	8003590 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f000 f995 	bl	800389c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003572:	e00d      	b.n	8003590 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f990 	bl	800389c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357c:	e008      	b.n	8003590 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f98b 	bl	800389c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2284      	movs	r2, #132	; 0x84
 800358a:	2100      	movs	r1, #0
 800358c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800358e:	e16f      	b.n	8003870 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003590:	46c0      	nop			; (mov r8, r8)
    return;
 8003592:	e16d      	b.n	8003870 <HAL_UART_IRQHandler+0x574>
 8003594:	0000080f 	.word	0x0000080f
 8003598:	04000120 	.word	0x04000120
 800359c:	0800415d 	.word	0x0800415d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d000      	beq.n	80035aa <HAL_UART_IRQHandler+0x2ae>
 80035a8:	e139      	b.n	800381e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035aa:	23a4      	movs	r3, #164	; 0xa4
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2210      	movs	r2, #16
 80035b2:	4013      	ands	r3, r2
 80035b4:	d100      	bne.n	80035b8 <HAL_UART_IRQHandler+0x2bc>
 80035b6:	e132      	b.n	800381e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035b8:	23a0      	movs	r3, #160	; 0xa0
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2210      	movs	r2, #16
 80035c0:	4013      	ands	r3, r2
 80035c2:	d100      	bne.n	80035c6 <HAL_UART_IRQHandler+0x2ca>
 80035c4:	e12b      	b.n	800381e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2210      	movs	r2, #16
 80035cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2240      	movs	r2, #64	; 0x40
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b40      	cmp	r3, #64	; 0x40
 80035da:	d000      	beq.n	80035de <HAL_UART_IRQHandler+0x2e2>
 80035dc:	e09f      	b.n	800371e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	217e      	movs	r1, #126	; 0x7e
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d100      	bne.n	80035f6 <HAL_UART_IRQHandler+0x2fa>
 80035f4:	e13e      	b.n	8003874 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2258      	movs	r2, #88	; 0x58
 80035fa:	5a9b      	ldrh	r3, [r3, r2]
 80035fc:	187a      	adds	r2, r7, r1
 80035fe:	8812      	ldrh	r2, [r2, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d300      	bcc.n	8003606 <HAL_UART_IRQHandler+0x30a>
 8003604:	e136      	b.n	8003874 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	187a      	adds	r2, r7, r1
 800360a:	215a      	movs	r1, #90	; 0x5a
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b20      	cmp	r3, #32
 8003618:	d06f      	beq.n	80036fa <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361a:	f3ef 8310 	mrs	r3, PRIMASK
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003622:	67bb      	str	r3, [r7, #120]	; 0x78
 8003624:	2301      	movs	r3, #1
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4992      	ldr	r1, [pc, #584]	; (8003884 <HAL_UART_IRQHandler+0x588>)
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	f383 8810 	msr	PRIMASK, r3
}
 800364a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8310 	mrs	r3, PRIMASK
 8003650:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003654:	677b      	str	r3, [r7, #116]	; 0x74
 8003656:	2301      	movs	r3, #1
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365c:	f383 8810 	msr	PRIMASK, r3
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2101      	movs	r1, #1
 800366e:	438a      	bics	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003678:	f383 8810 	msr	PRIMASK, r3
}
 800367c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800367e:	f3ef 8310 	mrs	r3, PRIMASK
 8003682:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003684:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003686:	673b      	str	r3, [r7, #112]	; 0x70
 8003688:	2301      	movs	r3, #1
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	438a      	bics	r2, r1
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036aa:	f383 8810 	msr	PRIMASK, r3
}
 80036ae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	2120      	movs	r1, #32
 80036b6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036be:	f3ef 8310 	mrs	r3, PRIMASK
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80036c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c8:	2301      	movs	r3, #1
 80036ca:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2110      	movs	r1, #16
 80036e0:	438a      	bics	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ea:	f383 8810 	msr	PRIMASK, r3
}
 80036ee:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7fd ff74 	bl	80015e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2258      	movs	r2, #88	; 0x58
 8003704:	5a9a      	ldrh	r2, [r3, r2]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	215a      	movs	r1, #90	; 0x5a
 800370a:	5a5b      	ldrh	r3, [r3, r1]
 800370c:	b29b      	uxth	r3, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	0011      	movs	r1, r2
 8003716:	0018      	movs	r0, r3
 8003718:	f000 f8c8 	bl	80038ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800371c:	e0aa      	b.n	8003874 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2258      	movs	r2, #88	; 0x58
 8003722:	5a99      	ldrh	r1, [r3, r2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	225a      	movs	r2, #90	; 0x5a
 8003728:	5a9b      	ldrh	r3, [r3, r2]
 800372a:	b29a      	uxth	r2, r3
 800372c:	208e      	movs	r0, #142	; 0x8e
 800372e:	183b      	adds	r3, r7, r0
 8003730:	1a8a      	subs	r2, r1, r2
 8003732:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	225a      	movs	r2, #90	; 0x5a
 8003738:	5a9b      	ldrh	r3, [r3, r2]
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d100      	bne.n	8003742 <HAL_UART_IRQHandler+0x446>
 8003740:	e09a      	b.n	8003878 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8003742:	183b      	adds	r3, r7, r0
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d100      	bne.n	800374c <HAL_UART_IRQHandler+0x450>
 800374a:	e095      	b.n	8003878 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374c:	f3ef 8310 	mrs	r3, PRIMASK
 8003750:	60fb      	str	r3, [r7, #12]
  return(result);
 8003752:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003754:	2488      	movs	r4, #136	; 0x88
 8003756:	193a      	adds	r2, r7, r4
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	2301      	movs	r3, #1
 800375c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f383 8810 	msr	PRIMASK, r3
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4945      	ldr	r1, [pc, #276]	; (8003888 <HAL_UART_IRQHandler+0x58c>)
 8003772:	400a      	ands	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	193b      	adds	r3, r7, r4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f383 8810 	msr	PRIMASK, r3
}
 8003782:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003784:	f3ef 8310 	mrs	r3, PRIMASK
 8003788:	61bb      	str	r3, [r7, #24]
  return(result);
 800378a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378c:	2484      	movs	r4, #132	; 0x84
 800378e:	193a      	adds	r2, r7, r4
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	2301      	movs	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f383 8810 	msr	PRIMASK, r3
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	438a      	bics	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]
 80037ae:	193b      	adds	r3, r7, r4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	2120      	movs	r1, #32
 80037c2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d0:	f3ef 8310 	mrs	r3, PRIMASK
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	2480      	movs	r4, #128	; 0x80
 80037da:	193a      	adds	r2, r7, r4
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	2301      	movs	r3, #1
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2110      	movs	r1, #16
 80037f6:	438a      	bics	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	193b      	adds	r3, r7, r4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	f383 8810 	msr	PRIMASK, r3
}
 8003806:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800380e:	183b      	adds	r3, r7, r0
 8003810:	881a      	ldrh	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f000 f848 	bl	80038ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800381c:	e02c      	b.n	8003878 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800381e:	23a4      	movs	r3, #164	; 0xa4
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	4013      	ands	r3, r2
 8003828:	d00f      	beq.n	800384a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800382a:	23a0      	movs	r3, #160	; 0xa0
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	4013      	ands	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01e      	beq.n	800387c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	0010      	movs	r0, r2
 8003846:	4798      	blx	r3
    }
    return;
 8003848:	e018      	b.n	800387c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800384a:	23a4      	movs	r3, #164	; 0xa4
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2240      	movs	r2, #64	; 0x40
 8003852:	4013      	ands	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_UART_IRQHandler+0x582>
 8003856:	23a0      	movs	r3, #160	; 0xa0
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2240      	movs	r2, #64	; 0x40
 800385e:	4013      	ands	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0018      	movs	r0, r3
 8003866:	f000 fc90 	bl	800418a <UART_EndTransmit_IT>
    return;
 800386a:	e008      	b.n	800387e <HAL_UART_IRQHandler+0x582>
      return;
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	e006      	b.n	800387e <HAL_UART_IRQHandler+0x582>
    return;
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	e004      	b.n	800387e <HAL_UART_IRQHandler+0x582>
      return;
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	e002      	b.n	800387e <HAL_UART_IRQHandler+0x582>
      return;
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	e000      	b.n	800387e <HAL_UART_IRQHandler+0x582>
    return;
 800387c:	46c0      	nop			; (mov r8, r8)
  }

}
 800387e:	46bd      	mov	sp, r7
 8003880:	b02b      	add	sp, #172	; 0xac
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	fffffeff 	.word	0xfffffeff
 8003888:	fffffedf 	.word	0xfffffedf

0800388c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b002      	add	sp, #8
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	000a      	movs	r2, r1
 80038b6:	1cbb      	adds	r3, r7, #2
 80038b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038cc:	231e      	movs	r3, #30
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a97      	ldr	r2, [pc, #604]	; (8003b50 <UART_SetConfig+0x28c>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a92      	ldr	r2, [pc, #584]	; (8003b54 <UART_SetConfig+0x290>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a89      	ldr	r2, [pc, #548]	; (8003b58 <UART_SetConfig+0x294>)
 8003932:	4013      	ands	r3, r2
 8003934:	0019      	movs	r1, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a85      	ldr	r2, [pc, #532]	; (8003b5c <UART_SetConfig+0x298>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d127      	bne.n	800399a <UART_SetConfig+0xd6>
 800394a:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <UART_SetConfig+0x29c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	2203      	movs	r2, #3
 8003950:	4013      	ands	r3, r2
 8003952:	2b03      	cmp	r3, #3
 8003954:	d00d      	beq.n	8003972 <UART_SetConfig+0xae>
 8003956:	d81b      	bhi.n	8003990 <UART_SetConfig+0xcc>
 8003958:	2b02      	cmp	r3, #2
 800395a:	d014      	beq.n	8003986 <UART_SetConfig+0xc2>
 800395c:	d818      	bhi.n	8003990 <UART_SetConfig+0xcc>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <UART_SetConfig+0xa4>
 8003962:	2b01      	cmp	r3, #1
 8003964:	d00a      	beq.n	800397c <UART_SetConfig+0xb8>
 8003966:	e013      	b.n	8003990 <UART_SetConfig+0xcc>
 8003968:	231f      	movs	r3, #31
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	e035      	b.n	80039de <UART_SetConfig+0x11a>
 8003972:	231f      	movs	r3, #31
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	2202      	movs	r2, #2
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e030      	b.n	80039de <UART_SetConfig+0x11a>
 800397c:	231f      	movs	r3, #31
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2204      	movs	r2, #4
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e02b      	b.n	80039de <UART_SetConfig+0x11a>
 8003986:	231f      	movs	r3, #31
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2208      	movs	r2, #8
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e026      	b.n	80039de <UART_SetConfig+0x11a>
 8003990:	231f      	movs	r3, #31
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	2210      	movs	r2, #16
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e021      	b.n	80039de <UART_SetConfig+0x11a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a71      	ldr	r2, [pc, #452]	; (8003b64 <UART_SetConfig+0x2a0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d104      	bne.n	80039ae <UART_SetConfig+0xea>
 80039a4:	231f      	movs	r3, #31
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e017      	b.n	80039de <UART_SetConfig+0x11a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6d      	ldr	r2, [pc, #436]	; (8003b68 <UART_SetConfig+0x2a4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d104      	bne.n	80039c2 <UART_SetConfig+0xfe>
 80039b8:	231f      	movs	r3, #31
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	e00d      	b.n	80039de <UART_SetConfig+0x11a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <UART_SetConfig+0x2a8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d104      	bne.n	80039d6 <UART_SetConfig+0x112>
 80039cc:	231f      	movs	r3, #31
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e003      	b.n	80039de <UART_SetConfig+0x11a>
 80039d6:	231f      	movs	r3, #31
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	2210      	movs	r2, #16
 80039dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d15c      	bne.n	8003aa4 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 80039ea:	231f      	movs	r3, #31
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d015      	beq.n	8003a20 <UART_SetConfig+0x15c>
 80039f4:	dc18      	bgt.n	8003a28 <UART_SetConfig+0x164>
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d00d      	beq.n	8003a16 <UART_SetConfig+0x152>
 80039fa:	dc15      	bgt.n	8003a28 <UART_SetConfig+0x164>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <UART_SetConfig+0x142>
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d005      	beq.n	8003a10 <UART_SetConfig+0x14c>
 8003a04:	e010      	b.n	8003a28 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a06:	f7fe fc5f 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	61bb      	str	r3, [r7, #24]
        break;
 8003a0e:	e012      	b.n	8003a36 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a10:	4b57      	ldr	r3, [pc, #348]	; (8003b70 <UART_SetConfig+0x2ac>)
 8003a12:	61bb      	str	r3, [r7, #24]
        break;
 8003a14:	e00f      	b.n	8003a36 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a16:	f7fe fbf5 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	61bb      	str	r3, [r7, #24]
        break;
 8003a1e:	e00a      	b.n	8003a36 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	61bb      	str	r3, [r7, #24]
        break;
 8003a26:	e006      	b.n	8003a36 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a2c:	231e      	movs	r3, #30
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
        break;
 8003a34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d100      	bne.n	8003a3e <UART_SetConfig+0x17a>
 8003a3c:	e07a      	b.n	8003b34 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	005a      	lsls	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	18d2      	adds	r2, r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0019      	movs	r1, r3
 8003a50:	0010      	movs	r0, r2
 8003a52:	f7fc fb75 	bl	8000140 <__udivsi3>
 8003a56:	0003      	movs	r3, r0
 8003a58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b0f      	cmp	r3, #15
 8003a5e:	d91c      	bls.n	8003a9a <UART_SetConfig+0x1d6>
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	025b      	lsls	r3, r3, #9
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d217      	bcs.n	8003a9a <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	200e      	movs	r0, #14
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	210f      	movs	r1, #15
 8003a74:	438a      	bics	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2207      	movs	r2, #7
 8003a80:	4013      	ands	r3, r2
 8003a82:	b299      	uxth	r1, r3
 8003a84:	183b      	adds	r3, r7, r0
 8003a86:	183a      	adds	r2, r7, r0
 8003a88:	8812      	ldrh	r2, [r2, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	183a      	adds	r2, r7, r0
 8003a94:	8812      	ldrh	r2, [r2, #0]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e04c      	b.n	8003b34 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9a:	231e      	movs	r3, #30
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	e047      	b.n	8003b34 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa4:	231f      	movs	r3, #31
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d015      	beq.n	8003ada <UART_SetConfig+0x216>
 8003aae:	dc18      	bgt.n	8003ae2 <UART_SetConfig+0x21e>
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d00d      	beq.n	8003ad0 <UART_SetConfig+0x20c>
 8003ab4:	dc15      	bgt.n	8003ae2 <UART_SetConfig+0x21e>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <UART_SetConfig+0x1fc>
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d005      	beq.n	8003aca <UART_SetConfig+0x206>
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f7fe fc02 	bl	80022c8 <HAL_RCC_GetPCLK1Freq>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	61bb      	str	r3, [r7, #24]
        break;
 8003ac8:	e012      	b.n	8003af0 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aca:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <UART_SetConfig+0x2ac>)
 8003acc:	61bb      	str	r3, [r7, #24]
        break;
 8003ace:	e00f      	b.n	8003af0 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad0:	f7fe fb98 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	61bb      	str	r3, [r7, #24]
        break;
 8003ad8:	e00a      	b.n	8003af0 <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	61bb      	str	r3, [r7, #24]
        break;
 8003ae0:	e006      	b.n	8003af0 <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ae6:	231e      	movs	r3, #30
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]
        break;
 8003aee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01e      	beq.n	8003b34 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	085a      	lsrs	r2, r3, #1
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	18d2      	adds	r2, r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0019      	movs	r1, r3
 8003b06:	0010      	movs	r0, r2
 8003b08:	f7fc fb1a 	bl	8000140 <__udivsi3>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d90a      	bls.n	8003b2c <UART_SetConfig+0x268>
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	025b      	lsls	r3, r3, #9
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d205      	bcs.n	8003b2c <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	e003      	b.n	8003b34 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8003b2c:	231e      	movs	r3, #30
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b40:	231e      	movs	r3, #30
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b008      	add	sp, #32
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	efff69f3 	.word	0xefff69f3
 8003b54:	ffffcfff 	.word	0xffffcfff
 8003b58:	fffff4ff 	.word	0xfffff4ff
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40004400 	.word	0x40004400
 8003b68:	40004800 	.word	0x40004800
 8003b6c:	40004c00 	.word	0x40004c00
 8003b70:	007a1200 	.word	0x007a1200

08003b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2201      	movs	r2, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a4a      	ldr	r2, [pc, #296]	; (8003cb8 <UART_AdvFeatureConfig+0x144>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a43      	ldr	r2, [pc, #268]	; (8003cbc <UART_AdvFeatureConfig+0x148>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <UART_AdvFeatureConfig+0x14c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2208      	movs	r2, #8
 8003be8:	4013      	ands	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a34      	ldr	r2, [pc, #208]	; (8003cc4 <UART_AdvFeatureConfig+0x150>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2210      	movs	r2, #16
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <UART_AdvFeatureConfig+0x154>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <UART_AdvFeatureConfig+0x158>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <UART_AdvFeatureConfig+0x15c>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	035b      	lsls	r3, r3, #13
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d10b      	bne.n	8003c8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <UART_AdvFeatureConfig+0x160>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	4013      	ands	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <UART_AdvFeatureConfig+0x164>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fffdffff 	.word	0xfffdffff
 8003cbc:	fffeffff 	.word	0xfffeffff
 8003cc0:	fffbffff 	.word	0xfffbffff
 8003cc4:	ffff7fff 	.word	0xffff7fff
 8003cc8:	ffffefff 	.word	0xffffefff
 8003ccc:	ffffdfff 	.word	0xffffdfff
 8003cd0:	ffefffff 	.word	0xffefffff
 8003cd4:	ff9fffff 	.word	0xff9fffff
 8003cd8:	fff7ffff 	.word	0xfff7ffff

08003cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b092      	sub	sp, #72	; 0x48
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2284      	movs	r2, #132	; 0x84
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cec:	f7fd fbc2 	bl	8001474 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d12c      	bne.n	8003d5c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	0391      	lsls	r1, r2, #14
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4a46      	ldr	r2, [pc, #280]	; (8003e24 <UART_CheckIdleState+0x148>)
 8003d0c:	9200      	str	r2, [sp, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f000 f88c 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d021      	beq.n	8003d5c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d18:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d22:	2301      	movs	r3, #1
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	438a      	bics	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2278      	movs	r2, #120	; 0x78
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e05f      	b.n	8003e1c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2204      	movs	r2, #4
 8003d64:	4013      	ands	r3, r2
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d146      	bne.n	8003df8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	03d1      	lsls	r1, r2, #15
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4a2c      	ldr	r2, [pc, #176]	; (8003e24 <UART_CheckIdleState+0x148>)
 8003d74:	9200      	str	r2, [sp, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f000 f858 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d03b      	beq.n	8003df8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d80:	f3ef 8310 	mrs	r3, PRIMASK
 8003d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d86:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4921      	ldr	r1, [pc, #132]	; (8003e28 <UART_CheckIdleState+0x14c>)
 8003da2:	400a      	ands	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db2:	f3ef 8310 	mrs	r3, PRIMASK
 8003db6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003db8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f383 8810 	msr	PRIMASK, r3
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	2120      	movs	r1, #32
 8003dea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2278      	movs	r2, #120	; 0x78
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e011      	b.n	8003e1c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	2120      	movs	r1, #32
 8003e04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2278      	movs	r2, #120	; 0x78
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b010      	add	sp, #64	; 0x40
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	01ffffff 	.word	0x01ffffff
 8003e28:	fffffedf 	.word	0xfffffedf

08003e2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	1dfb      	adds	r3, r7, #7
 8003e3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	e04b      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	3301      	adds	r3, #1
 8003e42:	d048      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e44:	f7fd fb16 	bl	8001474 <HAL_GetTick>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e04b      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2204      	movs	r2, #4
 8003e66:	4013      	ands	r3, r2
 8003e68:	d035      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	2208      	movs	r2, #8
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d111      	bne.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 f906 	bl	8004094 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2284      	movs	r2, #132	; 0x84
 8003e8c:	2108      	movs	r1, #8
 8003e8e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2278      	movs	r2, #120	; 0x78
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e02c      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d112      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	0112      	lsls	r2, r2, #4
 8003eb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f8e9 	bl	8004094 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2284      	movs	r2, #132	; 0x84
 8003ec6:	2120      	movs	r1, #32
 8003ec8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2278      	movs	r2, #120	; 0x78
 8003ece:	2100      	movs	r1, #0
 8003ed0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e00f      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	425a      	negs	r2, r3
 8003ee6:	4153      	adcs	r3, r2
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	001a      	movs	r2, r3
 8003eec:	1dfb      	adds	r3, r7, #7
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d0a4      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b004      	add	sp, #16
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b090      	sub	sp, #64	; 0x40
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	1dbb      	adds	r3, r7, #6
 8003f0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1dba      	adds	r2, r7, #6
 8003f18:	2158      	movs	r1, #88	; 0x58
 8003f1a:	8812      	ldrh	r2, [r2, #0]
 8003f1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1dba      	adds	r2, r7, #6
 8003f22:	215a      	movs	r1, #90	; 0x5a
 8003f24:	8812      	ldrh	r2, [r2, #0]
 8003f26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	015b      	lsls	r3, r3, #5
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d10d      	bne.n	8003f56 <UART_Start_Receive_IT+0x56>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <UART_Start_Receive_IT+0x4c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	225c      	movs	r2, #92	; 0x5c
 8003f46:	4950      	ldr	r1, [pc, #320]	; (8004088 <UART_Start_Receive_IT+0x188>)
 8003f48:	5299      	strh	r1, [r3, r2]
 8003f4a:	e02e      	b.n	8003faa <UART_Start_Receive_IT+0xaa>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	225c      	movs	r2, #92	; 0x5c
 8003f50:	21ff      	movs	r1, #255	; 0xff
 8003f52:	5299      	strh	r1, [r3, r2]
 8003f54:	e029      	b.n	8003faa <UART_Start_Receive_IT+0xaa>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <UART_Start_Receive_IT+0x7a>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <UART_Start_Receive_IT+0x70>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	225c      	movs	r2, #92	; 0x5c
 8003f6a:	21ff      	movs	r1, #255	; 0xff
 8003f6c:	5299      	strh	r1, [r3, r2]
 8003f6e:	e01c      	b.n	8003faa <UART_Start_Receive_IT+0xaa>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	225c      	movs	r2, #92	; 0x5c
 8003f74:	217f      	movs	r1, #127	; 0x7f
 8003f76:	5299      	strh	r1, [r3, r2]
 8003f78:	e017      	b.n	8003faa <UART_Start_Receive_IT+0xaa>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	055b      	lsls	r3, r3, #21
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d10d      	bne.n	8003fa2 <UART_Start_Receive_IT+0xa2>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <UART_Start_Receive_IT+0x98>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	225c      	movs	r2, #92	; 0x5c
 8003f92:	217f      	movs	r1, #127	; 0x7f
 8003f94:	5299      	strh	r1, [r3, r2]
 8003f96:	e008      	b.n	8003faa <UART_Start_Receive_IT+0xaa>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	225c      	movs	r2, #92	; 0x5c
 8003f9c:	213f      	movs	r1, #63	; 0x3f
 8003f9e:	5299      	strh	r1, [r3, r2]
 8003fa0:	e003      	b.n	8003faa <UART_Start_Receive_IT+0xaa>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	225c      	movs	r2, #92	; 0x5c
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2284      	movs	r2, #132	; 0x84
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2280      	movs	r2, #128	; 0x80
 8003fb6:	2122      	movs	r1, #34	; 0x22
 8003fb8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	f383 8810 	msr	PRIMASK, r3
}
 8003fea:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	015b      	lsls	r3, r3, #5
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d107      	bne.n	8004008 <UART_Start_Receive_IT+0x108>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a22      	ldr	r2, [pc, #136]	; (800408c <UART_Start_Receive_IT+0x18c>)
 8004004:	669a      	str	r2, [r3, #104]	; 0x68
 8004006:	e002      	b.n	800400e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a21      	ldr	r2, [pc, #132]	; (8004090 <UART_Start_Receive_IT+0x190>)
 800400c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d019      	beq.n	800404a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004016:	f3ef 8310 	mrs	r3, PRIMASK
 800401a:	61fb      	str	r3, [r7, #28]
  return(result);
 800401c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
 8004020:	2301      	movs	r3, #1
 8004022:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2190      	movs	r1, #144	; 0x90
 8004038:	0049      	lsls	r1, r1, #1
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	e018      	b.n	800407c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404a:	f3ef 8310 	mrs	r3, PRIMASK
 800404e:	613b      	str	r3, [r7, #16]
  return(result);
 8004050:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38
 8004054:	2301      	movs	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f383 8810 	msr	PRIMASK, r3
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2120      	movs	r1, #32
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b010      	add	sp, #64	; 0x40
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	000001ff 	.word	0x000001ff
 800408c:	08004399 	.word	0x08004399
 8004090:	080041e1 	.word	0x080041e1

08004094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08e      	sub	sp, #56	; 0x38
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409c:	f3ef 8310 	mrs	r3, PRIMASK
 80040a0:	617b      	str	r3, [r7, #20]
  return(result);
 80040a2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	2301      	movs	r3, #1
 80040a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f383 8810 	msr	PRIMASK, r3
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4926      	ldr	r1, [pc, #152]	; (8004158 <UART_EndRxTransfer+0xc4>)
 80040be:	400a      	ands	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f383 8810 	msr	PRIMASK, r3
}
 80040cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ce:	f3ef 8310 	mrs	r3, PRIMASK
 80040d2:	623b      	str	r3, [r7, #32]
  return(result);
 80040d4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
 80040d8:	2301      	movs	r3, #1
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f383 8810 	msr	PRIMASK, r3
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2101      	movs	r1, #1
 80040f0:	438a      	bics	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	f383 8810 	msr	PRIMASK, r3
}
 80040fe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004104:	2b01      	cmp	r3, #1
 8004106:	d118      	bne.n	800413a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004108:	f3ef 8310 	mrs	r3, PRIMASK
 800410c:	60bb      	str	r3, [r7, #8]
  return(result);
 800410e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004112:	2301      	movs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f383 8810 	msr	PRIMASK, r3
}
 800411c:	46c0      	nop			; (mov r8, r8)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2110      	movs	r1, #16
 800412a:	438a      	bics	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f383 8810 	msr	PRIMASK, r3
}
 8004138:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2280      	movs	r2, #128	; 0x80
 800413e:	2120      	movs	r1, #32
 8004140:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b00e      	add	sp, #56	; 0x38
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	fffffedf 	.word	0xfffffedf

0800415c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	225a      	movs	r2, #90	; 0x5a
 800416e:	2100      	movs	r1, #0
 8004170:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2252      	movs	r2, #82	; 0x52
 8004176:	2100      	movs	r1, #0
 8004178:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff fb8d 	bl	800389c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b004      	add	sp, #16
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	60bb      	str	r3, [r7, #8]
  return(result);
 8004198:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	2301      	movs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2140      	movs	r1, #64	; 0x40
 80041b4:	438a      	bics	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f7ff fb5a 	bl	800388c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b006      	add	sp, #24
 80041de:	bd80      	pop	{r7, pc}

080041e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b094      	sub	sp, #80	; 0x50
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041e8:	204e      	movs	r0, #78	; 0x4e
 80041ea:	183b      	adds	r3, r7, r0
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	215c      	movs	r1, #92	; 0x5c
 80041f0:	5a52      	ldrh	r2, [r2, r1]
 80041f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	589b      	ldr	r3, [r3, r2]
 80041fa:	2b22      	cmp	r3, #34	; 0x22
 80041fc:	d000      	beq.n	8004200 <UART_RxISR_8BIT+0x20>
 80041fe:	e0ba      	b.n	8004376 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	214c      	movs	r1, #76	; 0x4c
 8004206:	187b      	adds	r3, r7, r1
 8004208:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800420a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800420c:	187b      	adds	r3, r7, r1
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	183b      	adds	r3, r7, r0
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	b2d9      	uxtb	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	400a      	ands	r2, r1
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	225a      	movs	r2, #90	; 0x5a
 8004230:	5a9b      	ldrh	r3, [r3, r2]
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b299      	uxth	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	225a      	movs	r2, #90	; 0x5a
 800423c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	225a      	movs	r2, #90	; 0x5a
 8004242:	5a9b      	ldrh	r3, [r3, r2]
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d000      	beq.n	800424c <UART_RxISR_8BIT+0x6c>
 800424a:	e09c      	b.n	8004386 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424c:	f3ef 8310 	mrs	r3, PRIMASK
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004254:	64bb      	str	r3, [r7, #72]	; 0x48
 8004256:	2301      	movs	r3, #1
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	f383 8810 	msr	PRIMASK, r3
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4948      	ldr	r1, [pc, #288]	; (8004390 <UART_RxISR_8BIT+0x1b0>)
 800426e:	400a      	ands	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	f383 8810 	msr	PRIMASK, r3
}
 800427c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427e:	f3ef 8310 	mrs	r3, PRIMASK
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
 8004288:	2301      	movs	r3, #1
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	f383 8810 	msr	PRIMASK, r3
}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2101      	movs	r1, #1
 80042a0:	438a      	bics	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	2120      	movs	r1, #32
 80042b6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	041b      	lsls	r3, r3, #16
 80042ce:	4013      	ands	r3, r2
 80042d0:	d018      	beq.n	8004304 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d2:	f3ef 8310 	mrs	r3, PRIMASK
 80042d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80042d8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042da:	643b      	str	r3, [r7, #64]	; 0x40
 80042dc:	2301      	movs	r3, #1
 80042de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f383 8810 	msr	PRIMASK, r3
}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4928      	ldr	r1, [pc, #160]	; (8004394 <UART_RxISR_8BIT+0x1b4>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004308:	2b01      	cmp	r3, #1
 800430a:	d12f      	bne.n	800436c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004312:	f3ef 8310 	mrs	r3, PRIMASK
 8004316:	60fb      	str	r3, [r7, #12]
  return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800431c:	2301      	movs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f383 8810 	msr	PRIMASK, r3
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2110      	movs	r1, #16
 8004334:	438a      	bics	r2, r1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	2210      	movs	r2, #16
 800434c:	4013      	ands	r3, r2
 800434e:	2b10      	cmp	r3, #16
 8004350:	d103      	bne.n	800435a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2210      	movs	r2, #16
 8004358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2258      	movs	r2, #88	; 0x58
 800435e:	5a9a      	ldrh	r2, [r3, r2]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff faa1 	bl	80038ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800436a:	e00c      	b.n	8004386 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0018      	movs	r0, r3
 8004370:	f7fc f996 	bl	80006a0 <HAL_UART_RxCpltCallback>
}
 8004374:	e007      	b.n	8004386 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2108      	movs	r1, #8
 8004382:	430a      	orrs	r2, r1
 8004384:	619a      	str	r2, [r3, #24]
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b014      	add	sp, #80	; 0x50
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	fffffedf 	.word	0xfffffedf
 8004394:	fbffffff 	.word	0xfbffffff

08004398 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b094      	sub	sp, #80	; 0x50
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043a0:	204e      	movs	r0, #78	; 0x4e
 80043a2:	183b      	adds	r3, r7, r0
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	215c      	movs	r1, #92	; 0x5c
 80043a8:	5a52      	ldrh	r2, [r2, r1]
 80043aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	589b      	ldr	r3, [r3, r2]
 80043b2:	2b22      	cmp	r3, #34	; 0x22
 80043b4:	d000      	beq.n	80043b8 <UART_RxISR_16BIT+0x20>
 80043b6:	e0ba      	b.n	800452e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	214c      	movs	r1, #76	; 0x4c
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80043c2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80043ca:	187b      	adds	r3, r7, r1
 80043cc:	183a      	adds	r2, r7, r0
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	4013      	ands	r3, r2
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	1c9a      	adds	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	225a      	movs	r2, #90	; 0x5a
 80043e8:	5a9b      	ldrh	r3, [r3, r2]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b299      	uxth	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	225a      	movs	r2, #90	; 0x5a
 80043f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	225a      	movs	r2, #90	; 0x5a
 80043fa:	5a9b      	ldrh	r3, [r3, r2]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d000      	beq.n	8004404 <UART_RxISR_16BIT+0x6c>
 8004402:	e09c      	b.n	800453e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004404:	f3ef 8310 	mrs	r3, PRIMASK
 8004408:	623b      	str	r3, [r7, #32]
  return(result);
 800440a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
 800440e:	2301      	movs	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4948      	ldr	r1, [pc, #288]	; (8004548 <UART_RxISR_16BIT+0x1b0>)
 8004426:	400a      	ands	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	f383 8810 	msr	PRIMASK, r3
}
 8004434:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004436:	f3ef 8310 	mrs	r3, PRIMASK
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443e:	643b      	str	r3, [r7, #64]	; 0x40
 8004440:	2301      	movs	r3, #1
 8004442:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	f383 8810 	msr	PRIMASK, r3
}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	438a      	bics	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	f383 8810 	msr	PRIMASK, r3
}
 8004466:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2280      	movs	r2, #128	; 0x80
 800446c:	2120      	movs	r1, #32
 800446e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	4013      	ands	r3, r2
 8004488:	d018      	beq.n	80044bc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448a:	f3ef 8310 	mrs	r3, PRIMASK
 800448e:	617b      	str	r3, [r7, #20]
  return(result);
 8004490:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004494:	2301      	movs	r3, #1
 8004496:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f383 8810 	msr	PRIMASK, r3
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4928      	ldr	r1, [pc, #160]	; (800454c <UART_RxISR_16BIT+0x1b4>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d12f      	bne.n	8004524 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ca:	f3ef 8310 	mrs	r3, PRIMASK
 80044ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80044d0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d4:	2301      	movs	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f383 8810 	msr	PRIMASK, r3
}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2110      	movs	r1, #16
 80044ec:	438a      	bics	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f383 8810 	msr	PRIMASK, r3
}
 80044fa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2210      	movs	r2, #16
 8004504:	4013      	ands	r3, r2
 8004506:	2b10      	cmp	r3, #16
 8004508:	d103      	bne.n	8004512 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2210      	movs	r2, #16
 8004510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2258      	movs	r2, #88	; 0x58
 8004516:	5a9a      	ldrh	r2, [r3, r2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	0011      	movs	r1, r2
 800451c:	0018      	movs	r0, r3
 800451e:	f7ff f9c5 	bl	80038ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004522:	e00c      	b.n	800453e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f7fc f8ba 	bl	80006a0 <HAL_UART_RxCpltCallback>
}
 800452c:	e007      	b.n	800453e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2108      	movs	r1, #8
 800453a:	430a      	orrs	r2, r1
 800453c:	619a      	str	r2, [r3, #24]
}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b014      	add	sp, #80	; 0x50
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	fffffedf 	.word	0xfffffedf
 800454c:	fbffffff 	.word	0xfbffffff

08004550 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	0002      	movs	r2, r0
 8004558:	1dbb      	adds	r3, r7, #6
 800455a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004560:	1dbb      	adds	r3, r7, #6
 8004562:	2200      	movs	r2, #0
 8004564:	5e9b      	ldrsh	r3, [r3, r2]
 8004566:	2b84      	cmp	r3, #132	; 0x84
 8004568:	d006      	beq.n	8004578 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800456a:	1dbb      	adds	r3, r7, #6
 800456c:	2200      	movs	r2, #0
 800456e:	5e9a      	ldrsh	r2, [r3, r2]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	18d3      	adds	r3, r2, r3
 8004574:	3303      	adds	r3, #3
 8004576:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004578:	68fb      	ldr	r3, [r7, #12]
}
 800457a:	0018      	movs	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	b004      	add	sp, #16
 8004580:	bd80      	pop	{r7, pc}

08004582 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004586:	f000 ff77 	bl	8005478 <vTaskStartScheduler>
  
  return osOK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004594:	b089      	sub	sp, #36	; 0x24
 8004596:	af04      	add	r7, sp, #16
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <osThreadCreate+0x54>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685c      	ldr	r4, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681d      	ldr	r5, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691e      	ldr	r6, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2208      	movs	r2, #8
 80045bc:	5e9b      	ldrsh	r3, [r3, r2]
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff ffc6 	bl	8004550 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	9302      	str	r3, [sp, #8]
 80045d0:	9201      	str	r2, [sp, #4]
 80045d2:	9000      	str	r0, [sp, #0]
 80045d4:	000b      	movs	r3, r1
 80045d6:	0032      	movs	r2, r6
 80045d8:	0029      	movs	r1, r5
 80045da:	0020      	movs	r0, r4
 80045dc:	f000 fdb9 	bl	8005152 <xTaskCreateStatic>
 80045e0:	0003      	movs	r3, r0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e01d      	b.n	8004622 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685c      	ldr	r4, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045f2:	b29e      	uxth	r6, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2208      	movs	r2, #8
 80045f8:	5e9b      	ldrsh	r3, [r3, r2]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7ff ffa8 	bl	8004550 <makeFreeRtosPriority>
 8004600:	0001      	movs	r1, r0
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	230c      	movs	r3, #12
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	9100      	str	r1, [sp, #0]
 800460c:	0013      	movs	r3, r2
 800460e:	0032      	movs	r2, r6
 8004610:	0029      	movs	r1, r5
 8004612:	0020      	movs	r0, r4
 8004614:	f000 fde0 	bl	80051d8 <xTaskCreate>
 8004618:	0003      	movs	r3, r0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b005      	add	sp, #20
 800462a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800462c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3308      	adds	r3, #8
 8004638:	001a      	movs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	4252      	negs	r2, r2
 8004644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3308      	adds	r3, #8
 800464a:	001a      	movs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3308      	adds	r3, #8
 8004654:	001a      	movs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}

08004668 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}

0800467e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	46bd      	mov	sp, r7
 80046be:	b004      	add	sp, #16
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	3301      	adds	r3, #1
 80046d6:	d103      	bne.n	80046e0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e00c      	b.n	80046fa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3308      	adds	r3, #8
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e002      	b.n	80046ee <vListInsert+0x2c>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d2f6      	bcs.n	80046e8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b004      	add	sp, #16
 800472c:	bd80      	pop	{r7, pc}

0800472e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6892      	ldr	r2, [r2, #8]
 8004744:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6852      	ldr	r2, [r2, #4]
 800474e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d103      	bne.n	8004762 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	1e5a      	subs	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b004      	add	sp, #16
 800477c:	bd80      	pop	{r7, pc}

0800477e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <xQueueGenericReset+0x18>
 8004792:	b672      	cpsid	i
 8004794:	e7fe      	b.n	8004794 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8004796:	f002 f813 	bl	80067c0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	434b      	muls	r3, r1
 80047a8:	18d2      	adds	r2, r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	1e59      	subs	r1, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	434b      	muls	r3, r1
 80047cc:	18d2      	adds	r2, r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2244      	movs	r2, #68	; 0x44
 80047d6:	21ff      	movs	r1, #255	; 0xff
 80047d8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2245      	movs	r2, #69	; 0x45
 80047de:	21ff      	movs	r1, #255	; 0xff
 80047e0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10d      	bne.n	8004804 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3310      	adds	r3, #16
 80047f4:	0018      	movs	r0, r3
 80047f6:	f001 f883 	bl	8005900 <xTaskRemoveFromEventList>
 80047fa:	1e03      	subs	r3, r0, #0
 80047fc:	d00c      	beq.n	8004818 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047fe:	f001 ffcf 	bl	80067a0 <vPortYield>
 8004802:	e009      	b.n	8004818 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3310      	adds	r3, #16
 8004808:	0018      	movs	r0, r3
 800480a:	f7ff ff0f 	bl	800462c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3324      	adds	r3, #36	; 0x24
 8004812:	0018      	movs	r0, r3
 8004814:	f7ff ff0a 	bl	800462c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004818:	f001 ffe4 	bl	80067e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800481c:	2301      	movs	r3, #1
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b004      	add	sp, #16
 8004824:	bd80      	pop	{r7, pc}

08004826 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004826:	b590      	push	{r4, r7, lr}
 8004828:	b089      	sub	sp, #36	; 0x24
 800482a:	af02      	add	r7, sp, #8
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <xQueueGenericCreateStatic+0x18>
 800483a:	b672      	cpsid	i
 800483c:	e7fe      	b.n	800483c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueGenericCreateStatic+0x22>
 8004844:	b672      	cpsid	i
 8004846:	e7fe      	b.n	8004846 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <xQueueGenericCreateStatic+0x2e>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <xQueueGenericCreateStatic+0x32>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <xQueueGenericCreateStatic+0x34>
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <xQueueGenericCreateStatic+0x3c>
 800485e:	b672      	cpsid	i
 8004860:	e7fe      	b.n	8004860 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <xQueueGenericCreateStatic+0x48>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <xQueueGenericCreateStatic+0x4c>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <xQueueGenericCreateStatic+0x4e>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <xQueueGenericCreateStatic+0x56>
 8004878:	b672      	cpsid	i
 800487a:	e7fe      	b.n	800487a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800487c:	2348      	movs	r3, #72	; 0x48
 800487e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b48      	cmp	r3, #72	; 0x48
 8004884:	d001      	beq.n	800488a <xQueueGenericCreateStatic+0x64>
 8004886:	b672      	cpsid	i
 8004888:	e7fe      	b.n	8004888 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00e      	beq.n	80048b2 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2246      	movs	r2, #70	; 0x46
 8004898:	2101      	movs	r1, #1
 800489a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800489c:	2328      	movs	r3, #40	; 0x28
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	781c      	ldrb	r4, [r3, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	0023      	movs	r3, r4
 80048ae:	f000 f83b 	bl	8004928 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80048b2:	697b      	ldr	r3, [r7, #20]
	}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b007      	add	sp, #28
 80048ba:	bd90      	pop	{r4, r7, pc}

080048bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b08b      	sub	sp, #44	; 0x2c
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	1dfb      	adds	r3, r7, #7
 80048c8:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <xQueueGenericCreate+0x18>
 80048d0:	b672      	cpsid	i
 80048d2:	e7fe      	b.n	80048d2 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	e003      	b.n	80048e8 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4353      	muls	r3, r2
 80048e6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3348      	adds	r3, #72	; 0x48
 80048ec:	0018      	movs	r0, r3
 80048ee:	f001 ffff 	bl	80068f0 <pvPortMalloc>
 80048f2:	0003      	movs	r3, r0
 80048f4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d010      	beq.n	800491e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	3348      	adds	r3, #72	; 0x48
 8004900:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2246      	movs	r2, #70	; 0x46
 8004906:	2100      	movs	r1, #0
 8004908:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	781c      	ldrb	r4, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	0023      	movs	r3, r4
 800491a:	f000 f805 	bl	8004928 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800491e:	69bb      	ldr	r3, [r7, #24]
	}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b009      	add	sp, #36	; 0x24
 8004926:	bd90      	pop	{r4, r7, pc}

08004928 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	001a      	movs	r2, r3
 8004936:	1cfb      	adds	r3, r7, #3
 8004938:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e002      	b.n	800494e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2101      	movs	r1, #1
 800495e:	0018      	movs	r0, r3
 8004960:	f7ff ff0d 	bl	800477e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b004      	add	sp, #16
 800496a:	bd80      	pop	{r7, pc}

0800496c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <xQueueGenericSend+0x20>
 8004988:	b672      	cpsid	i
 800498a:	e7fe      	b.n	800498a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d103      	bne.n	800499a <xQueueGenericSend+0x2e>
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <xQueueGenericSend+0x32>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <xQueueGenericSend+0x34>
 800499e:	2300      	movs	r3, #0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <xQueueGenericSend+0x3c>
 80049a4:	b672      	cpsid	i
 80049a6:	e7fe      	b.n	80049a6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d103      	bne.n	80049b6 <xQueueGenericSend+0x4a>
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <xQueueGenericSend+0x4e>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <xQueueGenericSend+0x50>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <xQueueGenericSend+0x58>
 80049c0:	b672      	cpsid	i
 80049c2:	e7fe      	b.n	80049c2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c4:	f001 f934 	bl	8005c30 <xTaskGetSchedulerState>
 80049c8:	1e03      	subs	r3, r0, #0
 80049ca:	d102      	bne.n	80049d2 <xQueueGenericSend+0x66>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <xQueueGenericSend+0x6a>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <xQueueGenericSend+0x6c>
 80049d6:	2300      	movs	r3, #0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <xQueueGenericSend+0x74>
 80049dc:	b672      	cpsid	i
 80049de:	e7fe      	b.n	80049de <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049e0:	f001 feee 	bl	80067c0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <xQueueGenericSend+0x8a>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d11e      	bne.n	8004a34 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 fa17 	bl	8004e30 <prvCopyDataToQueue>
 8004a02:	0003      	movs	r3, r0
 8004a04:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	3324      	adds	r3, #36	; 0x24
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 ff74 	bl	8005900 <xTaskRemoveFromEventList>
 8004a18:	1e03      	subs	r3, r0, #0
 8004a1a:	d007      	beq.n	8004a2c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a1c:	f001 fec0 	bl	80067a0 <vPortYield>
 8004a20:	e004      	b.n	8004a2c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a28:	f001 feba 	bl	80067a0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a2c:	f001 feda 	bl	80067e4 <vPortExitCritical>
				return pdPASS;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e05b      	b.n	8004aec <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a3a:	f001 fed3 	bl	80067e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e054      	b.n	8004aec <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a48:	2314      	movs	r3, #20
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 ffb3 	bl	80059b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a52:	2301      	movs	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a56:	f001 fec5 	bl	80067e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a5a:	f000 fd61 	bl	8005520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a5e:	f001 feaf 	bl	80067c0 <vPortEnterCritical>
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2244      	movs	r2, #68	; 0x44
 8004a66:	5c9b      	ldrb	r3, [r3, r2]
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	d103      	bne.n	8004a76 <xQueueGenericSend+0x10a>
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2244      	movs	r2, #68	; 0x44
 8004a72:	2100      	movs	r1, #0
 8004a74:	5499      	strb	r1, [r3, r2]
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	2245      	movs	r2, #69	; 0x45
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	b25b      	sxtb	r3, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	d103      	bne.n	8004a8a <xQueueGenericSend+0x11e>
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	2245      	movs	r2, #69	; 0x45
 8004a86:	2100      	movs	r1, #0
 8004a88:	5499      	strb	r1, [r3, r2]
 8004a8a:	f001 feab 	bl	80067e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a8e:	1d3a      	adds	r2, r7, #4
 8004a90:	2314      	movs	r3, #20
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	0011      	movs	r1, r2
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 ffa2 	bl	80059e0 <xTaskCheckForTimeOut>
 8004a9c:	1e03      	subs	r3, r0, #0
 8004a9e:	d11e      	bne.n	8004ade <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f000 fac9 	bl	800503a <prvIsQueueFull>
 8004aa8:	1e03      	subs	r3, r0, #0
 8004aaa:	d011      	beq.n	8004ad0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	3310      	adds	r3, #16
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	0011      	movs	r1, r2
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f000 fedf 	bl	8005878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 fa48 	bl	8004f52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ac2:	f000 fd39 	bl	8005538 <xTaskResumeAll>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d18a      	bne.n	80049e0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004aca:	f001 fe69 	bl	80067a0 <vPortYield>
 8004ace:	e787      	b.n	80049e0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 fa3d 	bl	8004f52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ad8:	f000 fd2e 	bl	8005538 <xTaskResumeAll>
 8004adc:	e780      	b.n	80049e0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f000 fa36 	bl	8004f52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ae6:	f000 fd27 	bl	8005538 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004aea:	2300      	movs	r3, #0
		}
	}
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b00a      	add	sp, #40	; 0x28
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004af4:	b590      	push	{r4, r7, lr}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <xQueueGenericSendFromISR+0x1c>
 8004b0c:	b672      	cpsid	i
 8004b0e:	e7fe      	b.n	8004b0e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <xQueueGenericSendFromISR+0x2a>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <xQueueGenericSendFromISR+0x2e>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <xQueueGenericSendFromISR+0x30>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <xQueueGenericSendFromISR+0x38>
 8004b28:	b672      	cpsid	i
 8004b2a:	e7fe      	b.n	8004b2a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d103      	bne.n	8004b3a <xQueueGenericSendFromISR+0x46>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <xQueueGenericSendFromISR+0x4a>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <xQueueGenericSendFromISR+0x4c>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <xQueueGenericSendFromISR+0x54>
 8004b44:	b672      	cpsid	i
 8004b46:	e7fe      	b.n	8004b46 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b48:	f001 fe64 	bl	8006814 <ulSetInterruptMaskFromISR>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <xQueueGenericSendFromISR+0x6e>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d12e      	bne.n	8004bc0 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b62:	2413      	movs	r4, #19
 8004b64:	193b      	adds	r3, r7, r4
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	2145      	movs	r1, #69	; 0x45
 8004b6a:	5c52      	ldrb	r2, [r2, r1]
 8004b6c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f95b 	bl	8004e30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b7a:	193b      	adds	r3, r7, r4
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	3301      	adds	r3, #1
 8004b82:	d111      	bne.n	8004ba8 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d016      	beq.n	8004bba <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	3324      	adds	r3, #36	; 0x24
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 feb5 	bl	8005900 <xTaskRemoveFromEventList>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d00f      	beq.n	8004bba <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00c      	beq.n	8004bba <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e008      	b.n	8004bba <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ba8:	2313      	movs	r3, #19
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	b259      	sxtb	r1, r3
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2245      	movs	r2, #69	; 0x45
 8004bb8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61fb      	str	r3, [r7, #28]
		{
 8004bbe:	e001      	b.n	8004bc4 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f001 fe2a 	bl	8006820 <vClearInterruptMaskFromISR>

	return xReturn;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b009      	add	sp, #36	; 0x24
 8004bd4:	bd90      	pop	{r4, r7, pc}

08004bd6 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b08a      	sub	sp, #40	; 0x28
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <xQueueReceive+0x1e>
 8004bf0:	b672      	cpsid	i
 8004bf2:	e7fe      	b.n	8004bf2 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <xQueueReceive+0x2c>
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <xQueueReceive+0x30>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <xQueueReceive+0x32>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <xQueueReceive+0x3a>
 8004c0c:	b672      	cpsid	i
 8004c0e:	e7fe      	b.n	8004c0e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c10:	f001 f80e 	bl	8005c30 <xTaskGetSchedulerState>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d102      	bne.n	8004c1e <xQueueReceive+0x48>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <xQueueReceive+0x4c>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <xQueueReceive+0x4e>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <xQueueReceive+0x56>
 8004c28:	b672      	cpsid	i
 8004c2a:	e7fe      	b.n	8004c2a <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c2c:	f001 fdc8 	bl	80067c0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01a      	beq.n	8004c72 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 f95f 	bl	8004f06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	1e5a      	subs	r2, r3, #1
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	3310      	adds	r3, #16
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 fe4f 	bl	8005900 <xTaskRemoveFromEventList>
 8004c62:	1e03      	subs	r3, r0, #0
 8004c64:	d001      	beq.n	8004c6a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c66:	f001 fd9b 	bl	80067a0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c6a:	f001 fdbb 	bl	80067e4 <vPortExitCritical>
				return pdPASS;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e062      	b.n	8004d38 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d103      	bne.n	8004c80 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c78:	f001 fdb4 	bl	80067e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e05b      	b.n	8004d38 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c86:	2314      	movs	r3, #20
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 fe94 	bl	80059b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c94:	f001 fda6 	bl	80067e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c98:	f000 fc42 	bl	8005520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c9c:	f001 fd90 	bl	80067c0 <vPortEnterCritical>
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2244      	movs	r2, #68	; 0x44
 8004ca4:	5c9b      	ldrb	r3, [r3, r2]
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	d103      	bne.n	8004cb4 <xQueueReceive+0xde>
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	2244      	movs	r2, #68	; 0x44
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	5499      	strb	r1, [r3, r2]
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2245      	movs	r2, #69	; 0x45
 8004cb8:	5c9b      	ldrb	r3, [r3, r2]
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	d103      	bne.n	8004cc8 <xQueueReceive+0xf2>
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2245      	movs	r2, #69	; 0x45
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	5499      	strb	r1, [r3, r2]
 8004cc8:	f001 fd8c 	bl	80067e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ccc:	1d3a      	adds	r2, r7, #4
 8004cce:	2314      	movs	r3, #20
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f000 fe83 	bl	80059e0 <xTaskCheckForTimeOut>
 8004cda:	1e03      	subs	r3, r0, #0
 8004cdc:	d11e      	bne.n	8004d1c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f994 	bl	800500e <prvIsQueueEmpty>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d011      	beq.n	8004d0e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	3324      	adds	r3, #36	; 0x24
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	0011      	movs	r1, r2
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f000 fdc0 	bl	8005878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 f929 	bl	8004f52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d00:	f000 fc1a 	bl	8005538 <xTaskResumeAll>
 8004d04:	1e03      	subs	r3, r0, #0
 8004d06:	d191      	bne.n	8004c2c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004d08:	f001 fd4a 	bl	80067a0 <vPortYield>
 8004d0c:	e78e      	b.n	8004c2c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 f91e 	bl	8004f52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d16:	f000 fc0f 	bl	8005538 <xTaskResumeAll>
 8004d1a:	e787      	b.n	8004c2c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f000 f917 	bl	8004f52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d24:	f000 fc08 	bl	8005538 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f000 f96f 	bl	800500e <prvIsQueueEmpty>
 8004d30:	1e03      	subs	r3, r0, #0
 8004d32:	d100      	bne.n	8004d36 <xQueueReceive+0x160>
 8004d34:	e77a      	b.n	8004c2c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d38:	0018      	movs	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b00a      	add	sp, #40	; 0x28
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b08b      	sub	sp, #44	; 0x2c
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <xQueueReceiveFromISR+0x1a>
 8004d56:	b672      	cpsid	i
 8004d58:	e7fe      	b.n	8004d58 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <xQueueReceiveFromISR+0x28>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <xQueueReceiveFromISR+0x2c>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <xQueueReceiveFromISR+0x2e>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <xQueueReceiveFromISR+0x36>
 8004d72:	b672      	cpsid	i
 8004d74:	e7fe      	b.n	8004d74 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d76:	f001 fd4d 	bl	8006814 <ulSetInterruptMaskFromISR>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d032      	beq.n	8004df0 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d8a:	2417      	movs	r4, #23
 8004d8c:	193b      	adds	r3, r7, r4
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	2144      	movs	r1, #68	; 0x44
 8004d92:	5c52      	ldrb	r2, [r2, r1]
 8004d94:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f000 f8b2 	bl	8004f06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004daa:	193b      	adds	r3, r7, r4
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	3301      	adds	r3, #1
 8004db2:	d111      	bne.n	8004dd8 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d016      	beq.n	8004dea <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 fd9d 	bl	8005900 <xTaskRemoveFromEventList>
 8004dc6:	1e03      	subs	r3, r0, #0
 8004dc8:	d00f      	beq.n	8004dea <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e008      	b.n	8004dea <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004dd8:	2317      	movs	r3, #23
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	3301      	adds	r3, #1
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	b259      	sxtb	r1, r3
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	2244      	movs	r2, #68	; 0x44
 8004de8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004dea:	2301      	movs	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
 8004dee:	e001      	b.n	8004df4 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	0018      	movs	r0, r3
 8004df8:	f001 fd12 	bl	8006820 <vClearInterruptMaskFromISR>

	return xReturn;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b00b      	add	sp, #44	; 0x2c
 8004e04:	bd90      	pop	{r4, r7, pc}

08004e06 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <uxQueueMessagesWaiting+0x12>
 8004e14:	b672      	cpsid	i
 8004e16:	e7fe      	b.n	8004e16 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 8004e18:	f001 fcd2 	bl	80067c0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004e22:	f001 fcdf 	bl	80067e4 <vPortExitCritical>

	return uxReturn;
 8004e26:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e28:	0018      	movs	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b004      	add	sp, #16
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10e      	bne.n	8004e6c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d14e      	bne.n	8004ef4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f000 ff04 	bl	8005c68 <xTaskPriorityDisinherit>
 8004e60:	0003      	movs	r3, r0
 8004e62:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	e043      	b.n	8004ef4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d119      	bne.n	8004ea6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6898      	ldr	r0, [r3, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	f001 ff07 	bl	8006c90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	18d2      	adds	r2, r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d32b      	bcc.n	8004ef4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	609a      	str	r2, [r3, #8]
 8004ea4:	e026      	b.n	8004ef4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	68d8      	ldr	r0, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	f001 feed 	bl	8006c90 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	425b      	negs	r3, r3
 8004ec0:	18d2      	adds	r2, r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d207      	bcs.n	8004ee2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	425b      	negs	r3, r3
 8004edc:	18d2      	adds	r2, r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d105      	bne.n	8004ef4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004efc:	697b      	ldr	r3, [r7, #20]
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b006      	add	sp, #24
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d018      	beq.n	8004f4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	18d2      	adds	r2, r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d303      	bcc.n	8004f3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68d9      	ldr	r1, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	0018      	movs	r0, r3
 8004f46:	f001 fea3 	bl	8006c90 <memcpy>
	}
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b002      	add	sp, #8
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f5a:	f001 fc31 	bl	80067c0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f5e:	230f      	movs	r3, #15
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	2145      	movs	r1, #69	; 0x45
 8004f66:	5c52      	ldrb	r2, [r2, r1]
 8004f68:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f6a:	e013      	b.n	8004f94 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d016      	beq.n	8004fa2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f000 fcc1 	bl	8005900 <xTaskRemoveFromEventList>
 8004f7e:	1e03      	subs	r3, r0, #0
 8004f80:	d001      	beq.n	8004f86 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f82:	f000 fd7d 	bl	8005a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f86:	210f      	movs	r1, #15
 8004f88:	187b      	adds	r3, r7, r1
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f94:	230f      	movs	r3, #15
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dce5      	bgt.n	8004f6c <prvUnlockQueue+0x1a>
 8004fa0:	e000      	b.n	8004fa4 <prvUnlockQueue+0x52>
					break;
 8004fa2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2245      	movs	r2, #69	; 0x45
 8004fa8:	21ff      	movs	r1, #255	; 0xff
 8004faa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004fac:	f001 fc1a 	bl	80067e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fb0:	f001 fc06 	bl	80067c0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fb4:	230e      	movs	r3, #14
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	2144      	movs	r1, #68	; 0x44
 8004fbc:	5c52      	ldrb	r2, [r2, r1]
 8004fbe:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc0:	e013      	b.n	8004fea <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3310      	adds	r3, #16
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f000 fc96 	bl	8005900 <xTaskRemoveFromEventList>
 8004fd4:	1e03      	subs	r3, r0, #0
 8004fd6:	d001      	beq.n	8004fdc <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004fd8:	f000 fd52 	bl	8005a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fdc:	210e      	movs	r1, #14
 8004fde:	187b      	adds	r3, r7, r1
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	187b      	adds	r3, r7, r1
 8004fe8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fea:	230e      	movs	r3, #14
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b25b      	sxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	dce5      	bgt.n	8004fc2 <prvUnlockQueue+0x70>
 8004ff6:	e000      	b.n	8004ffa <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004ff8:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2244      	movs	r2, #68	; 0x44
 8004ffe:	21ff      	movs	r1, #255	; 0xff
 8005000:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005002:	f001 fbef 	bl	80067e4 <vPortExitCritical>
}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	46bd      	mov	sp, r7
 800500a:	b004      	add	sp, #16
 800500c:	bd80      	pop	{r7, pc}

0800500e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005016:	f001 fbd3 	bl	80067c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005022:	2301      	movs	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e001      	b.n	800502c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800502c:	f001 fbda 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}

0800503a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005042:	f001 fbbd 	bl	80067c0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	429a      	cmp	r2, r3
 8005050:	d102      	bne.n	8005058 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005052:	2301      	movs	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	e001      	b.n	800505c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800505c:	f001 fbc2 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	0018      	movs	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	b004      	add	sp, #16
 8005068:	bd80      	pop	{r7, pc}

0800506a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <xQueueIsQueueFullFromISR+0x12>
 8005078:	b672      	cpsid	i
 800507a:	e7fe      	b.n	800507a <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	429a      	cmp	r2, r3
 8005086:	d102      	bne.n	800508e <xQueueIsQueueFullFromISR+0x24>
	{
		xReturn = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e001      	b.n	8005092 <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8005092:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b004      	add	sp, #16
 800509a:	bd80      	pop	{r7, pc}

0800509c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e015      	b.n	80050d8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <vQueueAddToRegistry+0x4c>)
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	00d2      	lsls	r2, r2, #3
 80050b2:	58d3      	ldr	r3, [r2, r3]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10c      	bne.n	80050d2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <vQueueAddToRegistry+0x4c>)
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	00d2      	lsls	r2, r2, #3
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050c2:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <vQueueAddToRegistry+0x4c>)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	18d3      	adds	r3, r2, r3
 80050ca:	3304      	adds	r3, #4
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80050d0:	e006      	b.n	80050e0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b07      	cmp	r3, #7
 80050dc:	d9e6      	bls.n	80050ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b004      	add	sp, #16
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200008b4 	.word	0x200008b4

080050ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050fc:	f001 fb60 	bl	80067c0 <vPortEnterCritical>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2244      	movs	r2, #68	; 0x44
 8005104:	5c9b      	ldrb	r3, [r3, r2]
 8005106:	b25b      	sxtb	r3, r3
 8005108:	3301      	adds	r3, #1
 800510a:	d103      	bne.n	8005114 <vQueueWaitForMessageRestricted+0x28>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2244      	movs	r2, #68	; 0x44
 8005110:	2100      	movs	r1, #0
 8005112:	5499      	strb	r1, [r3, r2]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2245      	movs	r2, #69	; 0x45
 8005118:	5c9b      	ldrb	r3, [r3, r2]
 800511a:	b25b      	sxtb	r3, r3
 800511c:	3301      	adds	r3, #1
 800511e:	d103      	bne.n	8005128 <vQueueWaitForMessageRestricted+0x3c>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2245      	movs	r2, #69	; 0x45
 8005124:	2100      	movs	r1, #0
 8005126:	5499      	strb	r1, [r3, r2]
 8005128:	f001 fb5c 	bl	80067e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 fbb9 	bl	80058b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	0018      	movs	r0, r3
 8005146:	f7ff ff04 	bl	8004f52 <prvUnlockQueue>
	}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b006      	add	sp, #24
 8005150:	bd80      	pop	{r7, pc}

08005152 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005152:	b590      	push	{r4, r7, lr}
 8005154:	b08d      	sub	sp, #52	; 0x34
 8005156:	af04      	add	r7, sp, #16
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <xTaskCreateStatic+0x18>
 8005166:	b672      	cpsid	i
 8005168:	e7fe      	b.n	8005168 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <xTaskCreateStatic+0x22>
 8005170:	b672      	cpsid	i
 8005172:	e7fe      	b.n	8005172 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005174:	2354      	movs	r3, #84	; 0x54
 8005176:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b54      	cmp	r3, #84	; 0x54
 800517c:	d001      	beq.n	8005182 <xTaskCreateStatic+0x30>
 800517e:	b672      	cpsid	i
 8005180:	e7fe      	b.n	8005180 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <xTaskCreateStatic+0x78>
 8005188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01d      	beq.n	80051ca <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005196:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2251      	movs	r2, #81	; 0x51
 800519c:	2102      	movs	r1, #2
 800519e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051a0:	683c      	ldr	r4, [r7, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	2300      	movs	r3, #0
 80051aa:	9303      	str	r3, [sp, #12]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	9302      	str	r3, [sp, #8]
 80051b0:	2318      	movs	r3, #24
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	0023      	movs	r3, r4
 80051bc:	f000 f858 	bl	8005270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f000 f8ce 	bl	8005364 <prvAddNewTaskToReadyList>
 80051c8:	e001      	b.n	80051ce <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ce:	69bb      	ldr	r3, [r7, #24]
	}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b009      	add	sp, #36	; 0x24
 80051d6:	bd90      	pop	{r4, r7, pc}

080051d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	b08d      	sub	sp, #52	; 0x34
 80051dc:	af04      	add	r7, sp, #16
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	1dbb      	adds	r3, r7, #6
 80051e6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e8:	1dbb      	adds	r3, r7, #6
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	0018      	movs	r0, r3
 80051f0:	f001 fb7e 	bl	80068f0 <pvPortMalloc>
 80051f4:	0003      	movs	r3, r0
 80051f6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d010      	beq.n	8005220 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051fe:	2054      	movs	r0, #84	; 0x54
 8005200:	f001 fb76 	bl	80068f0 <pvPortMalloc>
 8005204:	0003      	movs	r3, r0
 8005206:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
 8005214:	e006      	b.n	8005224 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	0018      	movs	r0, r3
 800521a:	f001 fc0f 	bl	8006a3c <vPortFree>
 800521e:	e001      	b.n	8005224 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01a      	beq.n	8005260 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2251      	movs	r2, #81	; 0x51
 800522e:	2100      	movs	r1, #0
 8005230:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005232:	1dbb      	adds	r3, r7, #6
 8005234:	881a      	ldrh	r2, [r3, #0]
 8005236:	683c      	ldr	r4, [r7, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	2300      	movs	r3, #0
 800523e:	9303      	str	r3, [sp, #12]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	9302      	str	r3, [sp, #8]
 8005244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	0023      	movs	r3, r4
 800524e:	f000 f80f 	bl	8005270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	0018      	movs	r0, r3
 8005256:	f000 f885 	bl	8005364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800525a:	2301      	movs	r3, #1
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e002      	b.n	8005266 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005260:	2301      	movs	r3, #1
 8005262:	425b      	negs	r3, r3
 8005264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005266:	69bb      	ldr	r3, [r7, #24]
	}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b009      	add	sp, #36	; 0x24
 800526e:	bd90      	pop	{r4, r7, pc}

08005270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4936      	ldr	r1, [pc, #216]	; (8005360 <prvInitialiseNewTask+0xf0>)
 8005286:	468c      	mov	ip, r1
 8005288:	4463      	add	r3, ip
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2207      	movs	r2, #7
 8005294:	4393      	bics	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2207      	movs	r2, #7
 800529c:	4013      	ands	r3, r2
 800529e:	d001      	beq.n	80052a4 <prvInitialiseNewTask+0x34>
 80052a0:	b672      	cpsid	i
 80052a2:	e7fe      	b.n	80052a2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e013      	b.n	80052d2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	18d3      	adds	r3, r2, r3
 80052b0:	7818      	ldrb	r0, [r3, #0]
 80052b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b4:	2134      	movs	r1, #52	; 0x34
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	18d3      	adds	r3, r2, r3
 80052ba:	185b      	adds	r3, r3, r1
 80052bc:	1c02      	adds	r2, r0, #0
 80052be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d006      	beq.n	80052da <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3301      	adds	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b0f      	cmp	r3, #15
 80052d6:	d9e8      	bls.n	80052aa <prvInitialiseNewTask+0x3a>
 80052d8:	e000      	b.n	80052dc <prvInitialiseNewTask+0x6c>
		{
			break;
 80052da:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2243      	movs	r2, #67	; 0x43
 80052e0:	2100      	movs	r1, #0
 80052e2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d901      	bls.n	80052ee <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052ea:	2306      	movs	r3, #6
 80052ec:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	2200      	movs	r2, #0
 80052fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	3304      	adds	r3, #4
 8005304:	0018      	movs	r0, r3
 8005306:	f7ff f9af 	bl	8004668 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	3318      	adds	r3, #24
 800530e:	0018      	movs	r0, r3
 8005310:	f7ff f9aa 	bl	8004668 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005318:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2207      	movs	r2, #7
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005328:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	2200      	movs	r2, #0
 800532e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	2250      	movs	r2, #80	; 0x50
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	0018      	movs	r0, r3
 8005340:	f001 f9a0 	bl	8006684 <pxPortInitialiseStack>
 8005344:	0002      	movs	r2, r0
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b006      	add	sp, #24
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	3fffffff 	.word	0x3fffffff

08005364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800536c:	f001 fa28 	bl	80067c0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005370:	4b28      	ldr	r3, [pc, #160]	; (8005414 <prvAddNewTaskToReadyList+0xb0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	4b27      	ldr	r3, [pc, #156]	; (8005414 <prvAddNewTaskToReadyList+0xb0>)
 8005378:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800537a:	4b27      	ldr	r3, [pc, #156]	; (8005418 <prvAddNewTaskToReadyList+0xb4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005382:	4b25      	ldr	r3, [pc, #148]	; (8005418 <prvAddNewTaskToReadyList+0xb4>)
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005388:	4b22      	ldr	r3, [pc, #136]	; (8005414 <prvAddNewTaskToReadyList+0xb0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d110      	bne.n	80053b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005390:	f000 fb90 	bl	8005ab4 <prvInitialiseTaskLists>
 8005394:	e00d      	b.n	80053b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005396:	4b21      	ldr	r3, [pc, #132]	; (800541c <prvAddNewTaskToReadyList+0xb8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <prvAddNewTaskToReadyList+0xb4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d802      	bhi.n	80053b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <prvAddNewTaskToReadyList+0xb4>)
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053b2:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <prvAddNewTaskToReadyList+0xbc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <prvAddNewTaskToReadyList+0xbc>)
 80053ba:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4b18      	ldr	r3, [pc, #96]	; (8005424 <prvAddNewTaskToReadyList+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d903      	bls.n	80053d0 <prvAddNewTaskToReadyList+0x6c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	4b15      	ldr	r3, [pc, #84]	; (8005424 <prvAddNewTaskToReadyList+0xc0>)
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d4:	0013      	movs	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4a12      	ldr	r2, [pc, #72]	; (8005428 <prvAddNewTaskToReadyList+0xc4>)
 80053de:	189a      	adds	r2, r3, r2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	0019      	movs	r1, r3
 80053e6:	0010      	movs	r0, r2
 80053e8:	f7ff f949 	bl	800467e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053ec:	f001 f9fa 	bl	80067e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053f0:	4b0a      	ldr	r3, [pc, #40]	; (800541c <prvAddNewTaskToReadyList+0xb8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <prvAddNewTaskToReadyList+0xb4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	429a      	cmp	r2, r3
 8005404:	d201      	bcs.n	800540a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005406:	f001 f9cb 	bl	80067a0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b002      	add	sp, #8
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	200009f4 	.word	0x200009f4
 8005418:	200008f4 	.word	0x200008f4
 800541c:	20000a00 	.word	0x20000a00
 8005420:	20000a10 	.word	0x20000a10
 8005424:	200009fc 	.word	0x200009fc
 8005428:	200008f8 	.word	0x200008f8

0800542c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d010      	beq.n	8005460 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <vTaskDelay+0x48>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <vTaskDelay+0x1e>
 8005446:	b672      	cpsid	i
 8005448:	e7fe      	b.n	8005448 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800544a:	f000 f869 	bl	8005520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2100      	movs	r1, #0
 8005452:	0018      	movs	r0, r3
 8005454:	f000 fdee 	bl	8006034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005458:	f000 f86e 	bl	8005538 <xTaskResumeAll>
 800545c:	0003      	movs	r3, r0
 800545e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005466:	f001 f99b 	bl	80067a0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	20000a1c 	.word	0x20000a1c

08005478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005486:	003a      	movs	r2, r7
 8005488:	1d39      	adds	r1, r7, #4
 800548a:	2308      	movs	r3, #8
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	0018      	movs	r0, r3
 8005490:	f7fa fee2 	bl	8000258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005494:	683c      	ldr	r4, [r7, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	491b      	ldr	r1, [pc, #108]	; (8005508 <vTaskStartScheduler+0x90>)
 800549c:	481b      	ldr	r0, [pc, #108]	; (800550c <vTaskStartScheduler+0x94>)
 800549e:	9202      	str	r2, [sp, #8]
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	2300      	movs	r3, #0
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	0022      	movs	r2, r4
 80054aa:	f7ff fe52 	bl	8005152 <xTaskCreateStatic>
 80054ae:	0002      	movs	r2, r0
 80054b0:	4b17      	ldr	r3, [pc, #92]	; (8005510 <vTaskStartScheduler+0x98>)
 80054b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054b4:	4b16      	ldr	r3, [pc, #88]	; (8005510 <vTaskStartScheduler+0x98>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054bc:	2301      	movs	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e001      	b.n	80054c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d103      	bne.n	80054d4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80054cc:	f000 fe06 	bl	80060dc <xTimerCreateTimerTask>
 80054d0:	0003      	movs	r3, r0
 80054d2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10d      	bne.n	80054f6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80054da:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054dc:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <vTaskStartScheduler+0x9c>)
 80054de:	2201      	movs	r2, #1
 80054e0:	4252      	negs	r2, r2
 80054e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <vTaskStartScheduler+0xa0>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054ea:	4b0c      	ldr	r3, [pc, #48]	; (800551c <vTaskStartScheduler+0xa4>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054f0:	f001 f932 	bl	8006758 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054f4:	e004      	b.n	8005500 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3301      	adds	r3, #1
 80054fa:	d101      	bne.n	8005500 <vTaskStartScheduler+0x88>
 80054fc:	b672      	cpsid	i
 80054fe:	e7fe      	b.n	80054fe <vTaskStartScheduler+0x86>
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b005      	add	sp, #20
 8005506:	bd90      	pop	{r4, r7, pc}
 8005508:	08007984 	.word	0x08007984
 800550c:	08005a95 	.word	0x08005a95
 8005510:	20000a18 	.word	0x20000a18
 8005514:	20000a14 	.word	0x20000a14
 8005518:	20000a00 	.word	0x20000a00
 800551c:	200009f8 	.word	0x200009f8

08005520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <vTaskSuspendAll+0x14>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	4b02      	ldr	r3, [pc, #8]	; (8005534 <vTaskSuspendAll+0x14>)
 800552c:	601a      	str	r2, [r3, #0]
}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000a1c 	.word	0x20000a1c

08005538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005546:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <xTaskResumeAll+0xf8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <xTaskResumeAll+0x1a>
 800554e:	b672      	cpsid	i
 8005550:	e7fe      	b.n	8005550 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005552:	f001 f935 	bl	80067c0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005556:	4b36      	ldr	r3, [pc, #216]	; (8005630 <xTaskResumeAll+0xf8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	4b34      	ldr	r3, [pc, #208]	; (8005630 <xTaskResumeAll+0xf8>)
 800555e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005560:	4b33      	ldr	r3, [pc, #204]	; (8005630 <xTaskResumeAll+0xf8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d15b      	bne.n	8005620 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005568:	4b32      	ldr	r3, [pc, #200]	; (8005634 <xTaskResumeAll+0xfc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d057      	beq.n	8005620 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005570:	e02f      	b.n	80055d2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005572:	4b31      	ldr	r3, [pc, #196]	; (8005638 <xTaskResumeAll+0x100>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3318      	adds	r3, #24
 800557e:	0018      	movs	r0, r3
 8005580:	f7ff f8d5 	bl	800472e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3304      	adds	r3, #4
 8005588:	0018      	movs	r0, r3
 800558a:	f7ff f8d0 	bl	800472e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	4b2a      	ldr	r3, [pc, #168]	; (800563c <xTaskResumeAll+0x104>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d903      	bls.n	80055a2 <xTaskResumeAll+0x6a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <xTaskResumeAll+0x104>)
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a6:	0013      	movs	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4a24      	ldr	r2, [pc, #144]	; (8005640 <xTaskResumeAll+0x108>)
 80055b0:	189a      	adds	r2, r3, r2
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3304      	adds	r3, #4
 80055b6:	0019      	movs	r1, r3
 80055b8:	0010      	movs	r0, r2
 80055ba:	f7ff f860 	bl	800467e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	4b20      	ldr	r3, [pc, #128]	; (8005644 <xTaskResumeAll+0x10c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d302      	bcc.n	80055d2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <xTaskResumeAll+0x110>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <xTaskResumeAll+0x100>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1cb      	bne.n	8005572 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055e0:	f000 fb02 	bl	8005be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055e4:	4b19      	ldr	r3, [pc, #100]	; (800564c <xTaskResumeAll+0x114>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00f      	beq.n	8005610 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055f0:	f000 f83c 	bl	800566c <xTaskIncrementTick>
 80055f4:	1e03      	subs	r3, r0, #0
 80055f6:	d002      	beq.n	80055fe <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80055f8:	4b13      	ldr	r3, [pc, #76]	; (8005648 <xTaskResumeAll+0x110>)
 80055fa:	2201      	movs	r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3b01      	subs	r3, #1
 8005602:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f2      	bne.n	80055f0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <xTaskResumeAll+0x114>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005610:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <xTaskResumeAll+0x110>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005618:	2301      	movs	r3, #1
 800561a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800561c:	f001 f8c0 	bl	80067a0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005620:	f001 f8e0 	bl	80067e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005624:	68bb      	ldr	r3, [r7, #8]
}
 8005626:	0018      	movs	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	b004      	add	sp, #16
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	20000a1c 	.word	0x20000a1c
 8005634:	200009f4 	.word	0x200009f4
 8005638:	200009b4 	.word	0x200009b4
 800563c:	200009fc 	.word	0x200009fc
 8005640:	200008f8 	.word	0x200008f8
 8005644:	200008f4 	.word	0x200008f4
 8005648:	20000a08 	.word	0x20000a08
 800564c:	20000a04 	.word	0x20000a04

08005650 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005656:	4b04      	ldr	r3, [pc, #16]	; (8005668 <xTaskGetTickCount+0x18>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800565c:	687b      	ldr	r3, [r7, #4]
}
 800565e:	0018      	movs	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	b002      	add	sp, #8
 8005664:	bd80      	pop	{r7, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	200009f8 	.word	0x200009f8

0800566c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005676:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <xTaskIncrementTick+0x13c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d000      	beq.n	8005680 <xTaskIncrementTick+0x14>
 800567e:	e083      	b.n	8005788 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005680:	4b4a      	ldr	r3, [pc, #296]	; (80057ac <xTaskIncrementTick+0x140>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005688:	4b48      	ldr	r3, [pc, #288]	; (80057ac <xTaskIncrementTick+0x140>)
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d117      	bne.n	80056c4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005694:	4b46      	ldr	r3, [pc, #280]	; (80057b0 <xTaskIncrementTick+0x144>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <xTaskIncrementTick+0x36>
 800569e:	b672      	cpsid	i
 80056a0:	e7fe      	b.n	80056a0 <xTaskIncrementTick+0x34>
 80056a2:	4b43      	ldr	r3, [pc, #268]	; (80057b0 <xTaskIncrementTick+0x144>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <xTaskIncrementTick+0x148>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <xTaskIncrementTick+0x144>)
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	4b40      	ldr	r3, [pc, #256]	; (80057b4 <xTaskIncrementTick+0x148>)
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	4b3e      	ldr	r3, [pc, #248]	; (80057b8 <xTaskIncrementTick+0x14c>)
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	f000 fa92 	bl	8005be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056c4:	4b3d      	ldr	r3, [pc, #244]	; (80057bc <xTaskIncrementTick+0x150>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d34e      	bcc.n	800576c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ce:	4b38      	ldr	r3, [pc, #224]	; (80057b0 <xTaskIncrementTick+0x144>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <xTaskIncrementTick+0x70>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <xTaskIncrementTick+0x72>
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <xTaskIncrementTick+0x150>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	4252      	negs	r2, r2
 80056e8:	601a      	str	r2, [r3, #0]
					break;
 80056ea:	e03f      	b.n	800576c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056ec:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <xTaskIncrementTick+0x144>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d203      	bcs.n	800570c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <xTaskIncrementTick+0x150>)
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
						break;
 800570a:	e02f      	b.n	800576c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	3304      	adds	r3, #4
 8005710:	0018      	movs	r0, r3
 8005712:	f7ff f80c 	bl	800472e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	3318      	adds	r3, #24
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff f803 	bl	800472e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572c:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <xTaskIncrementTick+0x154>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d903      	bls.n	800573c <xTaskIncrementTick+0xd0>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <xTaskIncrementTick+0x154>)
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	0013      	movs	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	189b      	adds	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <xTaskIncrementTick+0x158>)
 800574a:	189a      	adds	r2, r3, r2
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	3304      	adds	r3, #4
 8005750:	0019      	movs	r1, r3
 8005752:	0010      	movs	r0, r2
 8005754:	f7fe ff93 	bl	800467e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575c:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <xTaskIncrementTick+0x15c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d3b3      	bcc.n	80056ce <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005766:	2301      	movs	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576a:	e7b0      	b.n	80056ce <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800576c:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <xTaskIncrementTick+0x15c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	4914      	ldr	r1, [pc, #80]	; (80057c4 <xTaskIncrementTick+0x158>)
 8005774:	0013      	movs	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	189b      	adds	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	585b      	ldr	r3, [r3, r1]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d907      	bls.n	8005792 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005782:	2301      	movs	r3, #1
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e004      	b.n	8005792 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005788:	4b10      	ldr	r3, [pc, #64]	; (80057cc <xTaskIncrementTick+0x160>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <xTaskIncrementTick+0x160>)
 8005790:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <xTaskIncrementTick+0x164>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800579a:	2301      	movs	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800579e:	697b      	ldr	r3, [r7, #20]
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b006      	add	sp, #24
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000a1c 	.word	0x20000a1c
 80057ac:	200009f8 	.word	0x200009f8
 80057b0:	200009ac 	.word	0x200009ac
 80057b4:	200009b0 	.word	0x200009b0
 80057b8:	20000a0c 	.word	0x20000a0c
 80057bc:	20000a14 	.word	0x20000a14
 80057c0:	200009fc 	.word	0x200009fc
 80057c4:	200008f8 	.word	0x200008f8
 80057c8:	200008f4 	.word	0x200008f4
 80057cc:	20000a04 	.word	0x20000a04
 80057d0:	20000a08 	.word	0x20000a08

080057d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <vTaskSwitchContext+0x90>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057e2:	4b21      	ldr	r3, [pc, #132]	; (8005868 <vTaskSwitchContext+0x94>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057e8:	e037      	b.n	800585a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80057ea:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <vTaskSwitchContext+0x94>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057f0:	4b1e      	ldr	r3, [pc, #120]	; (800586c <vTaskSwitchContext+0x98>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	e007      	b.n	8005808 <vTaskSwitchContext+0x34>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <vTaskSwitchContext+0x2e>
 80057fe:	b672      	cpsid	i
 8005800:	e7fe      	b.n	8005800 <vTaskSwitchContext+0x2c>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	4919      	ldr	r1, [pc, #100]	; (8005870 <vTaskSwitchContext+0x9c>)
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	0013      	movs	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	189b      	adds	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	585b      	ldr	r3, [r3, r1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ee      	beq.n	80057f8 <vTaskSwitchContext+0x24>
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	0013      	movs	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	189b      	adds	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4a12      	ldr	r2, [pc, #72]	; (8005870 <vTaskSwitchContext+0x9c>)
 8005826:	189b      	adds	r3, r3, r2
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	3308      	adds	r3, #8
 800583c:	429a      	cmp	r2, r3
 800583e:	d104      	bne.n	800584a <vTaskSwitchContext+0x76>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <vTaskSwitchContext+0xa0>)
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <vTaskSwitchContext+0x98>)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	b002      	add	sp, #8
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	20000a1c 	.word	0x20000a1c
 8005868:	20000a08 	.word	0x20000a08
 800586c:	200009fc 	.word	0x200009fc
 8005870:	200008f8 	.word	0x200008f8
 8005874:	200008f4 	.word	0x200008f4

08005878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <vTaskPlaceOnEventList+0x14>
 8005888:	b672      	cpsid	i
 800588a:	e7fe      	b.n	800588a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <vTaskPlaceOnEventList+0x38>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3318      	adds	r3, #24
 8005892:	001a      	movs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	0011      	movs	r1, r2
 8005898:	0018      	movs	r0, r3
 800589a:	f7fe ff12 	bl	80046c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2101      	movs	r1, #1
 80058a2:	0018      	movs	r0, r3
 80058a4:	f000 fbc6 	bl	8006034 <prvAddCurrentTaskToDelayedList>
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b002      	add	sp, #8
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200008f4 	.word	0x200008f4

080058b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <vTaskPlaceOnEventListRestricted+0x16>
 80058c6:	b672      	cpsid	i
 80058c8:	e7fe      	b.n	80058c8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <vTaskPlaceOnEventListRestricted+0x48>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3318      	adds	r3, #24
 80058d0:	001a      	movs	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	0011      	movs	r1, r2
 80058d6:	0018      	movs	r0, r3
 80058d8:	f7fe fed1 	bl	800467e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80058e2:	2301      	movs	r3, #1
 80058e4:	425b      	negs	r3, r3
 80058e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	0011      	movs	r1, r2
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 fba0 	bl	8006034 <prvAddCurrentTaskToDelayedList>
	}
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b004      	add	sp, #16
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200008f4 	.word	0x200008f4

08005900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <xTaskRemoveFromEventList+0x1a>
 8005916:	b672      	cpsid	i
 8005918:	e7fe      	b.n	8005918 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	3318      	adds	r3, #24
 800591e:	0018      	movs	r0, r3
 8005920:	f7fe ff05 	bl	800472e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005924:	4b1e      	ldr	r3, [pc, #120]	; (80059a0 <xTaskRemoveFromEventList+0xa0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11d      	bne.n	8005968 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	3304      	adds	r3, #4
 8005930:	0018      	movs	r0, r3
 8005932:	f7fe fefc 	bl	800472e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <xTaskRemoveFromEventList+0xa4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d903      	bls.n	800594a <xTaskRemoveFromEventList+0x4a>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005946:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <xTaskRemoveFromEventList+0xa4>)
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594e:	0013      	movs	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	189b      	adds	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <xTaskRemoveFromEventList+0xa8>)
 8005958:	189a      	adds	r2, r3, r2
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	3304      	adds	r3, #4
 800595e:	0019      	movs	r1, r3
 8005960:	0010      	movs	r0, r2
 8005962:	f7fe fe8c 	bl	800467e <vListInsertEnd>
 8005966:	e007      	b.n	8005978 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3318      	adds	r3, #24
 800596c:	001a      	movs	r2, r3
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <xTaskRemoveFromEventList+0xac>)
 8005970:	0011      	movs	r1, r2
 8005972:	0018      	movs	r0, r3
 8005974:	f7fe fe83 	bl	800467e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <xTaskRemoveFromEventList+0xb0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	429a      	cmp	r2, r3
 8005984:	d905      	bls.n	8005992 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <xTaskRemoveFromEventList+0xb4>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e001      	b.n	8005996 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	0018      	movs	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	b004      	add	sp, #16
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000a1c 	.word	0x20000a1c
 80059a4:	200009fc 	.word	0x200009fc
 80059a8:	200008f8 	.word	0x200008f8
 80059ac:	200009b4 	.word	0x200009b4
 80059b0:	200008f4 	.word	0x200008f4
 80059b4:	20000a08 	.word	0x20000a08

080059b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <vTaskInternalSetTimeOutState+0x20>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <vTaskInternalSetTimeOutState+0x24>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	605a      	str	r2, [r3, #4]
}
 80059d0:	46c0      	nop			; (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b002      	add	sp, #8
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000a0c 	.word	0x20000a0c
 80059dc:	200009f8 	.word	0x200009f8

080059e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <xTaskCheckForTimeOut+0x14>
 80059f0:	b672      	cpsid	i
 80059f2:	e7fe      	b.n	80059f2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xTaskCheckForTimeOut+0x1e>
 80059fa:	b672      	cpsid	i
 80059fc:	e7fe      	b.n	80059fc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80059fe:	f000 fedf 	bl	80067c0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a02:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <xTaskCheckForTimeOut+0x98>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	d102      	bne.n	8005a20 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e024      	b.n	8005a6a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b15      	ldr	r3, [pc, #84]	; (8005a7c <xTaskCheckForTimeOut+0x9c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d007      	beq.n	8005a3c <xTaskCheckForTimeOut+0x5c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a36:	2301      	movs	r3, #1
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e016      	b.n	8005a6a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d20c      	bcs.n	8005a60 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad2      	subs	r2, r2, r3
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7ff ffaf 	bl	80059b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	e004      	b.n	8005a6a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a66:	2301      	movs	r3, #1
 8005a68:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005a6a:	f000 febb 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b006      	add	sp, #24
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	200009f8 	.word	0x200009f8
 8005a7c:	20000a0c 	.word	0x20000a0c

08005a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a84:	4b02      	ldr	r3, [pc, #8]	; (8005a90 <vTaskMissedYield+0x10>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000a08 	.word	0x20000a08

08005a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a9c:	f000 f84e 	bl	8005b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <prvIdleTask+0x1c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d9f9      	bls.n	8005a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005aa8:	f000 fe7a 	bl	80067a0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005aac:	e7f6      	b.n	8005a9c <prvIdleTask+0x8>
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	200008f8 	.word	0x200008f8

08005ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aba:	2300      	movs	r3, #0
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	e00c      	b.n	8005ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	0013      	movs	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <prvInitialiseTaskLists+0x68>)
 8005acc:	189b      	adds	r3, r3, r2
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f7fe fdac 	bl	800462c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b06      	cmp	r3, #6
 8005ade:	d9ef      	bls.n	8005ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <prvInitialiseTaskLists+0x6c>)
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7fe fda2 	bl	800462c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <prvInitialiseTaskLists+0x70>)
 8005aea:	0018      	movs	r0, r3
 8005aec:	f7fe fd9e 	bl	800462c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005af0:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <prvInitialiseTaskLists+0x74>)
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7fe fd9a 	bl	800462c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005af8:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <prvInitialiseTaskLists+0x78>)
 8005afa:	0018      	movs	r0, r3
 8005afc:	f7fe fd96 	bl	800462c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <prvInitialiseTaskLists+0x7c>)
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fe fd92 	bl	800462c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <prvInitialiseTaskLists+0x80>)
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <prvInitialiseTaskLists+0x6c>)
 8005b0c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <prvInitialiseTaskLists+0x84>)
 8005b10:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <prvInitialiseTaskLists+0x70>)
 8005b12:	601a      	str	r2, [r3, #0]
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	200008f8 	.word	0x200008f8
 8005b20:	20000984 	.word	0x20000984
 8005b24:	20000998 	.word	0x20000998
 8005b28:	200009b4 	.word	0x200009b4
 8005b2c:	200009c8 	.word	0x200009c8
 8005b30:	200009e0 	.word	0x200009e0
 8005b34:	200009ac 	.word	0x200009ac
 8005b38:	200009b0 	.word	0x200009b0

08005b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b42:	e01a      	b.n	8005b7a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005b44:	f000 fe3c 	bl	80067c0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b48:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <prvCheckTasksWaitingTermination+0x50>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	0018      	movs	r0, r3
 8005b56:	f7fe fdea 	bl	800472e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <prvCheckTasksWaitingTermination+0x54>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1e5a      	subs	r2, r3, #1
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <prvCheckTasksWaitingTermination+0x54>)
 8005b62:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <prvCheckTasksWaitingTermination+0x58>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	1e5a      	subs	r2, r3, #1
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <prvCheckTasksWaitingTermination+0x58>)
 8005b6c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005b6e:	f000 fe39 	bl	80067e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f000 f80f 	bl	8005b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <prvCheckTasksWaitingTermination+0x58>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e0      	bne.n	8005b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	200009c8 	.word	0x200009c8
 8005b90:	200009f4 	.word	0x200009f4
 8005b94:	200009dc 	.word	0x200009dc

08005b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2251      	movs	r2, #81	; 0x51
 8005ba4:	5c9b      	ldrb	r3, [r3, r2]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f000 ff44 	bl	8006a3c <vPortFree>
				vPortFree( pxTCB );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f000 ff40 	bl	8006a3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bbc:	e010      	b.n	8005be0 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2251      	movs	r2, #81	; 0x51
 8005bc2:	5c9b      	ldrb	r3, [r3, r2]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d104      	bne.n	8005bd2 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 ff36 	bl	8006a3c <vPortFree>
	}
 8005bd0:	e006      	b.n	8005be0 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2251      	movs	r2, #81	; 0x51
 8005bd6:	5c9b      	ldrb	r3, [r3, r2]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d001      	beq.n	8005be0 <prvDeleteTCB+0x48>
 8005bdc:	b672      	cpsid	i
 8005bde:	e7fe      	b.n	8005bde <prvDeleteTCB+0x46>
	}
 8005be0:	46c0      	nop			; (mov r8, r8)
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b002      	add	sp, #8
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <prvResetNextTaskUnblockTime+0x40>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <prvResetNextTaskUnblockTime+0x14>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <prvResetNextTaskUnblockTime+0x16>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c02:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <prvResetNextTaskUnblockTime+0x44>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	4252      	negs	r2, r2
 8005c08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c0a:	e008      	b.n	8005c1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <prvResetNextTaskUnblockTime+0x40>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <prvResetNextTaskUnblockTime+0x44>)
 8005c1c:	601a      	str	r2, [r3, #0]
}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b002      	add	sp, #8
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	200009ac 	.word	0x200009ac
 8005c2c:	20000a14 	.word	0x20000a14

08005c30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c36:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <xTaskGetSchedulerState+0x30>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	607b      	str	r3, [r7, #4]
 8005c42:	e008      	b.n	8005c56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c44:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <xTaskGetSchedulerState+0x34>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d102      	bne.n	8005c52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	607b      	str	r3, [r7, #4]
 8005c50:	e001      	b.n	8005c56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c52:	2300      	movs	r3, #0
 8005c54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c56:	687b      	ldr	r3, [r7, #4]
	}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b002      	add	sp, #8
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000a00 	.word	0x20000a00
 8005c64:	20000a1c 	.word	0x20000a1c

08005c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d044      	beq.n	8005d08 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c7e:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <xTaskPriorityDisinherit+0xac>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <xTaskPriorityDisinherit+0x24>
 8005c88:	b672      	cpsid	i
 8005c8a:	e7fe      	b.n	8005c8a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <xTaskPriorityDisinherit+0x30>
 8005c94:	b672      	cpsid	i
 8005c96:	e7fe      	b.n	8005c96 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d02c      	beq.n	8005d08 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d128      	bne.n	8005d08 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fe fd37 	bl	800472e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	2207      	movs	r2, #7
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <xTaskPriorityDisinherit+0xb0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d903      	bls.n	8005ce8 <xTaskPriorityDisinherit+0x80>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <xTaskPriorityDisinherit+0xb0>)
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	0013      	movs	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	189b      	adds	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <xTaskPriorityDisinherit+0xb4>)
 8005cf6:	189a      	adds	r2, r3, r2
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	0010      	movs	r0, r2
 8005d00:	f7fe fcbd 	bl	800467e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d04:	2301      	movs	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d08:	68fb      	ldr	r3, [r7, #12]
	}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b004      	add	sp, #16
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	200008f4 	.word	0x200008f4
 8005d18:	200009fc 	.word	0x200009fc
 8005d1c:	200008f8 	.word	0x200008f8

08005d20 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005d2e:	f000 fd47 	bl	80067c0 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d32:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <xTaskNotifyWait+0xa4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2250      	movs	r2, #80	; 0x50
 8005d38:	5c9b      	ldrb	r3, [r3, r2]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d015      	beq.n	8005d6c <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005d40:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <xTaskNotifyWait+0xa4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	43c9      	mvns	r1, r1
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005d4e:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <xTaskNotifyWait+0xa4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2250      	movs	r2, #80	; 0x50
 8005d54:	2101      	movs	r1, #1
 8005d56:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2101      	movs	r1, #1
 8005d62:	0018      	movs	r0, r3
 8005d64:	f000 f966 	bl	8006034 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005d68:	f000 fd1a 	bl	80067a0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005d6c:	f000 fd3a 	bl	80067e4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005d70:	f000 fd26 	bl	80067c0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <xTaskNotifyWait+0xa4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d84:	4b0f      	ldr	r3, [pc, #60]	; (8005dc4 <xTaskNotifyWait+0xa4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2250      	movs	r2, #80	; 0x50
 8005d8a:	5c9b      	ldrb	r3, [r3, r2]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d002      	beq.n	8005d98 <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e008      	b.n	8005daa <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <xTaskNotifyWait+0xa4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	43c9      	mvns	r1, r1
 8005da2:	400a      	ands	r2, r1
 8005da4:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <xTaskNotifyWait+0xa4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2250      	movs	r2, #80	; 0x50
 8005db0:	2100      	movs	r1, #0
 8005db2:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8005db4:	f000 fd16 	bl	80067e4 <vPortExitCritical>

		return xReturn;
 8005db8:	697b      	ldr	r3, [r7, #20]
	}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b006      	add	sp, #24
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	200008f4 	.word	0x200008f4

08005dc8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	1dfb      	adds	r3, r7, #7
 8005dd6:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <xTaskGenericNotify+0x1e>
 8005de2:	b672      	cpsid	i
 8005de4:	e7fe      	b.n	8005de4 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8005dea:	f000 fce9 	bl	80067c0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005dfc:	2317      	movs	r3, #23
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	2150      	movs	r1, #80	; 0x50
 8005e04:	5c52      	ldrb	r2, [r2, r1]
 8005e06:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	2250      	movs	r2, #80	; 0x50
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005e10:	1dfb      	adds	r3, r7, #7
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d822      	bhi.n	8005e5e <xTaskGenericNotify+0x96>
 8005e18:	009a      	lsls	r2, r3, #2
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <xTaskGenericNotify+0x108>)
 8005e1c:	18d3      	adds	r3, r2, r3
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e2e:	e016      	b.n	8005e5e <xTaskGenericNotify+0x96>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e3a:	e010      	b.n	8005e5e <xTaskGenericNotify+0x96>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e42:	e00c      	b.n	8005e5e <xTaskGenericNotify+0x96>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e44:	2317      	movs	r3, #23
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d003      	beq.n	8005e56 <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005e54:	e003      	b.n	8005e5e <xTaskGenericNotify+0x96>
						xReturn = pdFAIL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
					break;
 8005e5a:	e000      	b.n	8005e5e <xTaskGenericNotify+0x96>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 8005e5c:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e5e:	2317      	movs	r3, #23
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d12b      	bne.n	8005ec0 <xTaskGenericNotify+0xf8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7fe fc5e 	bl	800472e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <xTaskGenericNotify+0x10c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d903      	bls.n	8005e86 <xTaskGenericNotify+0xbe>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e82:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <xTaskGenericNotify+0x10c>)
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	0013      	movs	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	189b      	adds	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4a11      	ldr	r2, [pc, #68]	; (8005ed8 <xTaskGenericNotify+0x110>)
 8005e94:	189a      	adds	r2, r3, r2
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	0019      	movs	r1, r3
 8005e9c:	0010      	movs	r0, r2
 8005e9e:	f7fe fbee 	bl	800467e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <xTaskGenericNotify+0xe6>
 8005eaa:	b672      	cpsid	i
 8005eac:	e7fe      	b.n	8005eac <xTaskGenericNotify+0xe4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <xTaskGenericNotify+0x114>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d901      	bls.n	8005ec0 <xTaskGenericNotify+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005ebc:	f000 fc70 	bl	80067a0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005ec0:	f000 fc90 	bl	80067e4 <vPortExitCritical>

		return xReturn;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
	}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b008      	add	sp, #32
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	080079d4 	.word	0x080079d4
 8005ed4:	200009fc 	.word	0x200009fc
 8005ed8:	200008f8 	.word	0x200008f8
 8005edc:	200008f4 	.word	0x200008f4

08005ee0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	1dfb      	adds	r3, r7, #7
 8005eee:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <xTaskGenericNotifyFromISR+0x1e>
 8005efa:	b672      	cpsid	i
 8005efc:	e7fe      	b.n	8005efc <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f02:	f000 fc87 	bl	8006814 <ulSetInterruptMaskFromISR>
 8005f06:	0003      	movs	r3, r0
 8005f08:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f18:	2313      	movs	r3, #19
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	2150      	movs	r1, #80	; 0x50
 8005f20:	5c52      	ldrb	r2, [r2, r1]
 8005f22:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2250      	movs	r2, #80	; 0x50
 8005f28:	2102      	movs	r1, #2
 8005f2a:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8005f2c:	1dfb      	adds	r3, r7, #7
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d822      	bhi.n	8005f7a <xTaskGenericNotifyFromISR+0x9a>
 8005f34:	009a      	lsls	r2, r3, #2
 8005f36:	4b38      	ldr	r3, [pc, #224]	; (8006018 <xTaskGenericNotifyFromISR+0x138>)
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005f4a:	e016      	b.n	8005f7a <xTaskGenericNotifyFromISR+0x9a>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005f56:	e010      	b.n	8005f7a <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005f5e:	e00c      	b.n	8005f7a <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005f60:	2313      	movs	r3, #19
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d003      	beq.n	8005f72 <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005f70:	e003      	b.n	8005f7a <xTaskGenericNotifyFromISR+0x9a>
						xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
					break;
 8005f76:	e000      	b.n	8005f7a <xTaskGenericNotifyFromISR+0x9a>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 8005f78:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f7a:	2313      	movs	r3, #19
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d140      	bne.n	8006006 <xTaskGenericNotifyFromISR+0x126>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <xTaskGenericNotifyFromISR+0xb0>
 8005f8c:	b672      	cpsid	i
 8005f8e:	e7fe      	b.n	8005f8e <xTaskGenericNotifyFromISR+0xae>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f90:	4b22      	ldr	r3, [pc, #136]	; (800601c <xTaskGenericNotifyFromISR+0x13c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11d      	bne.n	8005fd4 <xTaskGenericNotifyFromISR+0xf4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7fe fbc6 	bl	800472e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <xTaskGenericNotifyFromISR+0x140>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d903      	bls.n	8005fb6 <xTaskGenericNotifyFromISR+0xd6>
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <xTaskGenericNotifyFromISR+0x140>)
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	0013      	movs	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4a18      	ldr	r2, [pc, #96]	; (8006024 <xTaskGenericNotifyFromISR+0x144>)
 8005fc4:	189a      	adds	r2, r3, r2
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	0019      	movs	r1, r3
 8005fcc:	0010      	movs	r0, r2
 8005fce:	f7fe fb56 	bl	800467e <vListInsertEnd>
 8005fd2:	e007      	b.n	8005fe4 <xTaskGenericNotifyFromISR+0x104>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	3318      	adds	r3, #24
 8005fd8:	001a      	movs	r2, r3
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <xTaskGenericNotifyFromISR+0x148>)
 8005fdc:	0011      	movs	r1, r2
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f7fe fb4d 	bl	800467e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	4b10      	ldr	r3, [pc, #64]	; (800602c <xTaskGenericNotifyFromISR+0x14c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d909      	bls.n	8006006 <xTaskGenericNotifyFromISR+0x126>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <xTaskGenericNotifyFromISR+0x120>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e002      	b.n	8006006 <xTaskGenericNotifyFromISR+0x126>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006000:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <xTaskGenericNotifyFromISR+0x150>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	0018      	movs	r0, r3
 800600a:	f000 fc09 	bl	8006820 <vClearInterruptMaskFromISR>

		return xReturn;
 800600e:	69fb      	ldr	r3, [r7, #28]
	}
 8006010:	0018      	movs	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	b008      	add	sp, #32
 8006016:	bd80      	pop	{r7, pc}
 8006018:	080079e8 	.word	0x080079e8
 800601c:	20000a1c 	.word	0x20000a1c
 8006020:	200009fc 	.word	0x200009fc
 8006024:	200008f8 	.word	0x200008f8
 8006028:	200009b4 	.word	0x200009b4
 800602c:	200008f4 	.word	0x200008f4
 8006030:	20000a08 	.word	0x20000a08

08006034 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800603e:	4b21      	ldr	r3, [pc, #132]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006044:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3304      	adds	r3, #4
 800604a:	0018      	movs	r0, r3
 800604c:	f7fe fb6f 	bl	800472e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3301      	adds	r3, #1
 8006054:	d10b      	bne.n	800606e <prvAddCurrentTaskToDelayedList+0x3a>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605c:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	1d1a      	adds	r2, r3, #4
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006064:	0011      	movs	r1, r2
 8006066:	0018      	movs	r0, r3
 8006068:	f7fe fb09 	bl	800467e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800606c:	e026      	b.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	18d3      	adds	r3, r2, r3
 8006074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	429a      	cmp	r2, r3
 8006084:	d209      	bcs.n	800609a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006086:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3304      	adds	r3, #4
 8006090:	0019      	movs	r1, r3
 8006092:	0010      	movs	r0, r2
 8006094:	f7fe fb15 	bl	80046c2 <vListInsert>
}
 8006098:	e010      	b.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800609a:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3304      	adds	r3, #4
 80060a4:	0019      	movs	r1, r3
 80060a6:	0010      	movs	r0, r2
 80060a8:	f7fe fb0b 	bl	80046c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d202      	bcs.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	601a      	str	r2, [r3, #0]
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	46bd      	mov	sp, r7
 80060c0:	b004      	add	sp, #16
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200009f8 	.word	0x200009f8
 80060c8:	200008f4 	.word	0x200008f4
 80060cc:	200009e0 	.word	0x200009e0
 80060d0:	200009b0 	.word	0x200009b0
 80060d4:	200009ac 	.word	0x200009ac
 80060d8:	20000a14 	.word	0x20000a14

080060dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b089      	sub	sp, #36	; 0x24
 80060e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060e6:	f000 fa71 	bl	80065cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <xTimerCreateTimerTask+0x6c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d020      	beq.n	8006134 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060fa:	003a      	movs	r2, r7
 80060fc:	1d39      	adds	r1, r7, #4
 80060fe:	2308      	movs	r3, #8
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	0018      	movs	r0, r3
 8006104:	f7fa f8c0 	bl	8000288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006108:	683c      	ldr	r4, [r7, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	490f      	ldr	r1, [pc, #60]	; (800614c <xTimerCreateTimerTask+0x70>)
 8006110:	480f      	ldr	r0, [pc, #60]	; (8006150 <xTimerCreateTimerTask+0x74>)
 8006112:	9202      	str	r2, [sp, #8]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	2302      	movs	r3, #2
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	2300      	movs	r3, #0
 800611c:	0022      	movs	r2, r4
 800611e:	f7ff f818 	bl	8005152 <xTaskCreateStatic>
 8006122:	0002      	movs	r2, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <xTimerCreateTimerTask+0x78>)
 8006126:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <xTimerCreateTimerTask+0x78>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006130:	2301      	movs	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <xTimerCreateTimerTask+0x62>
 800613a:	b672      	cpsid	i
 800613c:	e7fe      	b.n	800613c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	0018      	movs	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	b005      	add	sp, #20
 8006146:	bd90      	pop	{r4, r7, pc}
 8006148:	20000a50 	.word	0x20000a50
 800614c:	0800798c 	.word	0x0800798c
 8006150:	0800625d 	.word	0x0800625d
 8006154:	20000a54 	.word	0x20000a54

08006158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b089      	sub	sp, #36	; 0x24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <xTimerGenericCommand+0x1c>
 8006170:	b672      	cpsid	i
 8006172:	e7fe      	b.n	8006172 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006174:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <xTimerGenericCommand+0x90>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d030      	beq.n	80061de <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800617c:	2410      	movs	r4, #16
 800617e:	193b      	adds	r3, r7, r4
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006184:	193b      	adds	r3, r7, r4
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800618a:	193b      	adds	r3, r7, r4
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b05      	cmp	r3, #5
 8006194:	dc19      	bgt.n	80061ca <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006196:	f7ff fd4b 	bl	8005c30 <xTaskGetSchedulerState>
 800619a:	0003      	movs	r3, r0
 800619c:	2b02      	cmp	r3, #2
 800619e:	d109      	bne.n	80061b4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <xTimerGenericCommand+0x90>)
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a6:	1939      	adds	r1, r7, r4
 80061a8:	2300      	movs	r3, #0
 80061aa:	f7fe fbdf 	bl	800496c <xQueueGenericSend>
 80061ae:	0003      	movs	r3, r0
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e014      	b.n	80061de <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <xTimerGenericCommand+0x90>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	2310      	movs	r3, #16
 80061ba:	18f9      	adds	r1, r7, r3
 80061bc:	2300      	movs	r3, #0
 80061be:	2200      	movs	r2, #0
 80061c0:	f7fe fbd4 	bl	800496c <xQueueGenericSend>
 80061c4:	0003      	movs	r3, r0
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	e009      	b.n	80061de <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <xTimerGenericCommand+0x90>)
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	2310      	movs	r3, #16
 80061d2:	18f9      	adds	r1, r7, r3
 80061d4:	2300      	movs	r3, #0
 80061d6:	f7fe fc8d 	bl	8004af4 <xQueueGenericSendFromISR>
 80061da:	0003      	movs	r3, r0
 80061dc:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061de:	69fb      	ldr	r3, [r7, #28]
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b009      	add	sp, #36	; 0x24
 80061e6:	bd90      	pop	{r4, r7, pc}
 80061e8:	20000a50 	.word	0x20000a50

080061ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061f6:	4b18      	ldr	r3, [pc, #96]	; (8006258 <prvProcessExpiredTimer+0x6c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3304      	adds	r3, #4
 8006204:	0018      	movs	r0, r3
 8006206:	f7fe fa92 	bl	800472e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d119      	bne.n	8006246 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	18d1      	adds	r1, r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f8b6 	bl	8006390 <prvInsertTimerInActiveList>
 8006224:	1e03      	subs	r3, r0, #0
 8006226:	d00e      	beq.n	8006246 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	2300      	movs	r3, #0
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	2300      	movs	r3, #0
 8006232:	2100      	movs	r1, #0
 8006234:	f7ff ff90 	bl	8006158 <xTimerGenericCommand>
 8006238:	0003      	movs	r3, r0
 800623a:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <prvProcessExpiredTimer+0x5a>
 8006242:	b672      	cpsid	i
 8006244:	e7fe      	b.n	8006244 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	0010      	movs	r0, r2
 800624e:	4798      	blx	r3
}
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	46bd      	mov	sp, r7
 8006254:	b004      	add	sp, #16
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000a48 	.word	0x20000a48

0800625c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006264:	2308      	movs	r3, #8
 8006266:	18fb      	adds	r3, r7, r3
 8006268:	0018      	movs	r0, r3
 800626a:	f000 f851 	bl	8006310 <prvGetNextExpireTime>
 800626e:	0003      	movs	r3, r0
 8006270:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	0011      	movs	r1, r2
 8006278:	0018      	movs	r0, r3
 800627a:	f000 f803 	bl	8006284 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800627e:	f000 f8c9 	bl	8006414 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006282:	e7ef      	b.n	8006264 <prvTimerTask+0x8>

08006284 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800628e:	f7ff f947 	bl	8005520 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006292:	2308      	movs	r3, #8
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	0018      	movs	r0, r3
 8006298:	f000 f85a 	bl	8006350 <prvSampleTimeNow>
 800629c:	0003      	movs	r3, r0
 800629e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d129      	bne.n	80062fa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10c      	bne.n	80062c6 <prvProcessTimerOrBlockTask+0x42>
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d808      	bhi.n	80062c6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80062b4:	f7ff f940 	bl	8005538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0011      	movs	r1, r2
 80062be:	0018      	movs	r0, r3
 80062c0:	f7ff ff94 	bl	80061ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062c4:	e01b      	b.n	80062fe <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d006      	beq.n	80062da <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062cc:	4b0e      	ldr	r3, [pc, #56]	; (8006308 <prvProcessTimerOrBlockTask+0x84>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	425a      	negs	r2, r3
 80062d4:	4153      	adcs	r3, r2
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062da:	4b0c      	ldr	r3, [pc, #48]	; (800630c <prvProcessTimerOrBlockTask+0x88>)
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	0019      	movs	r1, r3
 80062e8:	f7fe ff00 	bl	80050ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ec:	f7ff f924 	bl	8005538 <xTaskResumeAll>
 80062f0:	1e03      	subs	r3, r0, #0
 80062f2:	d104      	bne.n	80062fe <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80062f4:	f000 fa54 	bl	80067a0 <vPortYield>
}
 80062f8:	e001      	b.n	80062fe <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80062fa:	f7ff f91d 	bl	8005538 <xTaskResumeAll>
}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	46bd      	mov	sp, r7
 8006302:	b004      	add	sp, #16
 8006304:	bd80      	pop	{r7, pc}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	20000a4c 	.word	0x20000a4c
 800630c:	20000a50 	.word	0x20000a50

08006310 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <prvGetNextExpireTime+0x3c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	425a      	negs	r2, r3
 8006320:	4153      	adcs	r3, r2
 8006322:	b2db      	uxtb	r3, r3
 8006324:	001a      	movs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d105      	bne.n	800633e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <prvGetNextExpireTime+0x3c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]
 800633c:	e001      	b.n	8006342 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	0018      	movs	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	b004      	add	sp, #16
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000a48 	.word	0x20000a48

08006350 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006358:	f7ff f97a 	bl	8005650 <xTaskGetTickCount>
 800635c:	0003      	movs	r3, r0
 800635e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <prvSampleTimeNow+0x3c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d205      	bcs.n	8006376 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800636a:	f000 f8d5 	bl	8006518 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	e002      	b.n	800637c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800637c:	4b03      	ldr	r3, [pc, #12]	; (800638c <prvSampleTimeNow+0x3c>)
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	0018      	movs	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	b004      	add	sp, #16
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000a58 	.word	0x20000a58

08006390 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d812      	bhi.n	80063dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	1ad2      	subs	r2, r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d302      	bcc.n	80063ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063c4:	2301      	movs	r3, #1
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	e01b      	b.n	8006402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <prvInsertTimerInActiveList+0x7c>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3304      	adds	r3, #4
 80063d2:	0019      	movs	r1, r3
 80063d4:	0010      	movs	r0, r2
 80063d6:	f7fe f974 	bl	80046c2 <vListInsert>
 80063da:	e012      	b.n	8006402 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d206      	bcs.n	80063f2 <prvInsertTimerInActiveList+0x62>
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d302      	bcc.n	80063f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e007      	b.n	8006402 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <prvInsertTimerInActiveList+0x80>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3304      	adds	r3, #4
 80063fa:	0019      	movs	r1, r3
 80063fc:	0010      	movs	r0, r2
 80063fe:	f7fe f960 	bl	80046c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006402:	697b      	ldr	r3, [r7, #20]
}
 8006404:	0018      	movs	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	b006      	add	sp, #24
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000a4c 	.word	0x20000a4c
 8006410:	20000a48 	.word	0x20000a48

08006414 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b08b      	sub	sp, #44	; 0x2c
 8006418:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641a:	e06a      	b.n	80064f2 <prvProcessReceivedCommands+0xde>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800641c:	2208      	movs	r2, #8
 800641e:	18bb      	adds	r3, r7, r2
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	db64      	blt.n	80064f0 <prvProcessReceivedCommands+0xdc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006426:	18bb      	adds	r3, r7, r2
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	3304      	adds	r3, #4
 8006438:	0018      	movs	r0, r3
 800643a:	f7fe f978 	bl	800472e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	0018      	movs	r0, r3
 8006442:	f7ff ff85 	bl	8006350 <prvSampleTimeNow>
 8006446:	0003      	movs	r3, r0
 8006448:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 800644a:	2308      	movs	r3, #8
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b09      	cmp	r3, #9
 8006452:	d84e      	bhi.n	80064f2 <prvProcessReceivedCommands+0xde>
 8006454:	009a      	lsls	r2, r3, #2
 8006456:	4b2e      	ldr	r3, [pc, #184]	; (8006510 <prvProcessReceivedCommands+0xfc>)
 8006458:	18d3      	adds	r3, r2, r3
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800645e:	2408      	movs	r4, #8
 8006460:	193b      	adds	r3, r7, r4
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	18d1      	adds	r1, r2, r3
 800646a:	193b      	adds	r3, r7, r4
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	69f8      	ldr	r0, [r7, #28]
 8006472:	f7ff ff8d 	bl	8006390 <prvInsertTimerInActiveList>
 8006476:	1e03      	subs	r3, r0, #0
 8006478:	d03b      	beq.n	80064f2 <prvProcessReceivedCommands+0xde>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	0010      	movs	r0, r2
 8006482:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d132      	bne.n	80064f2 <prvProcessReceivedCommands+0xde>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800648c:	193b      	adds	r3, r7, r4
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	18d2      	adds	r2, r2, r3
 8006496:	69f8      	ldr	r0, [r7, #28]
 8006498:	2300      	movs	r3, #0
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	2300      	movs	r3, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	f7ff fe5a 	bl	8006158 <xTimerGenericCommand>
 80064a4:	0003      	movs	r3, r0
 80064a6:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d121      	bne.n	80064f2 <prvProcessReceivedCommands+0xde>
 80064ae:	b672      	cpsid	i
 80064b0:	e7fe      	b.n	80064b0 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064b2:	2308      	movs	r3, #8
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <prvProcessReceivedCommands+0xb4>
 80064c4:	b672      	cpsid	i
 80064c6:	e7fe      	b.n	80064c6 <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	18d1      	adds	r1, r2, r3
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	69f8      	ldr	r0, [r7, #28]
 80064d6:	f7ff ff5b 	bl	8006390 <prvInsertTimerInActiveList>
					break;
 80064da:	e00a      	b.n	80064f2 <prvProcessReceivedCommands+0xde>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2228      	movs	r2, #40	; 0x28
 80064e0:	5c9b      	ldrb	r3, [r3, r2]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d105      	bne.n	80064f2 <prvProcessReceivedCommands+0xde>
						{
							vPortFree( pxTimer );
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f000 faa7 	bl	8006a3c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064ee:	e000      	b.n	80064f2 <prvProcessReceivedCommands+0xde>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80064f0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <prvProcessReceivedCommands+0x100>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2208      	movs	r2, #8
 80064f8:	18b9      	adds	r1, r7, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7fe fb6a 	bl	8004bd6 <xQueueReceive>
 8006502:	1e03      	subs	r3, r0, #0
 8006504:	d18a      	bne.n	800641c <prvProcessReceivedCommands+0x8>
	}
}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	46c0      	nop			; (mov r8, r8)
 800650a:	46bd      	mov	sp, r7
 800650c:	b009      	add	sp, #36	; 0x24
 800650e:	bd90      	pop	{r4, r7, pc}
 8006510:	080079fc 	.word	0x080079fc
 8006514:	20000a50 	.word	0x20000a50

08006518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800651e:	e03e      	b.n	800659e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006520:	4b28      	ldr	r3, [pc, #160]	; (80065c4 <prvSwitchTimerLists+0xac>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800652a:	4b26      	ldr	r3, [pc, #152]	; (80065c4 <prvSwitchTimerLists+0xac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3304      	adds	r3, #4
 8006538:	0018      	movs	r0, r3
 800653a:	f7fe f8f8 	bl	800472e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	0010      	movs	r0, r2
 8006546:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d126      	bne.n	800659e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	18d3      	adds	r3, r2, r3
 8006558:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	429a      	cmp	r2, r3
 8006560:	d90e      	bls.n	8006580 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800656e:	4b15      	ldr	r3, [pc, #84]	; (80065c4 <prvSwitchTimerLists+0xac>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3304      	adds	r3, #4
 8006576:	0019      	movs	r1, r3
 8006578:	0010      	movs	r0, r2
 800657a:	f7fe f8a2 	bl	80046c2 <vListInsert>
 800657e:	e00e      	b.n	800659e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	2300      	movs	r3, #0
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2300      	movs	r3, #0
 800658a:	2100      	movs	r1, #0
 800658c:	f7ff fde4 	bl	8006158 <xTimerGenericCommand>
 8006590:	0003      	movs	r3, r0
 8006592:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <prvSwitchTimerLists+0x86>
 800659a:	b672      	cpsid	i
 800659c:	e7fe      	b.n	800659c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800659e:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <prvSwitchTimerLists+0xac>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1bb      	bne.n	8006520 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065a8:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <prvSwitchTimerLists+0xac>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <prvSwitchTimerLists+0xb0>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <prvSwitchTimerLists+0xac>)
 80065b4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <prvSwitchTimerLists+0xb0>)
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	601a      	str	r2, [r3, #0]
}
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	46bd      	mov	sp, r7
 80065c0:	b006      	add	sp, #24
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20000a48 	.word	0x20000a48
 80065c8:	20000a4c 	.word	0x20000a4c

080065cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065d2:	f000 f8f5 	bl	80067c0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065d6:	4b16      	ldr	r3, [pc, #88]	; (8006630 <prvCheckForValidListAndQueue+0x64>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d123      	bne.n	8006626 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80065de:	4b15      	ldr	r3, [pc, #84]	; (8006634 <prvCheckForValidListAndQueue+0x68>)
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7fe f823 	bl	800462c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <prvCheckForValidListAndQueue+0x6c>)
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7fe f81f 	bl	800462c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <prvCheckForValidListAndQueue+0x70>)
 80065f0:	4a10      	ldr	r2, [pc, #64]	; (8006634 <prvCheckForValidListAndQueue+0x68>)
 80065f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <prvCheckForValidListAndQueue+0x74>)
 80065f6:	4a10      	ldr	r2, [pc, #64]	; (8006638 <prvCheckForValidListAndQueue+0x6c>)
 80065f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <prvCheckForValidListAndQueue+0x78>)
 80065fc:	4a12      	ldr	r2, [pc, #72]	; (8006648 <prvCheckForValidListAndQueue+0x7c>)
 80065fe:	2100      	movs	r1, #0
 8006600:	9100      	str	r1, [sp, #0]
 8006602:	210c      	movs	r1, #12
 8006604:	200a      	movs	r0, #10
 8006606:	f7fe f90e 	bl	8004826 <xQueueGenericCreateStatic>
 800660a:	0002      	movs	r2, r0
 800660c:	4b08      	ldr	r3, [pc, #32]	; (8006630 <prvCheckForValidListAndQueue+0x64>)
 800660e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <prvCheckForValidListAndQueue+0x64>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006618:	4b05      	ldr	r3, [pc, #20]	; (8006630 <prvCheckForValidListAndQueue+0x64>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a0b      	ldr	r2, [pc, #44]	; (800664c <prvCheckForValidListAndQueue+0x80>)
 800661e:	0011      	movs	r1, r2
 8006620:	0018      	movs	r0, r3
 8006622:	f7fe fd3b 	bl	800509c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006626:	f000 f8dd 	bl	80067e4 <vPortExitCritical>
}
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	20000a50 	.word	0x20000a50
 8006634:	20000a20 	.word	0x20000a20
 8006638:	20000a34 	.word	0x20000a34
 800663c:	20000a48 	.word	0x20000a48
 8006640:	20000a4c 	.word	0x20000a4c
 8006644:	20000ad4 	.word	0x20000ad4
 8006648:	20000a5c 	.word	0x20000a5c
 800664c:	08007994 	.word	0x08007994

08006650 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <xTimerIsTimerActive+0x16>
 8006662:	b672      	cpsid	i
 8006664:	e7fe      	b.n	8006664 <xTimerIsTimerActive+0x14>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8006666:	f000 f8ab 	bl	80067c0 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	1e5a      	subs	r2, r3, #1
 8006670:	4193      	sbcs	r3, r2
 8006672:	b2db      	uxtb	r3, r3
 8006674:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8006676:	f000 f8b5 	bl	80067e4 <vPortExitCritical>

	return xTimerIsInActiveList;
 800667a:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800667c:	0018      	movs	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	b004      	add	sp, #16
 8006682:	bd80      	pop	{r7, pc}

08006684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3b04      	subs	r3, #4
 8006694:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2280      	movs	r2, #128	; 0x80
 800669a:	0452      	lsls	r2, r2, #17
 800669c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b04      	subs	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b04      	subs	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066b0:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <pxPortInitialiseStack+0x50>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3b14      	subs	r3, #20
 80066ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3b20      	subs	r3, #32
 80066c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066c8:	68fb      	ldr	r3, [r7, #12]
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b004      	add	sp, #16
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	080066d9 	.word	0x080066d9

080066d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80066de:	2300      	movs	r3, #0
 80066e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066e2:	4b08      	ldr	r3, [pc, #32]	; (8006704 <prvTaskExitError+0x2c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	d001      	beq.n	80066ee <prvTaskExitError+0x16>
 80066ea:	b672      	cpsid	i
 80066ec:	e7fe      	b.n	80066ec <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80066ee:	b672      	cpsid	i
	while( ulDummy == 0 )
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0fc      	beq.n	80066f2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066f8:	46c0      	nop			; (mov r8, r8)
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b002      	add	sp, #8
 8006700:	bd80      	pop	{r7, pc}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	20000018 	.word	0x20000018

08006708 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006720 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006720:	4a0b      	ldr	r2, [pc, #44]	; (8006750 <pxCurrentTCBConst2>)
 8006722:	6813      	ldr	r3, [r2, #0]
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	3020      	adds	r0, #32
 8006728:	f380 8809 	msr	PSP, r0
 800672c:	2002      	movs	r0, #2
 800672e:	f380 8814 	msr	CONTROL, r0
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006738:	46ae      	mov	lr, r5
 800673a:	bc08      	pop	{r3}
 800673c:	bc04      	pop	{r2}
 800673e:	b662      	cpsie	i
 8006740:	4718      	bx	r3
 8006742:	46c0      	nop			; (mov r8, r8)
 8006744:	46c0      	nop			; (mov r8, r8)
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46c0      	nop			; (mov r8, r8)

08006750 <pxCurrentTCBConst2>:
 8006750:	200008f4 	.word	0x200008f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006754:	46c0      	nop			; (mov r8, r8)
 8006756:	46c0      	nop			; (mov r8, r8)

08006758 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800675c:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <xPortStartScheduler+0x40>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <xPortStartScheduler+0x40>)
 8006762:	21ff      	movs	r1, #255	; 0xff
 8006764:	0409      	lsls	r1, r1, #16
 8006766:	430a      	orrs	r2, r1
 8006768:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <xPortStartScheduler+0x40>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <xPortStartScheduler+0x40>)
 8006770:	21ff      	movs	r1, #255	; 0xff
 8006772:	0609      	lsls	r1, r1, #24
 8006774:	430a      	orrs	r2, r1
 8006776:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006778:	f000 f898 	bl	80068ac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800677c:	4b07      	ldr	r3, [pc, #28]	; (800679c <xPortStartScheduler+0x44>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006782:	f7ff ffcd 	bl	8006720 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006786:	f7ff f825 	bl	80057d4 <vTaskSwitchContext>
	prvTaskExitError();
 800678a:	f7ff ffa5 	bl	80066d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800678e:	2300      	movs	r3, #0
}
 8006790:	0018      	movs	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	e000ed20 	.word	0xe000ed20
 800679c:	20000018 	.word	0x20000018

080067a0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <vPortYield+0x1c>)
 80067a6:	2280      	movs	r2, #128	; 0x80
 80067a8:	0552      	lsls	r2, r2, #21
 80067aa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80067ac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80067b0:	f3bf 8f6f 	isb	sy
}
 80067b4:	46c0      	nop			; (mov r8, r8)
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80067c4:	b672      	cpsid	i
    uxCriticalNesting++;
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <vPortEnterCritical+0x20>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <vPortEnterCritical+0x20>)
 80067ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80067d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80067d4:	f3bf 8f6f 	isb	sy
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	20000018 	.word	0x20000018

080067e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067e8:	4b09      	ldr	r3, [pc, #36]	; (8006810 <vPortExitCritical+0x2c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <vPortExitCritical+0x10>
 80067f0:	b672      	cpsid	i
 80067f2:	e7fe      	b.n	80067f2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <vPortExitCritical+0x2c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	1e5a      	subs	r2, r3, #1
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <vPortExitCritical+0x2c>)
 80067fc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <vPortExitCritical+0x2c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d100      	bne.n	8006808 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006806:	b662      	cpsie	i
    }
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	20000018 	.word	0x20000018

08006814 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006814:	f3ef 8010 	mrs	r0, PRIMASK
 8006818:	b672      	cpsid	i
 800681a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800681c:	46c0      	nop			; (mov r8, r8)
 800681e:	0018      	movs	r0, r3

08006820 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006820:	f380 8810 	msr	PRIMASK, r0
 8006824:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006826:	46c0      	nop			; (mov r8, r8)
	...

08006830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006830:	f3ef 8009 	mrs	r0, PSP
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <pxCurrentTCBConst>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	3820      	subs	r0, #32
 800683a:	6010      	str	r0, [r2, #0]
 800683c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800683e:	4644      	mov	r4, r8
 8006840:	464d      	mov	r5, r9
 8006842:	4656      	mov	r6, sl
 8006844:	465f      	mov	r7, fp
 8006846:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006848:	b508      	push	{r3, lr}
 800684a:	b672      	cpsid	i
 800684c:	f7fe ffc2 	bl	80057d4 <vTaskSwitchContext>
 8006850:	b662      	cpsie	i
 8006852:	bc0c      	pop	{r2, r3}
 8006854:	6811      	ldr	r1, [r2, #0]
 8006856:	6808      	ldr	r0, [r1, #0]
 8006858:	3010      	adds	r0, #16
 800685a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800685c:	46a0      	mov	r8, r4
 800685e:	46a9      	mov	r9, r5
 8006860:	46b2      	mov	sl, r6
 8006862:	46bb      	mov	fp, r7
 8006864:	f380 8809 	msr	PSP, r0
 8006868:	3820      	subs	r0, #32
 800686a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800686c:	4718      	bx	r3
 800686e:	46c0      	nop			; (mov r8, r8)

08006870 <pxCurrentTCBConst>:
 8006870:	200008f4 	.word	0x200008f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006874:	46c0      	nop			; (mov r8, r8)
 8006876:	46c0      	nop			; (mov r8, r8)

08006878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800687e:	f7ff ffc9 	bl	8006814 <ulSetInterruptMaskFromISR>
 8006882:	0003      	movs	r3, r0
 8006884:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006886:	f7fe fef1 	bl	800566c <xTaskIncrementTick>
 800688a:	1e03      	subs	r3, r0, #0
 800688c:	d003      	beq.n	8006896 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <SysTick_Handler+0x30>)
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	0552      	lsls	r2, r2, #21
 8006894:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	0018      	movs	r0, r3
 800689a:	f7ff ffc1 	bl	8006820 <vClearInterruptMaskFromISR>
}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b002      	add	sp, #8
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	46c0      	nop			; (mov r8, r8)
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <prvSetupTimerInterrupt+0x34>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <prvSetupTimerInterrupt+0x38>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <prvSetupTimerInterrupt+0x3c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	22fa      	movs	r2, #250	; 0xfa
 80068c2:	0091      	lsls	r1, r2, #2
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7f9 fc3b 	bl	8000140 <__udivsi3>
 80068ca:	0003      	movs	r3, r0
 80068cc:	001a      	movs	r2, r3
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <prvSetupTimerInterrupt+0x40>)
 80068d0:	3a01      	subs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <prvSetupTimerInterrupt+0x34>)
 80068d6:	2207      	movs	r2, #7
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	e000e010 	.word	0xe000e010
 80068e4:	e000e018 	.word	0xe000e018
 80068e8:	2000000c 	.word	0x2000000c
 80068ec:	e000e014 	.word	0xe000e014

080068f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80068fc:	f7fe fe10 	bl	8005520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006900:	4b49      	ldr	r3, [pc, #292]	; (8006a28 <pvPortMalloc+0x138>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006908:	f000 f8e0 	bl	8006acc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800690c:	4b47      	ldr	r3, [pc, #284]	; (8006a2c <pvPortMalloc+0x13c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4013      	ands	r3, r2
 8006914:	d000      	beq.n	8006918 <pvPortMalloc+0x28>
 8006916:	e079      	b.n	8006a0c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d012      	beq.n	8006944 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800691e:	2208      	movs	r2, #8
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	189b      	adds	r3, r3, r2
 8006924:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2207      	movs	r2, #7
 800692a:	4013      	ands	r3, r2
 800692c:	d00a      	beq.n	8006944 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2207      	movs	r2, #7
 8006932:	4393      	bics	r3, r2
 8006934:	3308      	adds	r3, #8
 8006936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2207      	movs	r2, #7
 800693c:	4013      	ands	r3, r2
 800693e:	d001      	beq.n	8006944 <pvPortMalloc+0x54>
 8006940:	b672      	cpsid	i
 8006942:	e7fe      	b.n	8006942 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d060      	beq.n	8006a0c <pvPortMalloc+0x11c>
 800694a:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <pvPortMalloc+0x140>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d85b      	bhi.n	8006a0c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006954:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <pvPortMalloc+0x144>)
 8006956:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006958:	4b36      	ldr	r3, [pc, #216]	; (8006a34 <pvPortMalloc+0x144>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800695e:	e004      	b.n	800696a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d903      	bls.n	800697c <pvPortMalloc+0x8c>
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f1      	bne.n	8006960 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800697c:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <pvPortMalloc+0x138>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	429a      	cmp	r2, r3
 8006984:	d042      	beq.n	8006a0c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2208      	movs	r2, #8
 800698c:	189b      	adds	r3, r3, r2
 800698e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	2308      	movs	r3, #8
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d916      	bls.n	80069d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	18d3      	adds	r3, r2, r3
 80069ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2207      	movs	r2, #7
 80069b4:	4013      	ands	r3, r2
 80069b6:	d001      	beq.n	80069bc <pvPortMalloc+0xcc>
 80069b8:	b672      	cpsid	i
 80069ba:	e7fe      	b.n	80069ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	1ad2      	subs	r2, r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 f8db 	bl	8006b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069d6:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <pvPortMalloc+0x140>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <pvPortMalloc+0x140>)
 80069e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069e4:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <pvPortMalloc+0x140>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <pvPortMalloc+0x148>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d203      	bcs.n	80069f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <pvPortMalloc+0x140>)
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <pvPortMalloc+0x148>)
 80069f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <pvPortMalloc+0x13c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a0c:	f7fe fd94 	bl	8005538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2207      	movs	r2, #7
 8006a14:	4013      	ands	r3, r2
 8006a16:	d001      	beq.n	8006a1c <pvPortMalloc+0x12c>
 8006a18:	b672      	cpsid	i
 8006a1a:	e7fe      	b.n	8006a1a <pvPortMalloc+0x12a>
	return pvReturn;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b006      	add	sp, #24
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	20001724 	.word	0x20001724
 8006a2c:	20001730 	.word	0x20001730
 8006a30:	20001728 	.word	0x20001728
 8006a34:	2000171c 	.word	0x2000171c
 8006a38:	2000172c 	.word	0x2000172c

08006a3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d035      	beq.n	8006aba <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a4e:	2308      	movs	r3, #8
 8006a50:	425b      	negs	r3, r3
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	18d3      	adds	r3, r2, r3
 8006a56:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <vPortFree+0x88>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4013      	ands	r3, r2
 8006a66:	d101      	bne.n	8006a6c <vPortFree+0x30>
 8006a68:	b672      	cpsid	i
 8006a6a:	e7fe      	b.n	8006a6a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <vPortFree+0x3c>
 8006a74:	b672      	cpsid	i
 8006a76:	e7fe      	b.n	8006a76 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <vPortFree+0x88>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4013      	ands	r3, r2
 8006a82:	d01a      	beq.n	8006aba <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d116      	bne.n	8006aba <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <vPortFree+0x88>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	43db      	mvns	r3, r3
 8006a96:	401a      	ands	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a9c:	f7fe fd40 	bl	8005520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <vPortFree+0x8c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	18d2      	adds	r2, r2, r3
 8006aaa:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <vPortFree+0x8c>)
 8006aac:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 f86b 	bl	8006b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ab6:	f7fe fd3f 	bl	8005538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	46bd      	mov	sp, r7
 8006abe:	b004      	add	sp, #16
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	20001730 	.word	0x20001730
 8006ac8:	20001728 	.word	0x20001728

08006acc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ad2:	23c0      	movs	r3, #192	; 0xc0
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ad8:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <prvHeapInit+0xa8>)
 8006ada:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2207      	movs	r2, #7
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d00c      	beq.n	8006afe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3307      	adds	r3, #7
 8006ae8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2207      	movs	r2, #7
 8006aee:	4393      	bics	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	1ad2      	subs	r2, r2, r3
 8006af8:	4b1e      	ldr	r3, [pc, #120]	; (8006b74 <prvHeapInit+0xa8>)
 8006afa:	18d3      	adds	r3, r2, r3
 8006afc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b02:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <prvHeapInit+0xac>)
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b08:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <prvHeapInit+0xac>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	18d3      	adds	r3, r2, r3
 8006b14:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b16:	2208      	movs	r2, #8
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2207      	movs	r2, #7
 8006b22:	4393      	bics	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <prvHeapInit+0xb0>)
 8006b2a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006b2c:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <prvHeapInit+0xb0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b34:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <prvHeapInit+0xb0>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b4a:	4b0c      	ldr	r3, [pc, #48]	; (8006b7c <prvHeapInit+0xb0>)
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <prvHeapInit+0xb4>)
 8006b58:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	4b09      	ldr	r3, [pc, #36]	; (8006b84 <prvHeapInit+0xb8>)
 8006b60:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <prvHeapInit+0xbc>)
 8006b64:	2280      	movs	r2, #128	; 0x80
 8006b66:	0612      	lsls	r2, r2, #24
 8006b68:	601a      	str	r2, [r3, #0]
}
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b004      	add	sp, #16
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	20000b1c 	.word	0x20000b1c
 8006b78:	2000171c 	.word	0x2000171c
 8006b7c:	20001724 	.word	0x20001724
 8006b80:	2000172c 	.word	0x2000172c
 8006b84:	20001728 	.word	0x20001728
 8006b88:	20001730 	.word	0x20001730

08006b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b94:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <prvInsertBlockIntoFreeList+0xa8>)
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e002      	b.n	8006ba0 <prvInsertBlockIntoFreeList+0x14>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d8f7      	bhi.n	8006b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	18d3      	adds	r3, r2, r3
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d108      	bne.n	8006bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	18d2      	adds	r2, r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	18d2      	adds	r2, r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d118      	bne.n	8006c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <prvInsertBlockIntoFreeList+0xac>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d00d      	beq.n	8006c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	18d2      	adds	r2, r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	e008      	b.n	8006c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <prvInsertBlockIntoFreeList+0xac>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	e003      	b.n	8006c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d002      	beq.n	8006c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b004      	add	sp, #16
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	2000171c 	.word	0x2000171c
 8006c38:	20001724 	.word	0x20001724

08006c3c <__errno>:
 8006c3c:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <__errno+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4770      	bx	lr
 8006c42:	46c0      	nop			; (mov r8, r8)
 8006c44:	2000001c 	.word	0x2000001c

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	4d0c      	ldr	r5, [pc, #48]	; (8006c80 <__libc_init_array+0x38>)
 8006c4e:	4c0d      	ldr	r4, [pc, #52]	; (8006c84 <__libc_init_array+0x3c>)
 8006c50:	1b64      	subs	r4, r4, r5
 8006c52:	10a4      	asrs	r4, r4, #2
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	2600      	movs	r6, #0
 8006c5a:	f000 fc8b 	bl	8007574 <_init>
 8006c5e:	4d0a      	ldr	r5, [pc, #40]	; (8006c88 <__libc_init_array+0x40>)
 8006c60:	4c0a      	ldr	r4, [pc, #40]	; (8006c8c <__libc_init_array+0x44>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	42a6      	cmp	r6, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	00b3      	lsls	r3, r6, #2
 8006c6e:	58eb      	ldr	r3, [r5, r3]
 8006c70:	4798      	blx	r3
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	00b3      	lsls	r3, r6, #2
 8006c78:	58eb      	ldr	r3, [r5, r3]
 8006c7a:	4798      	blx	r3
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	08007a58 	.word	0x08007a58
 8006c84:	08007a58 	.word	0x08007a58
 8006c88:	08007a58 	.word	0x08007a58
 8006c8c:	08007a5c 	.word	0x08007a5c

08006c90 <memcpy>:
 8006c90:	2300      	movs	r3, #0
 8006c92:	b510      	push	{r4, lr}
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d100      	bne.n	8006c9a <memcpy+0xa>
 8006c98:	bd10      	pop	{r4, pc}
 8006c9a:	5ccc      	ldrb	r4, [r1, r3]
 8006c9c:	54c4      	strb	r4, [r0, r3]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	e7f8      	b.n	8006c94 <memcpy+0x4>

08006ca2 <memset>:
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	1882      	adds	r2, r0, r2
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d100      	bne.n	8006cac <memset+0xa>
 8006caa:	4770      	bx	lr
 8006cac:	7019      	strb	r1, [r3, #0]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	e7f9      	b.n	8006ca6 <memset+0x4>
	...

08006cb4 <siprintf>:
 8006cb4:	b40e      	push	{r1, r2, r3}
 8006cb6:	b500      	push	{lr}
 8006cb8:	490b      	ldr	r1, [pc, #44]	; (8006ce8 <siprintf+0x34>)
 8006cba:	b09c      	sub	sp, #112	; 0x70
 8006cbc:	ab1d      	add	r3, sp, #116	; 0x74
 8006cbe:	9002      	str	r0, [sp, #8]
 8006cc0:	9006      	str	r0, [sp, #24]
 8006cc2:	9107      	str	r1, [sp, #28]
 8006cc4:	9104      	str	r1, [sp, #16]
 8006cc6:	4809      	ldr	r0, [pc, #36]	; (8006cec <siprintf+0x38>)
 8006cc8:	4909      	ldr	r1, [pc, #36]	; (8006cf0 <siprintf+0x3c>)
 8006cca:	cb04      	ldmia	r3!, {r2}
 8006ccc:	9105      	str	r1, [sp, #20]
 8006cce:	6800      	ldr	r0, [r0, #0]
 8006cd0:	a902      	add	r1, sp, #8
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	f000 f870 	bl	8006db8 <_svfiprintf_r>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9a02      	ldr	r2, [sp, #8]
 8006cdc:	7013      	strb	r3, [r2, #0]
 8006cde:	b01c      	add	sp, #112	; 0x70
 8006ce0:	bc08      	pop	{r3}
 8006ce2:	b003      	add	sp, #12
 8006ce4:	4718      	bx	r3
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	7fffffff 	.word	0x7fffffff
 8006cec:	2000001c 	.word	0x2000001c
 8006cf0:	ffff0208 	.word	0xffff0208

08006cf4 <__ssputs_r>:
 8006cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf6:	688e      	ldr	r6, [r1, #8]
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	0007      	movs	r7, r0
 8006cfc:	000c      	movs	r4, r1
 8006cfe:	9203      	str	r2, [sp, #12]
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	429e      	cmp	r6, r3
 8006d04:	d83c      	bhi.n	8006d80 <__ssputs_r+0x8c>
 8006d06:	2390      	movs	r3, #144	; 0x90
 8006d08:	898a      	ldrh	r2, [r1, #12]
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	421a      	tst	r2, r3
 8006d0e:	d034      	beq.n	8006d7a <__ssputs_r+0x86>
 8006d10:	6909      	ldr	r1, [r1, #16]
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	6960      	ldr	r0, [r4, #20]
 8006d16:	1a5b      	subs	r3, r3, r1
 8006d18:	9302      	str	r3, [sp, #8]
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	4343      	muls	r3, r0
 8006d1e:	0fdd      	lsrs	r5, r3, #31
 8006d20:	18ed      	adds	r5, r5, r3
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	9802      	ldr	r0, [sp, #8]
 8006d26:	3301      	adds	r3, #1
 8006d28:	181b      	adds	r3, r3, r0
 8006d2a:	106d      	asrs	r5, r5, #1
 8006d2c:	42ab      	cmp	r3, r5
 8006d2e:	d900      	bls.n	8006d32 <__ssputs_r+0x3e>
 8006d30:	001d      	movs	r5, r3
 8006d32:	0553      	lsls	r3, r2, #21
 8006d34:	d532      	bpl.n	8006d9c <__ssputs_r+0xa8>
 8006d36:	0029      	movs	r1, r5
 8006d38:	0038      	movs	r0, r7
 8006d3a:	f000 fb49 	bl	80073d0 <_malloc_r>
 8006d3e:	1e06      	subs	r6, r0, #0
 8006d40:	d109      	bne.n	8006d56 <__ssputs_r+0x62>
 8006d42:	230c      	movs	r3, #12
 8006d44:	603b      	str	r3, [r7, #0]
 8006d46:	2340      	movs	r3, #64	; 0x40
 8006d48:	2001      	movs	r0, #1
 8006d4a:	89a2      	ldrh	r2, [r4, #12]
 8006d4c:	4240      	negs	r0, r0
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	81a3      	strh	r3, [r4, #12]
 8006d52:	b005      	add	sp, #20
 8006d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d56:	9a02      	ldr	r2, [sp, #8]
 8006d58:	6921      	ldr	r1, [r4, #16]
 8006d5a:	f7ff ff99 	bl	8006c90 <memcpy>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	4a14      	ldr	r2, [pc, #80]	; (8006db4 <__ssputs_r+0xc0>)
 8006d62:	401a      	ands	r2, r3
 8006d64:	2380      	movs	r3, #128	; 0x80
 8006d66:	4313      	orrs	r3, r2
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	9b02      	ldr	r3, [sp, #8]
 8006d6c:	6126      	str	r6, [r4, #16]
 8006d6e:	18f6      	adds	r6, r6, r3
 8006d70:	6026      	str	r6, [r4, #0]
 8006d72:	6165      	str	r5, [r4, #20]
 8006d74:	9e01      	ldr	r6, [sp, #4]
 8006d76:	1aed      	subs	r5, r5, r3
 8006d78:	60a5      	str	r5, [r4, #8]
 8006d7a:	9b01      	ldr	r3, [sp, #4]
 8006d7c:	429e      	cmp	r6, r3
 8006d7e:	d900      	bls.n	8006d82 <__ssputs_r+0x8e>
 8006d80:	9e01      	ldr	r6, [sp, #4]
 8006d82:	0032      	movs	r2, r6
 8006d84:	9903      	ldr	r1, [sp, #12]
 8006d86:	6820      	ldr	r0, [r4, #0]
 8006d88:	f000 faa3 	bl	80072d2 <memmove>
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	2000      	movs	r0, #0
 8006d90:	1b9b      	subs	r3, r3, r6
 8006d92:	60a3      	str	r3, [r4, #8]
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	199e      	adds	r6, r3, r6
 8006d98:	6026      	str	r6, [r4, #0]
 8006d9a:	e7da      	b.n	8006d52 <__ssputs_r+0x5e>
 8006d9c:	002a      	movs	r2, r5
 8006d9e:	0038      	movs	r0, r7
 8006da0:	f000 fb8c 	bl	80074bc <_realloc_r>
 8006da4:	1e06      	subs	r6, r0, #0
 8006da6:	d1e0      	bne.n	8006d6a <__ssputs_r+0x76>
 8006da8:	0038      	movs	r0, r7
 8006daa:	6921      	ldr	r1, [r4, #16]
 8006dac:	f000 faa4 	bl	80072f8 <_free_r>
 8006db0:	e7c7      	b.n	8006d42 <__ssputs_r+0x4e>
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	fffffb7f 	.word	0xfffffb7f

08006db8 <_svfiprintf_r>:
 8006db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dba:	b0a1      	sub	sp, #132	; 0x84
 8006dbc:	9003      	str	r0, [sp, #12]
 8006dbe:	001d      	movs	r5, r3
 8006dc0:	898b      	ldrh	r3, [r1, #12]
 8006dc2:	000f      	movs	r7, r1
 8006dc4:	0016      	movs	r6, r2
 8006dc6:	061b      	lsls	r3, r3, #24
 8006dc8:	d511      	bpl.n	8006dee <_svfiprintf_r+0x36>
 8006dca:	690b      	ldr	r3, [r1, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10e      	bne.n	8006dee <_svfiprintf_r+0x36>
 8006dd0:	2140      	movs	r1, #64	; 0x40
 8006dd2:	f000 fafd 	bl	80073d0 <_malloc_r>
 8006dd6:	6038      	str	r0, [r7, #0]
 8006dd8:	6138      	str	r0, [r7, #16]
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d105      	bne.n	8006dea <_svfiprintf_r+0x32>
 8006dde:	230c      	movs	r3, #12
 8006de0:	9a03      	ldr	r2, [sp, #12]
 8006de2:	3801      	subs	r0, #1
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	b021      	add	sp, #132	; 0x84
 8006de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dea:	2340      	movs	r3, #64	; 0x40
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	2300      	movs	r3, #0
 8006df0:	ac08      	add	r4, sp, #32
 8006df2:	6163      	str	r3, [r4, #20]
 8006df4:	3320      	adds	r3, #32
 8006df6:	7663      	strb	r3, [r4, #25]
 8006df8:	3310      	adds	r3, #16
 8006dfa:	76a3      	strb	r3, [r4, #26]
 8006dfc:	9507      	str	r5, [sp, #28]
 8006dfe:	0035      	movs	r5, r6
 8006e00:	782b      	ldrb	r3, [r5, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <_svfiprintf_r+0x52>
 8006e06:	2b25      	cmp	r3, #37	; 0x25
 8006e08:	d147      	bne.n	8006e9a <_svfiprintf_r+0xe2>
 8006e0a:	1bab      	subs	r3, r5, r6
 8006e0c:	9305      	str	r3, [sp, #20]
 8006e0e:	42b5      	cmp	r5, r6
 8006e10:	d00c      	beq.n	8006e2c <_svfiprintf_r+0x74>
 8006e12:	0032      	movs	r2, r6
 8006e14:	0039      	movs	r1, r7
 8006e16:	9803      	ldr	r0, [sp, #12]
 8006e18:	f7ff ff6c 	bl	8006cf4 <__ssputs_r>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d100      	bne.n	8006e22 <_svfiprintf_r+0x6a>
 8006e20:	e0ae      	b.n	8006f80 <_svfiprintf_r+0x1c8>
 8006e22:	6962      	ldr	r2, [r4, #20]
 8006e24:	9b05      	ldr	r3, [sp, #20]
 8006e26:	4694      	mov	ip, r2
 8006e28:	4463      	add	r3, ip
 8006e2a:	6163      	str	r3, [r4, #20]
 8006e2c:	782b      	ldrb	r3, [r5, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d100      	bne.n	8006e34 <_svfiprintf_r+0x7c>
 8006e32:	e0a5      	b.n	8006f80 <_svfiprintf_r+0x1c8>
 8006e34:	2201      	movs	r2, #1
 8006e36:	2300      	movs	r3, #0
 8006e38:	4252      	negs	r2, r2
 8006e3a:	6062      	str	r2, [r4, #4]
 8006e3c:	a904      	add	r1, sp, #16
 8006e3e:	3254      	adds	r2, #84	; 0x54
 8006e40:	1852      	adds	r2, r2, r1
 8006e42:	1c6e      	adds	r6, r5, #1
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	60e3      	str	r3, [r4, #12]
 8006e48:	60a3      	str	r3, [r4, #8]
 8006e4a:	7013      	strb	r3, [r2, #0]
 8006e4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e4e:	2205      	movs	r2, #5
 8006e50:	7831      	ldrb	r1, [r6, #0]
 8006e52:	4854      	ldr	r0, [pc, #336]	; (8006fa4 <_svfiprintf_r+0x1ec>)
 8006e54:	f000 fa32 	bl	80072bc <memchr>
 8006e58:	1c75      	adds	r5, r6, #1
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d11f      	bne.n	8006e9e <_svfiprintf_r+0xe6>
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	06d3      	lsls	r3, r2, #27
 8006e62:	d504      	bpl.n	8006e6e <_svfiprintf_r+0xb6>
 8006e64:	2353      	movs	r3, #83	; 0x53
 8006e66:	a904      	add	r1, sp, #16
 8006e68:	185b      	adds	r3, r3, r1
 8006e6a:	2120      	movs	r1, #32
 8006e6c:	7019      	strb	r1, [r3, #0]
 8006e6e:	0713      	lsls	r3, r2, #28
 8006e70:	d504      	bpl.n	8006e7c <_svfiprintf_r+0xc4>
 8006e72:	2353      	movs	r3, #83	; 0x53
 8006e74:	a904      	add	r1, sp, #16
 8006e76:	185b      	adds	r3, r3, r1
 8006e78:	212b      	movs	r1, #43	; 0x2b
 8006e7a:	7019      	strb	r1, [r3, #0]
 8006e7c:	7833      	ldrb	r3, [r6, #0]
 8006e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e80:	d016      	beq.n	8006eb0 <_svfiprintf_r+0xf8>
 8006e82:	0035      	movs	r5, r6
 8006e84:	2100      	movs	r1, #0
 8006e86:	200a      	movs	r0, #10
 8006e88:	68e3      	ldr	r3, [r4, #12]
 8006e8a:	782a      	ldrb	r2, [r5, #0]
 8006e8c:	1c6e      	adds	r6, r5, #1
 8006e8e:	3a30      	subs	r2, #48	; 0x30
 8006e90:	2a09      	cmp	r2, #9
 8006e92:	d94e      	bls.n	8006f32 <_svfiprintf_r+0x17a>
 8006e94:	2900      	cmp	r1, #0
 8006e96:	d111      	bne.n	8006ebc <_svfiprintf_r+0x104>
 8006e98:	e017      	b.n	8006eca <_svfiprintf_r+0x112>
 8006e9a:	3501      	adds	r5, #1
 8006e9c:	e7b0      	b.n	8006e00 <_svfiprintf_r+0x48>
 8006e9e:	4b41      	ldr	r3, [pc, #260]	; (8006fa4 <_svfiprintf_r+0x1ec>)
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	1ac0      	subs	r0, r0, r3
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	4083      	lsls	r3, r0
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	002e      	movs	r6, r5
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	e7ce      	b.n	8006e4e <_svfiprintf_r+0x96>
 8006eb0:	9b07      	ldr	r3, [sp, #28]
 8006eb2:	1d19      	adds	r1, r3, #4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	9107      	str	r1, [sp, #28]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	db01      	blt.n	8006ec0 <_svfiprintf_r+0x108>
 8006ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ebe:	e004      	b.n	8006eca <_svfiprintf_r+0x112>
 8006ec0:	425b      	negs	r3, r3
 8006ec2:	60e3      	str	r3, [r4, #12]
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	782b      	ldrb	r3, [r5, #0]
 8006ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ece:	d10a      	bne.n	8006ee6 <_svfiprintf_r+0x12e>
 8006ed0:	786b      	ldrb	r3, [r5, #1]
 8006ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed4:	d135      	bne.n	8006f42 <_svfiprintf_r+0x18a>
 8006ed6:	9b07      	ldr	r3, [sp, #28]
 8006ed8:	3502      	adds	r5, #2
 8006eda:	1d1a      	adds	r2, r3, #4
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	9207      	str	r2, [sp, #28]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	db2b      	blt.n	8006f3c <_svfiprintf_r+0x184>
 8006ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee6:	4e30      	ldr	r6, [pc, #192]	; (8006fa8 <_svfiprintf_r+0x1f0>)
 8006ee8:	2203      	movs	r2, #3
 8006eea:	0030      	movs	r0, r6
 8006eec:	7829      	ldrb	r1, [r5, #0]
 8006eee:	f000 f9e5 	bl	80072bc <memchr>
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d006      	beq.n	8006f04 <_svfiprintf_r+0x14c>
 8006ef6:	2340      	movs	r3, #64	; 0x40
 8006ef8:	1b80      	subs	r0, r0, r6
 8006efa:	4083      	lsls	r3, r0
 8006efc:	6822      	ldr	r2, [r4, #0]
 8006efe:	3501      	adds	r5, #1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	6023      	str	r3, [r4, #0]
 8006f04:	7829      	ldrb	r1, [r5, #0]
 8006f06:	2206      	movs	r2, #6
 8006f08:	4828      	ldr	r0, [pc, #160]	; (8006fac <_svfiprintf_r+0x1f4>)
 8006f0a:	1c6e      	adds	r6, r5, #1
 8006f0c:	7621      	strb	r1, [r4, #24]
 8006f0e:	f000 f9d5 	bl	80072bc <memchr>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d03c      	beq.n	8006f90 <_svfiprintf_r+0x1d8>
 8006f16:	4b26      	ldr	r3, [pc, #152]	; (8006fb0 <_svfiprintf_r+0x1f8>)
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d125      	bne.n	8006f68 <_svfiprintf_r+0x1b0>
 8006f1c:	2207      	movs	r2, #7
 8006f1e:	9b07      	ldr	r3, [sp, #28]
 8006f20:	3307      	adds	r3, #7
 8006f22:	4393      	bics	r3, r2
 8006f24:	3308      	adds	r3, #8
 8006f26:	9307      	str	r3, [sp, #28]
 8006f28:	6963      	ldr	r3, [r4, #20]
 8006f2a:	9a04      	ldr	r2, [sp, #16]
 8006f2c:	189b      	adds	r3, r3, r2
 8006f2e:	6163      	str	r3, [r4, #20]
 8006f30:	e765      	b.n	8006dfe <_svfiprintf_r+0x46>
 8006f32:	4343      	muls	r3, r0
 8006f34:	0035      	movs	r5, r6
 8006f36:	2101      	movs	r1, #1
 8006f38:	189b      	adds	r3, r3, r2
 8006f3a:	e7a6      	b.n	8006e8a <_svfiprintf_r+0xd2>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	425b      	negs	r3, r3
 8006f40:	e7d0      	b.n	8006ee4 <_svfiprintf_r+0x12c>
 8006f42:	2300      	movs	r3, #0
 8006f44:	200a      	movs	r0, #10
 8006f46:	001a      	movs	r2, r3
 8006f48:	3501      	adds	r5, #1
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	7829      	ldrb	r1, [r5, #0]
 8006f4e:	1c6e      	adds	r6, r5, #1
 8006f50:	3930      	subs	r1, #48	; 0x30
 8006f52:	2909      	cmp	r1, #9
 8006f54:	d903      	bls.n	8006f5e <_svfiprintf_r+0x1a6>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0c5      	beq.n	8006ee6 <_svfiprintf_r+0x12e>
 8006f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f5c:	e7c3      	b.n	8006ee6 <_svfiprintf_r+0x12e>
 8006f5e:	4342      	muls	r2, r0
 8006f60:	0035      	movs	r5, r6
 8006f62:	2301      	movs	r3, #1
 8006f64:	1852      	adds	r2, r2, r1
 8006f66:	e7f1      	b.n	8006f4c <_svfiprintf_r+0x194>
 8006f68:	ab07      	add	r3, sp, #28
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	003a      	movs	r2, r7
 8006f6e:	0021      	movs	r1, r4
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <_svfiprintf_r+0x1fc>)
 8006f72:	9803      	ldr	r0, [sp, #12]
 8006f74:	e000      	b.n	8006f78 <_svfiprintf_r+0x1c0>
 8006f76:	bf00      	nop
 8006f78:	9004      	str	r0, [sp, #16]
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	d1d3      	bne.n	8006f28 <_svfiprintf_r+0x170>
 8006f80:	89bb      	ldrh	r3, [r7, #12]
 8006f82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f84:	065b      	lsls	r3, r3, #25
 8006f86:	d400      	bmi.n	8006f8a <_svfiprintf_r+0x1d2>
 8006f88:	e72d      	b.n	8006de6 <_svfiprintf_r+0x2e>
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	4240      	negs	r0, r0
 8006f8e:	e72a      	b.n	8006de6 <_svfiprintf_r+0x2e>
 8006f90:	ab07      	add	r3, sp, #28
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	003a      	movs	r2, r7
 8006f96:	0021      	movs	r1, r4
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <_svfiprintf_r+0x1fc>)
 8006f9a:	9803      	ldr	r0, [sp, #12]
 8006f9c:	f000 f87c 	bl	8007098 <_printf_i>
 8006fa0:	e7ea      	b.n	8006f78 <_svfiprintf_r+0x1c0>
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	08007a24 	.word	0x08007a24
 8006fa8:	08007a2a 	.word	0x08007a2a
 8006fac:	08007a2e 	.word	0x08007a2e
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	08006cf5 	.word	0x08006cf5

08006fb8 <_printf_common>:
 8006fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fba:	0015      	movs	r5, r2
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	688a      	ldr	r2, [r1, #8]
 8006fc0:	690b      	ldr	r3, [r1, #16]
 8006fc2:	000c      	movs	r4, r1
 8006fc4:	9000      	str	r0, [sp, #0]
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	da00      	bge.n	8006fcc <_printf_common+0x14>
 8006fca:	0013      	movs	r3, r2
 8006fcc:	0022      	movs	r2, r4
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	3243      	adds	r2, #67	; 0x43
 8006fd2:	7812      	ldrb	r2, [r2, #0]
 8006fd4:	2a00      	cmp	r2, #0
 8006fd6:	d001      	beq.n	8006fdc <_printf_common+0x24>
 8006fd8:	3301      	adds	r3, #1
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	069b      	lsls	r3, r3, #26
 8006fe0:	d502      	bpl.n	8006fe8 <_printf_common+0x30>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	2306      	movs	r3, #6
 8006fec:	0017      	movs	r7, r2
 8006fee:	401f      	ands	r7, r3
 8006ff0:	421a      	tst	r2, r3
 8006ff2:	d027      	beq.n	8007044 <_printf_common+0x8c>
 8006ff4:	0023      	movs	r3, r4
 8006ff6:	3343      	adds	r3, #67	; 0x43
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	1e5a      	subs	r2, r3, #1
 8006ffc:	4193      	sbcs	r3, r2
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	0692      	lsls	r2, r2, #26
 8007002:	d430      	bmi.n	8007066 <_printf_common+0xae>
 8007004:	0022      	movs	r2, r4
 8007006:	9901      	ldr	r1, [sp, #4]
 8007008:	9800      	ldr	r0, [sp, #0]
 800700a:	9e08      	ldr	r6, [sp, #32]
 800700c:	3243      	adds	r2, #67	; 0x43
 800700e:	47b0      	blx	r6
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d025      	beq.n	8007060 <_printf_common+0xa8>
 8007014:	2306      	movs	r3, #6
 8007016:	6820      	ldr	r0, [r4, #0]
 8007018:	682a      	ldr	r2, [r5, #0]
 800701a:	68e1      	ldr	r1, [r4, #12]
 800701c:	2500      	movs	r5, #0
 800701e:	4003      	ands	r3, r0
 8007020:	2b04      	cmp	r3, #4
 8007022:	d103      	bne.n	800702c <_printf_common+0x74>
 8007024:	1a8d      	subs	r5, r1, r2
 8007026:	43eb      	mvns	r3, r5
 8007028:	17db      	asrs	r3, r3, #31
 800702a:	401d      	ands	r5, r3
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	6922      	ldr	r2, [r4, #16]
 8007030:	4293      	cmp	r3, r2
 8007032:	dd01      	ble.n	8007038 <_printf_common+0x80>
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	18ed      	adds	r5, r5, r3
 8007038:	2700      	movs	r7, #0
 800703a:	42bd      	cmp	r5, r7
 800703c:	d120      	bne.n	8007080 <_printf_common+0xc8>
 800703e:	2000      	movs	r0, #0
 8007040:	e010      	b.n	8007064 <_printf_common+0xac>
 8007042:	3701      	adds	r7, #1
 8007044:	68e3      	ldr	r3, [r4, #12]
 8007046:	682a      	ldr	r2, [r5, #0]
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	42bb      	cmp	r3, r7
 800704c:	ddd2      	ble.n	8006ff4 <_printf_common+0x3c>
 800704e:	0022      	movs	r2, r4
 8007050:	2301      	movs	r3, #1
 8007052:	9901      	ldr	r1, [sp, #4]
 8007054:	9800      	ldr	r0, [sp, #0]
 8007056:	9e08      	ldr	r6, [sp, #32]
 8007058:	3219      	adds	r2, #25
 800705a:	47b0      	blx	r6
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d1f0      	bne.n	8007042 <_printf_common+0x8a>
 8007060:	2001      	movs	r0, #1
 8007062:	4240      	negs	r0, r0
 8007064:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007066:	2030      	movs	r0, #48	; 0x30
 8007068:	18e1      	adds	r1, r4, r3
 800706a:	3143      	adds	r1, #67	; 0x43
 800706c:	7008      	strb	r0, [r1, #0]
 800706e:	0021      	movs	r1, r4
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	3145      	adds	r1, #69	; 0x45
 8007074:	7809      	ldrb	r1, [r1, #0]
 8007076:	18a2      	adds	r2, r4, r2
 8007078:	3243      	adds	r2, #67	; 0x43
 800707a:	3302      	adds	r3, #2
 800707c:	7011      	strb	r1, [r2, #0]
 800707e:	e7c1      	b.n	8007004 <_printf_common+0x4c>
 8007080:	0022      	movs	r2, r4
 8007082:	2301      	movs	r3, #1
 8007084:	9901      	ldr	r1, [sp, #4]
 8007086:	9800      	ldr	r0, [sp, #0]
 8007088:	9e08      	ldr	r6, [sp, #32]
 800708a:	321a      	adds	r2, #26
 800708c:	47b0      	blx	r6
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d0e6      	beq.n	8007060 <_printf_common+0xa8>
 8007092:	3701      	adds	r7, #1
 8007094:	e7d1      	b.n	800703a <_printf_common+0x82>
	...

08007098 <_printf_i>:
 8007098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709a:	b08b      	sub	sp, #44	; 0x2c
 800709c:	9206      	str	r2, [sp, #24]
 800709e:	000a      	movs	r2, r1
 80070a0:	3243      	adds	r2, #67	; 0x43
 80070a2:	9307      	str	r3, [sp, #28]
 80070a4:	9005      	str	r0, [sp, #20]
 80070a6:	9204      	str	r2, [sp, #16]
 80070a8:	7e0a      	ldrb	r2, [r1, #24]
 80070aa:	000c      	movs	r4, r1
 80070ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070ae:	2a78      	cmp	r2, #120	; 0x78
 80070b0:	d807      	bhi.n	80070c2 <_printf_i+0x2a>
 80070b2:	2a62      	cmp	r2, #98	; 0x62
 80070b4:	d809      	bhi.n	80070ca <_printf_i+0x32>
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	d100      	bne.n	80070bc <_printf_i+0x24>
 80070ba:	e0c1      	b.n	8007240 <_printf_i+0x1a8>
 80070bc:	2a58      	cmp	r2, #88	; 0x58
 80070be:	d100      	bne.n	80070c2 <_printf_i+0x2a>
 80070c0:	e08c      	b.n	80071dc <_printf_i+0x144>
 80070c2:	0026      	movs	r6, r4
 80070c4:	3642      	adds	r6, #66	; 0x42
 80070c6:	7032      	strb	r2, [r6, #0]
 80070c8:	e022      	b.n	8007110 <_printf_i+0x78>
 80070ca:	0010      	movs	r0, r2
 80070cc:	3863      	subs	r0, #99	; 0x63
 80070ce:	2815      	cmp	r0, #21
 80070d0:	d8f7      	bhi.n	80070c2 <_printf_i+0x2a>
 80070d2:	f7f9 f82b 	bl	800012c <__gnu_thumb1_case_shi>
 80070d6:	0016      	.short	0x0016
 80070d8:	fff6001f 	.word	0xfff6001f
 80070dc:	fff6fff6 	.word	0xfff6fff6
 80070e0:	001ffff6 	.word	0x001ffff6
 80070e4:	fff6fff6 	.word	0xfff6fff6
 80070e8:	fff6fff6 	.word	0xfff6fff6
 80070ec:	003600a8 	.word	0x003600a8
 80070f0:	fff6009a 	.word	0xfff6009a
 80070f4:	00b9fff6 	.word	0x00b9fff6
 80070f8:	0036fff6 	.word	0x0036fff6
 80070fc:	fff6fff6 	.word	0xfff6fff6
 8007100:	009e      	.short	0x009e
 8007102:	0026      	movs	r6, r4
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	3642      	adds	r6, #66	; 0x42
 8007108:	1d11      	adds	r1, r2, #4
 800710a:	6019      	str	r1, [r3, #0]
 800710c:	6813      	ldr	r3, [r2, #0]
 800710e:	7033      	strb	r3, [r6, #0]
 8007110:	2301      	movs	r3, #1
 8007112:	e0a7      	b.n	8007264 <_printf_i+0x1cc>
 8007114:	6808      	ldr	r0, [r1, #0]
 8007116:	6819      	ldr	r1, [r3, #0]
 8007118:	1d0a      	adds	r2, r1, #4
 800711a:	0605      	lsls	r5, r0, #24
 800711c:	d50b      	bpl.n	8007136 <_printf_i+0x9e>
 800711e:	680d      	ldr	r5, [r1, #0]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	2d00      	cmp	r5, #0
 8007124:	da03      	bge.n	800712e <_printf_i+0x96>
 8007126:	232d      	movs	r3, #45	; 0x2d
 8007128:	9a04      	ldr	r2, [sp, #16]
 800712a:	426d      	negs	r5, r5
 800712c:	7013      	strb	r3, [r2, #0]
 800712e:	4b61      	ldr	r3, [pc, #388]	; (80072b4 <_printf_i+0x21c>)
 8007130:	270a      	movs	r7, #10
 8007132:	9303      	str	r3, [sp, #12]
 8007134:	e01b      	b.n	800716e <_printf_i+0xd6>
 8007136:	680d      	ldr	r5, [r1, #0]
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	0641      	lsls	r1, r0, #25
 800713c:	d5f1      	bpl.n	8007122 <_printf_i+0x8a>
 800713e:	b22d      	sxth	r5, r5
 8007140:	e7ef      	b.n	8007122 <_printf_i+0x8a>
 8007142:	680d      	ldr	r5, [r1, #0]
 8007144:	6819      	ldr	r1, [r3, #0]
 8007146:	1d08      	adds	r0, r1, #4
 8007148:	6018      	str	r0, [r3, #0]
 800714a:	062e      	lsls	r6, r5, #24
 800714c:	d501      	bpl.n	8007152 <_printf_i+0xba>
 800714e:	680d      	ldr	r5, [r1, #0]
 8007150:	e003      	b.n	800715a <_printf_i+0xc2>
 8007152:	066d      	lsls	r5, r5, #25
 8007154:	d5fb      	bpl.n	800714e <_printf_i+0xb6>
 8007156:	680d      	ldr	r5, [r1, #0]
 8007158:	b2ad      	uxth	r5, r5
 800715a:	4b56      	ldr	r3, [pc, #344]	; (80072b4 <_printf_i+0x21c>)
 800715c:	2708      	movs	r7, #8
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	2a6f      	cmp	r2, #111	; 0x6f
 8007162:	d000      	beq.n	8007166 <_printf_i+0xce>
 8007164:	3702      	adds	r7, #2
 8007166:	0023      	movs	r3, r4
 8007168:	2200      	movs	r2, #0
 800716a:	3343      	adds	r3, #67	; 0x43
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	60a3      	str	r3, [r4, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	db03      	blt.n	800717e <_printf_i+0xe6>
 8007176:	2204      	movs	r2, #4
 8007178:	6821      	ldr	r1, [r4, #0]
 800717a:	4391      	bics	r1, r2
 800717c:	6021      	str	r1, [r4, #0]
 800717e:	2d00      	cmp	r5, #0
 8007180:	d102      	bne.n	8007188 <_printf_i+0xf0>
 8007182:	9e04      	ldr	r6, [sp, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00c      	beq.n	80071a2 <_printf_i+0x10a>
 8007188:	9e04      	ldr	r6, [sp, #16]
 800718a:	0028      	movs	r0, r5
 800718c:	0039      	movs	r1, r7
 800718e:	f7f9 f85d 	bl	800024c <__aeabi_uidivmod>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	3e01      	subs	r6, #1
 8007196:	5c5b      	ldrb	r3, [r3, r1]
 8007198:	7033      	strb	r3, [r6, #0]
 800719a:	002b      	movs	r3, r5
 800719c:	0005      	movs	r5, r0
 800719e:	429f      	cmp	r7, r3
 80071a0:	d9f3      	bls.n	800718a <_printf_i+0xf2>
 80071a2:	2f08      	cmp	r7, #8
 80071a4:	d109      	bne.n	80071ba <_printf_i+0x122>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	07db      	lsls	r3, r3, #31
 80071aa:	d506      	bpl.n	80071ba <_printf_i+0x122>
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	6922      	ldr	r2, [r4, #16]
 80071b0:	4293      	cmp	r3, r2
 80071b2:	dc02      	bgt.n	80071ba <_printf_i+0x122>
 80071b4:	2330      	movs	r3, #48	; 0x30
 80071b6:	3e01      	subs	r6, #1
 80071b8:	7033      	strb	r3, [r6, #0]
 80071ba:	9b04      	ldr	r3, [sp, #16]
 80071bc:	1b9b      	subs	r3, r3, r6
 80071be:	6123      	str	r3, [r4, #16]
 80071c0:	9b07      	ldr	r3, [sp, #28]
 80071c2:	0021      	movs	r1, r4
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	9805      	ldr	r0, [sp, #20]
 80071c8:	9b06      	ldr	r3, [sp, #24]
 80071ca:	aa09      	add	r2, sp, #36	; 0x24
 80071cc:	f7ff fef4 	bl	8006fb8 <_printf_common>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d14c      	bne.n	800726e <_printf_i+0x1d6>
 80071d4:	2001      	movs	r0, #1
 80071d6:	4240      	negs	r0, r0
 80071d8:	b00b      	add	sp, #44	; 0x2c
 80071da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071dc:	3145      	adds	r1, #69	; 0x45
 80071de:	700a      	strb	r2, [r1, #0]
 80071e0:	4a34      	ldr	r2, [pc, #208]	; (80072b4 <_printf_i+0x21c>)
 80071e2:	9203      	str	r2, [sp, #12]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	6821      	ldr	r1, [r4, #0]
 80071e8:	ca20      	ldmia	r2!, {r5}
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	0608      	lsls	r0, r1, #24
 80071ee:	d516      	bpl.n	800721e <_printf_i+0x186>
 80071f0:	07cb      	lsls	r3, r1, #31
 80071f2:	d502      	bpl.n	80071fa <_printf_i+0x162>
 80071f4:	2320      	movs	r3, #32
 80071f6:	4319      	orrs	r1, r3
 80071f8:	6021      	str	r1, [r4, #0]
 80071fa:	2710      	movs	r7, #16
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	d1b2      	bne.n	8007166 <_printf_i+0xce>
 8007200:	2320      	movs	r3, #32
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	439a      	bics	r2, r3
 8007206:	6022      	str	r2, [r4, #0]
 8007208:	e7ad      	b.n	8007166 <_printf_i+0xce>
 800720a:	2220      	movs	r2, #32
 800720c:	6809      	ldr	r1, [r1, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	0022      	movs	r2, r4
 8007214:	2178      	movs	r1, #120	; 0x78
 8007216:	3245      	adds	r2, #69	; 0x45
 8007218:	7011      	strb	r1, [r2, #0]
 800721a:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <_printf_i+0x220>)
 800721c:	e7e1      	b.n	80071e2 <_printf_i+0x14a>
 800721e:	0648      	lsls	r0, r1, #25
 8007220:	d5e6      	bpl.n	80071f0 <_printf_i+0x158>
 8007222:	b2ad      	uxth	r5, r5
 8007224:	e7e4      	b.n	80071f0 <_printf_i+0x158>
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	680d      	ldr	r5, [r1, #0]
 800722a:	1d10      	adds	r0, r2, #4
 800722c:	6949      	ldr	r1, [r1, #20]
 800722e:	6018      	str	r0, [r3, #0]
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	062e      	lsls	r6, r5, #24
 8007234:	d501      	bpl.n	800723a <_printf_i+0x1a2>
 8007236:	6019      	str	r1, [r3, #0]
 8007238:	e002      	b.n	8007240 <_printf_i+0x1a8>
 800723a:	066d      	lsls	r5, r5, #25
 800723c:	d5fb      	bpl.n	8007236 <_printf_i+0x19e>
 800723e:	8019      	strh	r1, [r3, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	9e04      	ldr	r6, [sp, #16]
 8007244:	6123      	str	r3, [r4, #16]
 8007246:	e7bb      	b.n	80071c0 <_printf_i+0x128>
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	1d11      	adds	r1, r2, #4
 800724c:	6019      	str	r1, [r3, #0]
 800724e:	6816      	ldr	r6, [r2, #0]
 8007250:	2100      	movs	r1, #0
 8007252:	0030      	movs	r0, r6
 8007254:	6862      	ldr	r2, [r4, #4]
 8007256:	f000 f831 	bl	80072bc <memchr>
 800725a:	2800      	cmp	r0, #0
 800725c:	d001      	beq.n	8007262 <_printf_i+0x1ca>
 800725e:	1b80      	subs	r0, r0, r6
 8007260:	6060      	str	r0, [r4, #4]
 8007262:	6863      	ldr	r3, [r4, #4]
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	2300      	movs	r3, #0
 8007268:	9a04      	ldr	r2, [sp, #16]
 800726a:	7013      	strb	r3, [r2, #0]
 800726c:	e7a8      	b.n	80071c0 <_printf_i+0x128>
 800726e:	6923      	ldr	r3, [r4, #16]
 8007270:	0032      	movs	r2, r6
 8007272:	9906      	ldr	r1, [sp, #24]
 8007274:	9805      	ldr	r0, [sp, #20]
 8007276:	9d07      	ldr	r5, [sp, #28]
 8007278:	47a8      	blx	r5
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d0aa      	beq.n	80071d4 <_printf_i+0x13c>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	079b      	lsls	r3, r3, #30
 8007282:	d415      	bmi.n	80072b0 <_printf_i+0x218>
 8007284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007286:	68e0      	ldr	r0, [r4, #12]
 8007288:	4298      	cmp	r0, r3
 800728a:	daa5      	bge.n	80071d8 <_printf_i+0x140>
 800728c:	0018      	movs	r0, r3
 800728e:	e7a3      	b.n	80071d8 <_printf_i+0x140>
 8007290:	0022      	movs	r2, r4
 8007292:	2301      	movs	r3, #1
 8007294:	9906      	ldr	r1, [sp, #24]
 8007296:	9805      	ldr	r0, [sp, #20]
 8007298:	9e07      	ldr	r6, [sp, #28]
 800729a:	3219      	adds	r2, #25
 800729c:	47b0      	blx	r6
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d098      	beq.n	80071d4 <_printf_i+0x13c>
 80072a2:	3501      	adds	r5, #1
 80072a4:	68e3      	ldr	r3, [r4, #12]
 80072a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	42ab      	cmp	r3, r5
 80072ac:	dcf0      	bgt.n	8007290 <_printf_i+0x1f8>
 80072ae:	e7e9      	b.n	8007284 <_printf_i+0x1ec>
 80072b0:	2500      	movs	r5, #0
 80072b2:	e7f7      	b.n	80072a4 <_printf_i+0x20c>
 80072b4:	08007a35 	.word	0x08007a35
 80072b8:	08007a46 	.word	0x08007a46

080072bc <memchr>:
 80072bc:	b2c9      	uxtb	r1, r1
 80072be:	1882      	adds	r2, r0, r2
 80072c0:	4290      	cmp	r0, r2
 80072c2:	d101      	bne.n	80072c8 <memchr+0xc>
 80072c4:	2000      	movs	r0, #0
 80072c6:	4770      	bx	lr
 80072c8:	7803      	ldrb	r3, [r0, #0]
 80072ca:	428b      	cmp	r3, r1
 80072cc:	d0fb      	beq.n	80072c6 <memchr+0xa>
 80072ce:	3001      	adds	r0, #1
 80072d0:	e7f6      	b.n	80072c0 <memchr+0x4>

080072d2 <memmove>:
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4288      	cmp	r0, r1
 80072d6:	d902      	bls.n	80072de <memmove+0xc>
 80072d8:	188b      	adds	r3, r1, r2
 80072da:	4298      	cmp	r0, r3
 80072dc:	d303      	bcc.n	80072e6 <memmove+0x14>
 80072de:	2300      	movs	r3, #0
 80072e0:	e007      	b.n	80072f2 <memmove+0x20>
 80072e2:	5c8b      	ldrb	r3, [r1, r2]
 80072e4:	5483      	strb	r3, [r0, r2]
 80072e6:	3a01      	subs	r2, #1
 80072e8:	d2fb      	bcs.n	80072e2 <memmove+0x10>
 80072ea:	bd10      	pop	{r4, pc}
 80072ec:	5ccc      	ldrb	r4, [r1, r3]
 80072ee:	54c4      	strb	r4, [r0, r3]
 80072f0:	3301      	adds	r3, #1
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d1fa      	bne.n	80072ec <memmove+0x1a>
 80072f6:	e7f8      	b.n	80072ea <memmove+0x18>

080072f8 <_free_r>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	0005      	movs	r5, r0
 80072fc:	2900      	cmp	r1, #0
 80072fe:	d010      	beq.n	8007322 <_free_r+0x2a>
 8007300:	1f0c      	subs	r4, r1, #4
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	da00      	bge.n	800730a <_free_r+0x12>
 8007308:	18e4      	adds	r4, r4, r3
 800730a:	0028      	movs	r0, r5
 800730c:	f000 f918 	bl	8007540 <__malloc_lock>
 8007310:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <_free_r+0x90>)
 8007312:	6813      	ldr	r3, [r2, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d105      	bne.n	8007324 <_free_r+0x2c>
 8007318:	6063      	str	r3, [r4, #4]
 800731a:	6014      	str	r4, [r2, #0]
 800731c:	0028      	movs	r0, r5
 800731e:	f000 f917 	bl	8007550 <__malloc_unlock>
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	42a3      	cmp	r3, r4
 8007326:	d908      	bls.n	800733a <_free_r+0x42>
 8007328:	6821      	ldr	r1, [r4, #0]
 800732a:	1860      	adds	r0, r4, r1
 800732c:	4283      	cmp	r3, r0
 800732e:	d1f3      	bne.n	8007318 <_free_r+0x20>
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	1841      	adds	r1, r0, r1
 8007336:	6021      	str	r1, [r4, #0]
 8007338:	e7ee      	b.n	8007318 <_free_r+0x20>
 800733a:	001a      	movs	r2, r3
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <_free_r+0x4e>
 8007342:	42a3      	cmp	r3, r4
 8007344:	d9f9      	bls.n	800733a <_free_r+0x42>
 8007346:	6811      	ldr	r1, [r2, #0]
 8007348:	1850      	adds	r0, r2, r1
 800734a:	42a0      	cmp	r0, r4
 800734c:	d10b      	bne.n	8007366 <_free_r+0x6e>
 800734e:	6820      	ldr	r0, [r4, #0]
 8007350:	1809      	adds	r1, r1, r0
 8007352:	1850      	adds	r0, r2, r1
 8007354:	6011      	str	r1, [r2, #0]
 8007356:	4283      	cmp	r3, r0
 8007358:	d1e0      	bne.n	800731c <_free_r+0x24>
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	1841      	adds	r1, r0, r1
 8007360:	6011      	str	r1, [r2, #0]
 8007362:	6053      	str	r3, [r2, #4]
 8007364:	e7da      	b.n	800731c <_free_r+0x24>
 8007366:	42a0      	cmp	r0, r4
 8007368:	d902      	bls.n	8007370 <_free_r+0x78>
 800736a:	230c      	movs	r3, #12
 800736c:	602b      	str	r3, [r5, #0]
 800736e:	e7d5      	b.n	800731c <_free_r+0x24>
 8007370:	6821      	ldr	r1, [r4, #0]
 8007372:	1860      	adds	r0, r4, r1
 8007374:	4283      	cmp	r3, r0
 8007376:	d103      	bne.n	8007380 <_free_r+0x88>
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	1841      	adds	r1, r0, r1
 800737e:	6021      	str	r1, [r4, #0]
 8007380:	6063      	str	r3, [r4, #4]
 8007382:	6054      	str	r4, [r2, #4]
 8007384:	e7ca      	b.n	800731c <_free_r+0x24>
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	20001734 	.word	0x20001734

0800738c <sbrk_aligned>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4e0f      	ldr	r6, [pc, #60]	; (80073cc <sbrk_aligned+0x40>)
 8007390:	000d      	movs	r5, r1
 8007392:	6831      	ldr	r1, [r6, #0]
 8007394:	0004      	movs	r4, r0
 8007396:	2900      	cmp	r1, #0
 8007398:	d102      	bne.n	80073a0 <sbrk_aligned+0x14>
 800739a:	f000 f8bf 	bl	800751c <_sbrk_r>
 800739e:	6030      	str	r0, [r6, #0]
 80073a0:	0029      	movs	r1, r5
 80073a2:	0020      	movs	r0, r4
 80073a4:	f000 f8ba 	bl	800751c <_sbrk_r>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d00a      	beq.n	80073c2 <sbrk_aligned+0x36>
 80073ac:	2303      	movs	r3, #3
 80073ae:	1cc5      	adds	r5, r0, #3
 80073b0:	439d      	bics	r5, r3
 80073b2:	42a8      	cmp	r0, r5
 80073b4:	d007      	beq.n	80073c6 <sbrk_aligned+0x3a>
 80073b6:	1a29      	subs	r1, r5, r0
 80073b8:	0020      	movs	r0, r4
 80073ba:	f000 f8af 	bl	800751c <_sbrk_r>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d101      	bne.n	80073c6 <sbrk_aligned+0x3a>
 80073c2:	2501      	movs	r5, #1
 80073c4:	426d      	negs	r5, r5
 80073c6:	0028      	movs	r0, r5
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	20001738 	.word	0x20001738

080073d0 <_malloc_r>:
 80073d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073d2:	2203      	movs	r2, #3
 80073d4:	1ccb      	adds	r3, r1, #3
 80073d6:	4393      	bics	r3, r2
 80073d8:	3308      	adds	r3, #8
 80073da:	0006      	movs	r6, r0
 80073dc:	001f      	movs	r7, r3
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d232      	bcs.n	8007448 <_malloc_r+0x78>
 80073e2:	270c      	movs	r7, #12
 80073e4:	42b9      	cmp	r1, r7
 80073e6:	d831      	bhi.n	800744c <_malloc_r+0x7c>
 80073e8:	0030      	movs	r0, r6
 80073ea:	f000 f8a9 	bl	8007540 <__malloc_lock>
 80073ee:	4d32      	ldr	r5, [pc, #200]	; (80074b8 <_malloc_r+0xe8>)
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	001c      	movs	r4, r3
 80073f4:	2c00      	cmp	r4, #0
 80073f6:	d12e      	bne.n	8007456 <_malloc_r+0x86>
 80073f8:	0039      	movs	r1, r7
 80073fa:	0030      	movs	r0, r6
 80073fc:	f7ff ffc6 	bl	800738c <sbrk_aligned>
 8007400:	0004      	movs	r4, r0
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d11e      	bne.n	8007444 <_malloc_r+0x74>
 8007406:	682c      	ldr	r4, [r5, #0]
 8007408:	0025      	movs	r5, r4
 800740a:	2d00      	cmp	r5, #0
 800740c:	d14a      	bne.n	80074a4 <_malloc_r+0xd4>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	0029      	movs	r1, r5
 8007412:	18e3      	adds	r3, r4, r3
 8007414:	0030      	movs	r0, r6
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	f000 f880 	bl	800751c <_sbrk_r>
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	4283      	cmp	r3, r0
 8007420:	d143      	bne.n	80074aa <_malloc_r+0xda>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	3703      	adds	r7, #3
 8007426:	1aff      	subs	r7, r7, r3
 8007428:	2303      	movs	r3, #3
 800742a:	439f      	bics	r7, r3
 800742c:	3708      	adds	r7, #8
 800742e:	2f0c      	cmp	r7, #12
 8007430:	d200      	bcs.n	8007434 <_malloc_r+0x64>
 8007432:	270c      	movs	r7, #12
 8007434:	0039      	movs	r1, r7
 8007436:	0030      	movs	r0, r6
 8007438:	f7ff ffa8 	bl	800738c <sbrk_aligned>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d034      	beq.n	80074aa <_malloc_r+0xda>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	19df      	adds	r7, r3, r7
 8007444:	6027      	str	r7, [r4, #0]
 8007446:	e013      	b.n	8007470 <_malloc_r+0xa0>
 8007448:	2b00      	cmp	r3, #0
 800744a:	dacb      	bge.n	80073e4 <_malloc_r+0x14>
 800744c:	230c      	movs	r3, #12
 800744e:	2500      	movs	r5, #0
 8007450:	6033      	str	r3, [r6, #0]
 8007452:	0028      	movs	r0, r5
 8007454:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	1bd1      	subs	r1, r2, r7
 800745a:	d420      	bmi.n	800749e <_malloc_r+0xce>
 800745c:	290b      	cmp	r1, #11
 800745e:	d917      	bls.n	8007490 <_malloc_r+0xc0>
 8007460:	19e2      	adds	r2, r4, r7
 8007462:	6027      	str	r7, [r4, #0]
 8007464:	42a3      	cmp	r3, r4
 8007466:	d111      	bne.n	800748c <_malloc_r+0xbc>
 8007468:	602a      	str	r2, [r5, #0]
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	6011      	str	r1, [r2, #0]
 800746e:	6053      	str	r3, [r2, #4]
 8007470:	0030      	movs	r0, r6
 8007472:	0025      	movs	r5, r4
 8007474:	f000 f86c 	bl	8007550 <__malloc_unlock>
 8007478:	2207      	movs	r2, #7
 800747a:	350b      	adds	r5, #11
 800747c:	1d23      	adds	r3, r4, #4
 800747e:	4395      	bics	r5, r2
 8007480:	1aea      	subs	r2, r5, r3
 8007482:	429d      	cmp	r5, r3
 8007484:	d0e5      	beq.n	8007452 <_malloc_r+0x82>
 8007486:	1b5b      	subs	r3, r3, r5
 8007488:	50a3      	str	r3, [r4, r2]
 800748a:	e7e2      	b.n	8007452 <_malloc_r+0x82>
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	e7ec      	b.n	800746a <_malloc_r+0x9a>
 8007490:	6862      	ldr	r2, [r4, #4]
 8007492:	42a3      	cmp	r3, r4
 8007494:	d101      	bne.n	800749a <_malloc_r+0xca>
 8007496:	602a      	str	r2, [r5, #0]
 8007498:	e7ea      	b.n	8007470 <_malloc_r+0xa0>
 800749a:	605a      	str	r2, [r3, #4]
 800749c:	e7e8      	b.n	8007470 <_malloc_r+0xa0>
 800749e:	0023      	movs	r3, r4
 80074a0:	6864      	ldr	r4, [r4, #4]
 80074a2:	e7a7      	b.n	80073f4 <_malloc_r+0x24>
 80074a4:	002c      	movs	r4, r5
 80074a6:	686d      	ldr	r5, [r5, #4]
 80074a8:	e7af      	b.n	800740a <_malloc_r+0x3a>
 80074aa:	230c      	movs	r3, #12
 80074ac:	0030      	movs	r0, r6
 80074ae:	6033      	str	r3, [r6, #0]
 80074b0:	f000 f84e 	bl	8007550 <__malloc_unlock>
 80074b4:	e7cd      	b.n	8007452 <_malloc_r+0x82>
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	20001734 	.word	0x20001734

080074bc <_realloc_r>:
 80074bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074be:	0007      	movs	r7, r0
 80074c0:	000e      	movs	r6, r1
 80074c2:	0014      	movs	r4, r2
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d105      	bne.n	80074d4 <_realloc_r+0x18>
 80074c8:	0011      	movs	r1, r2
 80074ca:	f7ff ff81 	bl	80073d0 <_malloc_r>
 80074ce:	0005      	movs	r5, r0
 80074d0:	0028      	movs	r0, r5
 80074d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	d103      	bne.n	80074e0 <_realloc_r+0x24>
 80074d8:	f7ff ff0e 	bl	80072f8 <_free_r>
 80074dc:	0025      	movs	r5, r4
 80074de:	e7f7      	b.n	80074d0 <_realloc_r+0x14>
 80074e0:	f000 f83e 	bl	8007560 <_malloc_usable_size_r>
 80074e4:	9001      	str	r0, [sp, #4]
 80074e6:	4284      	cmp	r4, r0
 80074e8:	d803      	bhi.n	80074f2 <_realloc_r+0x36>
 80074ea:	0035      	movs	r5, r6
 80074ec:	0843      	lsrs	r3, r0, #1
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	d3ee      	bcc.n	80074d0 <_realloc_r+0x14>
 80074f2:	0021      	movs	r1, r4
 80074f4:	0038      	movs	r0, r7
 80074f6:	f7ff ff6b 	bl	80073d0 <_malloc_r>
 80074fa:	1e05      	subs	r5, r0, #0
 80074fc:	d0e8      	beq.n	80074d0 <_realloc_r+0x14>
 80074fe:	9b01      	ldr	r3, [sp, #4]
 8007500:	0022      	movs	r2, r4
 8007502:	429c      	cmp	r4, r3
 8007504:	d900      	bls.n	8007508 <_realloc_r+0x4c>
 8007506:	001a      	movs	r2, r3
 8007508:	0031      	movs	r1, r6
 800750a:	0028      	movs	r0, r5
 800750c:	f7ff fbc0 	bl	8006c90 <memcpy>
 8007510:	0031      	movs	r1, r6
 8007512:	0038      	movs	r0, r7
 8007514:	f7ff fef0 	bl	80072f8 <_free_r>
 8007518:	e7da      	b.n	80074d0 <_realloc_r+0x14>
	...

0800751c <_sbrk_r>:
 800751c:	2300      	movs	r3, #0
 800751e:	b570      	push	{r4, r5, r6, lr}
 8007520:	4d06      	ldr	r5, [pc, #24]	; (800753c <_sbrk_r+0x20>)
 8007522:	0004      	movs	r4, r0
 8007524:	0008      	movs	r0, r1
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7f9 fb64 	bl	8000bf4 <_sbrk>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d103      	bne.n	8007538 <_sbrk_r+0x1c>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d000      	beq.n	8007538 <_sbrk_r+0x1c>
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	2000173c 	.word	0x2000173c

08007540 <__malloc_lock>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4802      	ldr	r0, [pc, #8]	; (800754c <__malloc_lock+0xc>)
 8007544:	f000 f814 	bl	8007570 <__retarget_lock_acquire_recursive>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	20001740 	.word	0x20001740

08007550 <__malloc_unlock>:
 8007550:	b510      	push	{r4, lr}
 8007552:	4802      	ldr	r0, [pc, #8]	; (800755c <__malloc_unlock+0xc>)
 8007554:	f000 f80d 	bl	8007572 <__retarget_lock_release_recursive>
 8007558:	bd10      	pop	{r4, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	20001740 	.word	0x20001740

08007560 <_malloc_usable_size_r>:
 8007560:	1f0b      	subs	r3, r1, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	1f18      	subs	r0, r3, #4
 8007566:	2b00      	cmp	r3, #0
 8007568:	da01      	bge.n	800756e <_malloc_usable_size_r+0xe>
 800756a:	580b      	ldr	r3, [r1, r0]
 800756c:	18c0      	adds	r0, r0, r3
 800756e:	4770      	bx	lr

08007570 <__retarget_lock_acquire_recursive>:
 8007570:	4770      	bx	lr

08007572 <__retarget_lock_release_recursive>:
 8007572:	4770      	bx	lr

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr
