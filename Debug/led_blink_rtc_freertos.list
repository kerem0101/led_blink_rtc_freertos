
led_blink_rtc_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006060  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08006120  08006120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006374  08006374  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006374  08006374  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006374  08006374  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800637c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001658  20000014  08006390  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  08006390  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dc6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003471  00000000  00000000  00035e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00039278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013e97  00000000  00000000  0003b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017816  00000000  00000000  0004f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000765ae  00000000  00000000  00066f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd4cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f8  00000000  00000000  000dd51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006108 	.word	0x08006108

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08006108 	.word	0x08006108

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b004      	add	sp, #16
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	20000030 	.word	0x20000030
 8000270:	20000084 	.word	0x20000084

08000274 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	4a06      	ldr	r2, [pc, #24]	; (800029c <vApplicationGetTimerTaskMemory+0x28>)
 8000284:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800028a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b004      	add	sp, #16
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000284 	.word	0x20000284
 80002a0:	200002d8 	.word	0x200002d8

080002a4 <led_effect_stop>:
 *      Author: kerem
 */

#include "main.h"

void led_effect_stop(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

}
 80002a8:	46c0      	nop			; (mov r8, r8)
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <led_effect>:

void led_effect(int8_t num){
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b084      	sub	sp, #16
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	0002      	movs	r2, r0
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	701a      	strb	r2, [r3, #0]

	TickType_t xDelay;

	if(num == 1){
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d102      	bne.n	80002ca <led_effect+0x1c>
		xDelay = 250 / portTICK_PERIOD_MS;
 80002c4:	23fa      	movs	r3, #250	; 0xfa
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	e014      	b.n	80002f4 <led_effect+0x46>
	}else if(num == 2){
 80002ca:	1dfb      	adds	r3, r7, #7
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	d103      	bne.n	80002dc <led_effect+0x2e>
		xDelay = 500 / portTICK_PERIOD_MS;
 80002d4:	23fa      	movs	r3, #250	; 0xfa
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e00b      	b.n	80002f4 <led_effect+0x46>
	}else if(num == 3){
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	b25b      	sxtb	r3, r3
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	d103      	bne.n	80002ee <led_effect+0x40>
		xDelay = 1000 / portTICK_PERIOD_MS;
 80002e6:	23fa      	movs	r3, #250	; 0xfa
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	e002      	b.n	80002f4 <led_effect+0x46>
	}else{
		xDelay = 2000 / portTICK_PERIOD_MS;
 80002ee:	23fa      	movs	r3, #250	; 0xfa
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	60fb      	str	r3, [r7, #12]
	}



	for(int8_t i = 0; i < 10; ++i){
 80002f4:	230b      	movs	r3, #11
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
 80002fc:	e010      	b.n	8000320 <led_effect+0x72>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002fe:	2390      	movs	r3, #144	; 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2120      	movs	r1, #32
 8000304:	0018      	movs	r0, r3
 8000306:	f000 ffe8 	bl	80012da <HAL_GPIO_TogglePin>
		vTaskDelay(xDelay);
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	0018      	movs	r0, r3
 800030e:	f004 fadb 	bl	80048c8 <vTaskDelay>
	for(int8_t i = 0; i < 10; ++i){
 8000312:	210b      	movs	r1, #11
 8000314:	187b      	adds	r3, r7, r1
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	3301      	adds	r3, #1
 800031a:	b2da      	uxtb	r2, r3
 800031c:	187b      	adds	r3, r7, r1
 800031e:	701a      	strb	r2, [r3, #0]
 8000320:	230b      	movs	r3, #11
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b25b      	sxtb	r3, r3
 8000328:	2b09      	cmp	r3, #9
 800032a:	dde8      	ble.n	80002fe <led_effect+0x50>
	}
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b004      	add	sp, #16
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b590      	push	{r4, r7, lr}
 800033a:	b08b      	sub	sp, #44	; 0x2c
 800033c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033e:	f000 fce5 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000342:	f000 f86b 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000346:	f000 f927 	bl	8000598 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800034a:	f000 f8f5 	bl	8000538 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800034e:	f000 f8cd 	bl	80004ec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(cmd_task, "cmd_task", 128, NULL, osPriorityNormal, &handle_cmd_task);
 8000352:	4923      	ldr	r1, [pc, #140]	; (80003e0 <main+0xa8>)
 8000354:	4823      	ldr	r0, [pc, #140]	; (80003e4 <main+0xac>)
 8000356:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <main+0xb0>)
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	2300      	movs	r3, #0
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2300      	movs	r3, #0
 8000360:	2280      	movs	r2, #128	; 0x80
 8000362:	f004 f987 	bl	8004674 <xTaskCreate>

  xTaskCreate(print_task, "print_task", 128, NULL, osPriorityNormal, &handle_print_task);
 8000366:	4921      	ldr	r1, [pc, #132]	; (80003ec <main+0xb4>)
 8000368:	4821      	ldr	r0, [pc, #132]	; (80003f0 <main+0xb8>)
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <main+0xbc>)
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2300      	movs	r3, #0
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2300      	movs	r3, #0
 8000374:	2280      	movs	r2, #128	; 0x80
 8000376:	f004 f97d 	bl	8004674 <xTaskCreate>

  xTaskCreate(led_task, "led_task", 128, NULL, osPriorityNormal, &handle_led_task);
 800037a:	491f      	ldr	r1, [pc, #124]	; (80003f8 <main+0xc0>)
 800037c:	481f      	ldr	r0, [pc, #124]	; (80003fc <main+0xc4>)
 800037e:	4b20      	ldr	r3, [pc, #128]	; (8000400 <main+0xc8>)
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2300      	movs	r3, #0
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2300      	movs	r3, #0
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	f004 f973 	bl	8004674 <xTaskCreate>

//  xTaskCreate(rtc_task, "rtc_task", 128, NULL, osPriorityNormal, &handle_rtc_task);

  q_data = xQueueCreate(10, sizeof(char));
 800038e:	2200      	movs	r2, #0
 8000390:	2101      	movs	r1, #1
 8000392:	200a      	movs	r0, #10
 8000394:	f003 fce0 	bl	8003d58 <xQueueGenericCreate>
 8000398:	0002      	movs	r2, r0
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <main+0xcc>)
 800039c:	601a      	str	r2, [r3, #0]

  q_print = xQueueCreate(10, sizeof(size_t));
 800039e:	2200      	movs	r2, #0
 80003a0:	2104      	movs	r1, #4
 80003a2:	200a      	movs	r0, #10
 80003a4:	f003 fcd8 	bl	8003d58 <xQueueGenericCreate>
 80003a8:	0002      	movs	r2, r0
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <main+0xd0>)
 80003ac:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 80003ae:	4917      	ldr	r1, [pc, #92]	; (800040c <main+0xd4>)
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <main+0xd8>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	0018      	movs	r0, r3
 80003b6:	f002 f997 	bl	80026e8 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, menu_task, osPriorityNormal, 0, 128);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4a15      	ldr	r2, [pc, #84]	; (8000414 <main+0xdc>)
 80003be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003c0:	c313      	stmia	r3!, {r0, r1, r4}
 80003c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003c4:	c313      	stmia	r3!, {r0, r1, r4}
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2100      	movs	r1, #0
 80003ce:	0018      	movs	r0, r3
 80003d0:	f003 fb2d 	bl	8003a2e <osThreadCreate>
 80003d4:	0002      	movs	r2, r0
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <main+0xe0>)
 80003d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003da:	f003 fb20 	bl	8003a1e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003de:	e7fe      	b.n	80003de <main+0xa6>
 80003e0:	08006144 	.word	0x08006144
 80003e4:	08000b91 	.word	0x08000b91
 80003e8:	20000784 	.word	0x20000784
 80003ec:	08006150 	.word	0x08006150
 80003f0:	08000b51 	.word	0x08000b51
 80003f4:	20000788 	.word	0x20000788
 80003f8:	0800615c 	.word	0x0800615c
 80003fc:	08000a31 	.word	0x08000a31
 8000400:	2000078c 	.word	0x2000078c
 8000404:	20000794 	.word	0x20000794
 8000408:	20000798 	.word	0x20000798
 800040c:	2000079c 	.word	0x2000079c
 8000410:	200006f8 	.word	0x200006f8
 8000414:	08006168 	.word	0x08006168
 8000418:	20000780 	.word	0x20000780

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b097      	sub	sp, #92	; 0x5c
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	2428      	movs	r4, #40	; 0x28
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2330      	movs	r3, #48	; 0x30
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f005 fe62 	bl	80060f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000432:	2318      	movs	r3, #24
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	0018      	movs	r0, r3
 8000438:	2310      	movs	r3, #16
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f005 fe5a 	bl	80060f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	0018      	movs	r0, r3
 8000446:	2314      	movs	r3, #20
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f005 fe53 	bl	80060f6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000450:	0021      	movs	r1, r4
 8000452:	187b      	adds	r3, r7, r1
 8000454:	220a      	movs	r2, #10
 8000456:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2201      	movs	r2, #1
 800045c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2210      	movs	r2, #16
 8000462:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2201      	movs	r2, #1
 8000468:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2202      	movs	r2, #2
 800046e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	0212      	lsls	r2, r2, #8
 8000476:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	0352      	lsls	r2, r2, #13
 800047e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	187b      	adds	r3, r7, r1
 8000488:	0018      	movs	r0, r3
 800048a:	f000 ff41 	bl	8001310 <HAL_RCC_OscConfig>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000492:	f000 f9b1 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	2118      	movs	r1, #24
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2207      	movs	r2, #7
 800049c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2202      	movs	r2, #2
 80004a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2101      	movs	r1, #1
 80004b4:	0018      	movs	r0, r3
 80004b6:	f001 fa49 	bl	800194c <HAL_RCC_ClockConfig>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004be:	f000 f99b 	bl	80007f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2280      	movs	r2, #128	; 0x80
 80004c6:	0252      	lsls	r2, r2, #9
 80004c8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	0092      	lsls	r2, r2, #2
 80004d0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fba9 	bl	8001c2c <HAL_RCCEx_PeriphCLKConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80004de:	f000 f98b 	bl	80007f8 <Error_Handler>
  }
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b017      	add	sp, #92	; 0x5c
 80004e8:	bd90      	pop	{r4, r7, pc}
	...

080004ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_RTC_Init+0x44>)
 80004f2:	4a10      	ldr	r2, [pc, #64]	; (8000534 <MX_RTC_Init+0x48>)
 80004f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_RTC_Init+0x44>)
 80004f8:	2240      	movs	r2, #64	; 0x40
 80004fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_RTC_Init+0x44>)
 80004fe:	227f      	movs	r2, #127	; 0x7f
 8000500:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_RTC_Init+0x44>)
 8000504:	22ff      	movs	r2, #255	; 0xff
 8000506:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_RTC_Init+0x44>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <MX_RTC_Init+0x44>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_RTC_Init+0x44>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <MX_RTC_Init+0x44>)
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fc63 	bl	8001de8 <HAL_RTC_Init>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000526:	f000 f967 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200006d8 	.word	0x200006d8
 8000534:	40002800 	.word	0x40002800

08000538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <MX_USART2_UART_Init+0x58>)
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <MX_USART2_UART_Init+0x5c>)
 8000540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <MX_USART2_UART_Init+0x58>)
 8000544:	2296      	movs	r2, #150	; 0x96
 8000546:	0212      	lsls	r2, r2, #8
 8000548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_USART2_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_USART2_UART_Init+0x58>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USART2_UART_Init+0x58>)
 800055e:	220c      	movs	r2, #12
 8000560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_USART2_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USART2_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_USART2_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USART2_UART_Init+0x58>)
 8000576:	2200      	movs	r2, #0
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <MX_USART2_UART_Init+0x58>)
 800057c:	0018      	movs	r0, r3
 800057e:	f001 ffbf 	bl	8002500 <HAL_UART_Init>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000586:	f000 f937 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200006f8 	.word	0x200006f8
 8000594:	40004400 	.word	0x40004400

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	240c      	movs	r4, #12
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	0018      	movs	r0, r3
 80005a4:	2314      	movs	r3, #20
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f005 fda4 	bl	80060f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0309      	lsls	r1, r1, #12
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	031b      	lsls	r3, r3, #12
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	03c9      	lsls	r1, r1, #15
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	03db      	lsls	r3, r3, #15
 80005e0:	4013      	ands	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0289      	lsls	r1, r1, #10
 80005f0:	430a      	orrs	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	029b      	lsls	r3, r3, #10
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000602:	2390      	movs	r3, #144	; 0x90
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fe48 	bl	80012a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0192      	lsls	r2, r2, #6
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2284      	movs	r2, #132	; 0x84
 800061c:	0392      	lsls	r2, r2, #14
 800061e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000626:	193b      	adds	r3, r7, r4
 8000628:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <MX_GPIO_Init+0xd0>)
 800062a:	0019      	movs	r1, r3
 800062c:	0010      	movs	r0, r2
 800062e:	f000 fcc7 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2220      	movs	r2, #32
 8000638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2201      	movs	r2, #1
 800063e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	187a      	adds	r2, r7, r1
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fcb3 	bl	8000fc0 <HAL_GPIO_Init>

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b009      	add	sp, #36	; 0x24
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000
 8000668:	48000800 	.word	0x48000800

0800066c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]

	uint8_t dummy;

	if( ! xQueueIsQueueFullFromISR(q_data)){
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <HAL_UART_RxCpltCallback+0x80>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	0018      	movs	r0, r3
 800067a:	f003 ff44 	bl	8004506 <xQueueIsQueueFullFromISR>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d107      	bne.n	8000692 <HAL_UART_RxCpltCallback+0x26>
		//Enqueue data byte
		xQueueSendFromISR(q_data,(void*)&user_data, NULL);
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <HAL_UART_RxCpltCallback+0x80>)
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	491a      	ldr	r1, [pc, #104]	; (80006f0 <HAL_UART_RxCpltCallback+0x84>)
 8000688:	2300      	movs	r3, #0
 800068a:	2200      	movs	r2, #0
 800068c:	f003 fc80 	bl	8003f90 <xQueueGenericSendFromISR>
 8000690:	e013      	b.n	80006ba <HAL_UART_RxCpltCallback+0x4e>
	}
	else{
		if('\n' == user_data){
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_UART_RxCpltCallback+0x84>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b0a      	cmp	r3, #10
 800069a:	d10e      	bne.n	80006ba <HAL_UART_RxCpltCallback+0x4e>
			//make sure that last byte of the queue is '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <HAL_UART_RxCpltCallback+0x80>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	220f      	movs	r2, #15
 80006a2:	18b9      	adds	r1, r7, r2
 80006a4:	2200      	movs	r2, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f003 fd98 	bl	80041dc <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data, NULL);
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_UART_RxCpltCallback+0x80>)
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	490f      	ldr	r1, [pc, #60]	; (80006f0 <HAL_UART_RxCpltCallback+0x84>)
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	f003 fc6b 	bl	8003f90 <xQueueGenericSendFromISR>

		}

	}

	if('\n' == user_data){
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_UART_RxCpltCallback+0x84>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b0a      	cmp	r3, #10
 80006c2:	d108      	bne.n	80006d6 <HAL_UART_RxCpltCallback+0x6a>
		xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_UART_RxCpltCallback+0x88>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2300      	movs	r3, #0
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	f004 fe53 	bl	800537c <xTaskGenericNotifyFromISR>
	}

	HAL_UART_Receive_IT(&huart2, &user_data, 1);
 80006d6:	4906      	ldr	r1, [pc, #24]	; (80006f0 <HAL_UART_RxCpltCallback+0x84>)
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <HAL_UART_RxCpltCallback+0x8c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 f803 	bl	80026e8 <HAL_UART_Receive_IT>

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b004      	add	sp, #16
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	20000794 	.word	0x20000794
 80006f0:	2000079c 	.word	0x2000079c
 80006f4:	20000784 	.word	0x20000784
 80006f8:	200006f8 	.word	0x200006f8

080006fc <menu_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_menu_task */
void menu_task(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 8000704:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <menu_task+0xc0>)
 8000706:	60bb      	str	r3, [r7, #8]


  /* Infinite loop */
  for(;;)
  {
    xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000708:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <menu_task+0xc4>)
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	425a      	negs	r2, r3
 8000710:	2308      	movs	r3, #8
 8000712:	18f9      	adds	r1, r7, r3
 8000714:	2300      	movs	r3, #0
 8000716:	f003 fb77 	bl	8003e08 <xQueueGenericSend>

    xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800071a:	2301      	movs	r3, #1
 800071c:	425b      	negs	r3, r3
 800071e:	220c      	movs	r2, #12
 8000720:	18ba      	adds	r2, r7, r2
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f004 fd49 	bl	80051bc <xTaskNotifyWait>

    cmd = (command_t *)cmd_addr;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	617b      	str	r3, [r7, #20]

    if(cmd->len == 1){
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d12f      	bne.n	8000796 <menu_task+0x9a>
    	option = cmd->payload[0] - 48;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b30      	subs	r3, #48	; 0x30
 800073c:	613b      	str	r3, [r7, #16]

    	switch(option){
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d031      	beq.n	80007a8 <menu_task+0xac>
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	2b02      	cmp	r3, #2
 8000748:	dc1c      	bgt.n	8000784 <menu_task+0x88>
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d003      	beq.n	8000758 <menu_task+0x5c>
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d00b      	beq.n	800076e <menu_task+0x72>
 8000756:	e015      	b.n	8000784 <menu_task+0x88>
    		case 0:
    			curr_state = sLedEffect;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <menu_task+0xc8>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
    			xTaskNotify(handle_led_task, 0, eNoAction);
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <menu_task+0xcc>)
 8000760:	6818      	ldr	r0, [r3, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	f004 fd7c 	bl	8005264 <xTaskGenericNotify>
    			break;
 800076c:	e01d      	b.n	80007aa <menu_task+0xae>

    		case 1:
				curr_state = sRtcMenu;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <menu_task+0xc8>)
 8000770:	2202      	movs	r2, #2
 8000772:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task, 0, eNoAction);
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <menu_task+0xd0>)
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	2300      	movs	r3, #0
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	f004 fd71 	bl	8005264 <xTaskGenericNotify>
				break;
 8000782:	e012      	b.n	80007aa <menu_task+0xae>
    		case 2:
    			break;

    		default:
    			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <menu_task+0xc4>)
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	425a      	negs	r2, r3
 800078c:	4910      	ldr	r1, [pc, #64]	; (80007d0 <menu_task+0xd4>)
 800078e:	2300      	movs	r3, #0
 8000790:	f003 fb3a 	bl	8003e08 <xQueueGenericSend>
    			continue;
 8000794:	e010      	b.n	80007b8 <menu_task+0xbc>

    	}
    }else{
    	xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <menu_task+0xc4>)
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	425a      	negs	r2, r3
 800079e:	490c      	ldr	r1, [pc, #48]	; (80007d0 <menu_task+0xd4>)
 80007a0:	2300      	movs	r3, #0
 80007a2:	f003 fb31 	bl	8003e08 <xQueueGenericSend>
		continue;
 80007a6:	e007      	b.n	80007b8 <menu_task+0xbc>
    			break;
 80007a8:	46c0      	nop			; (mov r8, r8)

    }

    xTaskNotifyWait(0, 0,NULL, portMAX_DELAY);
 80007aa:	2301      	movs	r3, #1
 80007ac:	425b      	negs	r3, r3
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2000      	movs	r0, #0
 80007b4:	f004 fd02 	bl	80051bc <xTaskNotifyWait>
    xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80007b8:	e7a6      	b.n	8000708 <menu_task+0xc>
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	08006184 	.word	0x08006184
 80007c0:	20000798 	.word	0x20000798
 80007c4:	2000079d 	.word	0x2000079d
 80007c8:	2000078c 	.word	0x2000078c
 80007cc:	20000790 	.word	0x20000790
 80007d0:	20000000 	.word	0x20000000

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 faa5 	bl	8000d34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40001000 	.word	0x40001000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	e7fe      	b.n	8000800 <Error_Handler+0x8>
	...

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x50>)
 800080c:	699a      	ldr	r2, [r3, #24]
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_MspInit+0x50>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	619a      	str	r2, [r3, #24]
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x50>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x50>)
 8000824:	69da      	ldr	r2, [r3, #28]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x50>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0549      	lsls	r1, r1, #21
 800082c:	430a      	orrs	r2, r1
 800082e:	61da      	str	r2, [r3, #28]
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x50>)
 8000832:	69da      	ldr	r2, [r3, #28]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	055b      	lsls	r3, r3, #21
 8000838:	4013      	ands	r3, r2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800083e:	2302      	movs	r3, #2
 8000840:	425b      	negs	r3, r3
 8000842:	2200      	movs	r2, #0
 8000844:	2103      	movs	r1, #3
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fb18 	bl	8000e7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <HAL_RTC_MspInit+0x28>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_RTC_MspInit+0x2c>)
 800086c:	6a1a      	ldr	r2, [r3, #32]
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_RTC_MspInit+0x2c>)
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	0209      	lsls	r1, r1, #8
 8000874:	430a      	orrs	r2, r1
 8000876:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40002800 	.word	0x40002800
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b08b      	sub	sp, #44	; 0x2c
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	2414      	movs	r4, #20
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f005 fc2b 	bl	80060f6 <memset>
  if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a20      	ldr	r2, [pc, #128]	; (8000928 <HAL_UART_MspInit+0xa0>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d13a      	bne.n	8000920 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008ac:	69da      	ldr	r2, [r3, #28]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0289      	lsls	r1, r1, #10
 80008b4:	430a      	orrs	r2, r1
 80008b6:	61da      	str	r2, [r3, #28]
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008ba:	69da      	ldr	r2, [r3, #28]
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	029b      	lsls	r3, r3, #10
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0289      	lsls	r1, r1, #10
 80008d0:	430a      	orrs	r2, r1
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008d6:	695a      	ldr	r2, [r3, #20]
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	029b      	lsls	r3, r3, #10
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	220c      	movs	r2, #12
 80008e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2202      	movs	r2, #2
 80008ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2203      	movs	r2, #3
 80008fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2201      	movs	r2, #1
 8000900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	187a      	adds	r2, r7, r1
 8000904:	2390      	movs	r3, #144	; 0x90
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fb58 	bl	8000fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2103      	movs	r1, #3
 8000914:	201c      	movs	r0, #28
 8000916:	f000 fab1 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800091a:	201c      	movs	r0, #28
 800091c:	f000 fac3 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b00b      	add	sp, #44	; 0x2c
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	40004400 	.word	0x40004400
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	0019      	movs	r1, r3
 8000946:	2011      	movs	r0, #17
 8000948:	f000 fa98 	bl	8000e7c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800094c:	2011      	movs	r0, #17
 800094e:	f000 faaa 	bl	8000ea6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_InitTick+0xa4>)
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <HAL_InitTick+0xa4>)
 8000958:	2110      	movs	r1, #16
 800095a:	430a      	orrs	r2, r1
 800095c:	61da      	str	r2, [r3, #28]
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_InitTick+0xa4>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	2210      	movs	r2, #16
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800096a:	230c      	movs	r3, #12
 800096c:	18fa      	adds	r2, r7, r3
 800096e:	2310      	movs	r3, #16
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f001 f92f 	bl	8001bd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800097a:	f001 f917 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 800097e:	0003      	movs	r3, r0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	4914      	ldr	r1, [pc, #80]	; (80009d8 <HAL_InitTick+0xa8>)
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fbd0 	bl	800012c <__udivsi3>
 800098c:	0003      	movs	r3, r0
 800098e:	3b01      	subs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0xac>)
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <HAL_InitTick+0xb0>)
 8000996:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_InitTick+0xac>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <HAL_InitTick+0xb4>)
 800099c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_InitTick+0xac>)
 80009a0:	6a3a      	ldr	r2, [r7, #32]
 80009a2:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_InitTick+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_InitTick+0xac>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_InitTick+0xac>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 fb44 	bl	8002040 <HAL_TIM_Base_Init>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d105      	bne.n	80009c8 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <HAL_InitTick+0xac>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 fb96 	bl	80020f0 <HAL_TIM_Base_Start_IT>
 80009c4:	0003      	movs	r3, r0
 80009c6:	e000      	b.n	80009ca <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
}
 80009ca:	0018      	movs	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b00a      	add	sp, #40	; 0x28
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40021000 	.word	0x40021000
 80009d8:	000f4240 	.word	0x000f4240
 80009dc:	200007a0 	.word	0x200007a0
 80009e0:	40001000 	.word	0x40001000
 80009e4:	000003e7 	.word	0x000003e7

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <TIM6_IRQHandler+0x14>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 fbc4 	bl	8002188 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	200007a0 	.word	0x200007a0

08000a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <USART2_IRQHandler+0x14>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fec0 	bl	8002798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	200006f8 	.word	0x200006f8

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <led_task>:

#include "main.h"

const char *msg_inv = "////Invalid option////\n";

void led_task(void* param){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

	uint32_t cmd_addr;
	command_t* cmd;
	const char* msg_led = "========================\n"
 8000a38:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <led_task+0xf8>)
 8000a3a:	60fb      	str	r3, [r7, #12]
			  "(none,e1,e2,e3,e4)\n"
			  "Enter your choice here : ";


	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	425b      	negs	r3, r3
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2000      	movs	r0, #0
 8000a46:	f004 fbb9 	bl	80051bc <xTaskNotifyWait>

		xQueueSend(q_print,&msg_led, portMAX_DELAY);
 8000a4a:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <led_task+0xfc>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	425a      	negs	r2, r3
 8000a52:	230c      	movs	r3, #12
 8000a54:	18f9      	adds	r1, r7, r3
 8000a56:	2300      	movs	r3, #0
 8000a58:	f003 f9d6 	bl	8003e08 <xQueueGenericSend>

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	425b      	negs	r3, r3
 8000a60:	2210      	movs	r2, #16
 8000a62:	18ba      	adds	r2, r7, r2
 8000a64:	2100      	movs	r1, #0
 8000a66:	2000      	movs	r0, #0
 8000a68:	f004 fba8 	bl	80051bc <xTaskNotifyWait>

		cmd = (command_t*) cmd_addr;
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4){
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d843      	bhi.n	8000b00 <led_task+0xd0>
			if( !strcmp((char*)cmd->payload, "none")){
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <led_task+0x100>)
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff fb42 	bl	8000108 <strcmp>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d102      	bne.n	8000a8e <led_task+0x5e>
				led_effect_stop();
 8000a88:	f7ff fc0c 	bl	80002a4 <led_effect_stop>
 8000a8c:	e040      	b.n	8000b10 <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e1")){
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	4a28      	ldr	r2, [pc, #160]	; (8000b34 <led_task+0x104>)
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff fb37 	bl	8000108 <strcmp>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d103      	bne.n	8000aa6 <led_task+0x76>
				led_effect(1);
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff fc05 	bl	80002ae <led_effect>
 8000aa4:	e034      	b.n	8000b10 <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e2")){
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <led_task+0x108>)
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fb2b 	bl	8000108 <strcmp>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d103      	bne.n	8000abe <led_task+0x8e>
				led_effect(2);
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f7ff fbf9 	bl	80002ae <led_effect>
 8000abc:	e028      	b.n	8000b10 <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e3")){
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <led_task+0x10c>)
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fb1f 	bl	8000108 <strcmp>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d103      	bne.n	8000ad6 <led_task+0xa6>
				led_effect(3);
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f7ff fbed 	bl	80002ae <led_effect>
 8000ad4:	e01c      	b.n	8000b10 <led_task+0xe0>
			}
			else if( !strcmp((char*)cmd->payload, "e4")){
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <led_task+0x110>)
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff fb13 	bl	8000108 <strcmp>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d103      	bne.n	8000aee <led_task+0xbe>
				led_effect(4);
 8000ae6:	2004      	movs	r0, #4
 8000ae8:	f7ff fbe1 	bl	80002ae <led_effect>
 8000aec:	e010      	b.n	8000b10 <led_task+0xe0>
			}
			else{
				xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <led_task+0xfc>)
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	425a      	negs	r2, r3
 8000af6:	4913      	ldr	r1, [pc, #76]	; (8000b44 <led_task+0x114>)
 8000af8:	2300      	movs	r3, #0
 8000afa:	f003 f985 	bl	8003e08 <xQueueGenericSend>
 8000afe:	e007      	b.n	8000b10 <led_task+0xe0>
			}
		}
		else{
			xQueueSend(q_print,&msg_inv, portMAX_DELAY);
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <led_task+0xfc>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	2301      	movs	r3, #1
 8000b06:	425a      	negs	r2, r3
 8000b08:	490e      	ldr	r1, [pc, #56]	; (8000b44 <led_task+0x114>)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f003 f97c 	bl	8003e08 <xQueueGenericSend>
		}

		curr_state = sMainMenu;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <led_task+0x118>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]

		xTaskNotify(defaultTaskHandle, 0, eNoAction);
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <led_task+0x11c>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f004 fba0 	bl	8005264 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000b24:	e78a      	b.n	8000a3c <led_task+0xc>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	08006244 	.word	0x08006244
 8000b2c:	20000798 	.word	0x20000798
 8000b30:	080062bc 	.word	0x080062bc
 8000b34:	080062c4 	.word	0x080062c4
 8000b38:	080062c8 	.word	0x080062c8
 8000b3c:	080062cc 	.word	0x080062cc
 8000b40:	080062d0 	.word	0x080062d0
 8000b44:	20000008 	.word	0x20000008
 8000b48:	2000079d 	.word	0x2000079d
 8000b4c:	20000780 	.word	0x20000780

08000b50 <print_task>:
//	while(1){
//
//	}
//}

void print_task(void* param){
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

	uint32_t* msg;

	while(1){

		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <print_task+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4252      	negs	r2, r2
 8000b60:	210c      	movs	r1, #12
 8000b62:	1879      	adds	r1, r7, r1
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 fa84 	bl	8004072 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8000b6a:	68fc      	ldr	r4, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff fad4 	bl	800011c <strlen>
 8000b74:	0003      	movs	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <print_task+0x3c>)
 8000b7e:	0021      	movs	r1, r4
 8000b80:	f001 fd12 	bl	80025a8 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000b84:	e7e8      	b.n	8000b58 <print_task+0x8>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000798 	.word	0x20000798
 8000b8c:	200006f8 	.word	0x200006f8

08000b90 <cmd_task>:

	}
}

void cmd_task(void* param){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;

	while(1){
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000b98:	2301      	movs	r3, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f004 fb0b 	bl	80051bc <xTaskNotifyWait>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	61fb      	str	r3, [r7, #28]

		if(pdTRUE == ret){
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d1f3      	bne.n	8000b98 <cmd_task+0x8>

			process_command(&cmd);
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 f801 	bl	8000bbc <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000bba:	e7ed      	b.n	8000b98 <cmd_task+0x8>

08000bbc <process_command>:
		}
	}
}

void process_command(command_t* cmd){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f830 	bl	8000c2c <extract_command>

	switch(curr_state){
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <process_command+0x60>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b05      	cmp	r3, #5
 8000bd2:	dc1e      	bgt.n	8000c12 <process_command+0x56>
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	da14      	bge.n	8000c02 <process_command+0x46>
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <process_command+0x26>
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d008      	beq.n	8000bf2 <process_command+0x36>
	case sRtcReport:
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}

}
 8000be0:	e017      	b.n	8000c12 <process_command+0x56>
		xTaskNotify(defaultTaskHandle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <process_command+0x64>)
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2300      	movs	r3, #0
 8000bea:	2203      	movs	r2, #3
 8000bec:	f004 fb3a 	bl	8005264 <xTaskGenericNotify>
		break;
 8000bf0:	e00f      	b.n	8000c12 <process_command+0x56>
		xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <process_command+0x68>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	f004 fb32 	bl	8005264 <xTaskGenericNotify>
		break;
 8000c00:	e007      	b.n	8000c12 <process_command+0x56>
		xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <process_command+0x6c>)
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	f004 fb2a 	bl	8005264 <xTaskGenericNotify>
		break;
 8000c10:	46c0      	nop			; (mov r8, r8)
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	2000079d 	.word	0x2000079d
 8000c20:	20000780 	.word	0x20000780
 8000c24:	2000078c 	.word	0x2000078c
 8000c28:	20000790 	.word	0x20000790

08000c2c <extract_command>:

int extract_command(command_t* cmd){
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <extract_command+0x88>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f003 fb32 	bl	80042a2 <uxQueueMessagesWaiting>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <extract_command+0x22>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	e02d      	b.n	8000caa <extract_command+0x7e>

	uint8_t i = 0;
 8000c4e:	2317      	movs	r3, #23
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]

	do{

		status = xQueueReceive(q_data, &item, 0);
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <extract_command+0x88>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	240f      	movs	r4, #15
 8000c5c:	1939      	adds	r1, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	0018      	movs	r0, r3
 8000c62:	f003 fa06 	bl	8004072 <xQueueReceive>
 8000c66:	0003      	movs	r3, r0
 8000c68:	613b      	str	r3, [r7, #16]
		if(pdTRUE == status) cmd->payload[i++] = item;
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d10a      	bne.n	8000c86 <extract_command+0x5a>
 8000c70:	2217      	movs	r2, #23
 8000c72:	18bb      	adds	r3, r7, r2
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	18ba      	adds	r2, r7, r2
 8000c78:	1c59      	adds	r1, r3, #1
 8000c7a:	7011      	strb	r1, [r2, #0]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	7819      	ldrb	r1, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	5499      	strb	r1, [r3, r2]

	}while(item != '\n');
 8000c86:	230f      	movs	r3, #15
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b0a      	cmp	r3, #10
 8000c8e:	d1e2      	bne.n	8000c56 <extract_command+0x2a>

	cmd->payload[i-1] = '\0';
 8000c90:	2017      	movs	r0, #23
 8000c92:	183b      	adds	r3, r7, r0
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8000c9e:	183b      	adds	r3, r7, r0
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60da      	str	r2, [r3, #12]
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b007      	add	sp, #28
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000794 	.word	0x20000794

08000cb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cbc:	f7ff feb2 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ce6:	f005 f9d9 	bl	800609c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cea:	f7ff fb25 	bl	8000338 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   r0, =_estack
 8000cf0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cfc:	0800637c 	.word	0x0800637c
  ldr r2, =_sbss
 8000d00:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d04:	2000166c 	.word	0x2000166c

08000d08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_IRQHandler>
	...

08000d0c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_Init+0x24>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_Init+0x24>)
 8000d16:	2110      	movs	r1, #16
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f7ff fe07 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff fd6f 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	0018      	movs	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_IncTick+0x1c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x20>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	18d2      	adds	r2, r2, r3
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_IncTick+0x20>)
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	2000000c 	.word	0x2000000c
 8000d54:	200007e8 	.word	0x200007e8

08000d58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <HAL_GetTick+0x10>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	200007e8 	.word	0x200007e8

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7e:	d809      	bhi.n	8000d94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	001a      	movs	r2, r3
 8000d86:	231f      	movs	r3, #31
 8000d88:	401a      	ands	r2, r3
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_EnableIRQ+0x30>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	000a      	movs	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
  }
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b7f      	cmp	r3, #127	; 0x7f
 8000db4:	d828      	bhi.n	8000e08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db6:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <__NVIC_SetPriority+0xd4>)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	33c0      	adds	r3, #192	; 0xc0
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	589b      	ldr	r3, [r3, r2]
 8000dc6:	1dfa      	adds	r2, r7, #7
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	2203      	movs	r2, #3
 8000dce:	400a      	ands	r2, r1
 8000dd0:	00d2      	lsls	r2, r2, #3
 8000dd2:	21ff      	movs	r1, #255	; 0xff
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	401a      	ands	r2, r3
 8000ddc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	22ff      	movs	r2, #255	; 0xff
 8000de4:	401a      	ands	r2, r3
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	2303      	movs	r3, #3
 8000dee:	4003      	ands	r3, r0
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df4:	481f      	ldr	r0, [pc, #124]	; (8000e74 <__NVIC_SetPriority+0xd4>)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	33c0      	adds	r3, #192	; 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e06:	e031      	b.n	8000e6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	0019      	movs	r1, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	400b      	ands	r3, r1
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3306      	adds	r3, #6
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	3304      	adds	r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1dfa      	adds	r2, r7, #7
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	0011      	movs	r1, r2
 8000e28:	2203      	movs	r2, #3
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	00d2      	lsls	r2, r2, #3
 8000e2e:	21ff      	movs	r1, #255	; 0xff
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	43d2      	mvns	r2, r2
 8000e36:	401a      	ands	r2, r3
 8000e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	22ff      	movs	r2, #255	; 0xff
 8000e40:	401a      	ands	r2, r3
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	0018      	movs	r0, r3
 8000e48:	2303      	movs	r3, #3
 8000e4a:	4003      	ands	r3, r0
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	001c      	movs	r4, r3
 8000e58:	230f      	movs	r3, #15
 8000e5a:	4023      	ands	r3, r4
 8000e5c:	3b08      	subs	r3, #8
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	430a      	orrs	r2, r1
 8000e62:	3306      	adds	r3, #6
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	18c3      	adds	r3, r0, r3
 8000e68:	3304      	adds	r3, #4
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b003      	add	sp, #12
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff81 	bl	8000da0 <__NVIC_SetPriority>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	0002      	movs	r2, r0
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff57 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2221      	movs	r2, #33	; 0x21
 8000ed2:	5c9b      	ldrb	r3, [r3, r2]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d008      	beq.n	8000eec <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2204      	movs	r2, #4
 8000ede:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e020      	b.n	8000f2e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	210e      	movs	r1, #14
 8000ef8:	438a      	bics	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2101      	movs	r1, #1
 8000f08:	438a      	bics	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f14:	2101      	movs	r1, #1
 8000f16:	4091      	lsls	r1, r2
 8000f18:	000a      	movs	r2, r1
 8000f1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2221      	movs	r2, #33	; 0x21
 8000f20:	2101      	movs	r1, #1
 8000f22:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2220      	movs	r2, #32
 8000f28:	2100      	movs	r1, #0
 8000f2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3e:	210f      	movs	r1, #15
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2221      	movs	r2, #33	; 0x21
 8000f4a:	5c9b      	ldrb	r3, [r3, r2]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d006      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2204      	movs	r2, #4
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e028      	b.n	8000fb2 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	210e      	movs	r1, #14
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4091      	lsls	r1, r2
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2221      	movs	r2, #33	; 0x21
 8000f94:	2101      	movs	r1, #1
 8000f96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d004      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	0010      	movs	r0, r2
 8000fb0:	4798      	blx	r3
    }
  }
  return status;
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e14f      	b.n	8001270 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <HAL_GPIO_Init+0x28>
 8000fe6:	e140      	b.n	800126a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	2201      	movs	r2, #1
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	0092      	lsls	r2, r2, #2
 80010b4:	58d3      	ldr	r3, [r2, r3]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	2207      	movs	r2, #7
 80010bc:	4013      	ands	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2107      	movs	r1, #7
 80010d6:	400b      	ands	r3, r1
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	6939      	ldr	r1, [r7, #16]
 80010f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	401a      	ands	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	23c0      	movs	r3, #192	; 0xc0
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x174>
 8001132:	e09a      	b.n	800126a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b54      	ldr	r3, [pc, #336]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 800113a:	2101      	movs	r1, #1
 800113c:	430a      	orrs	r2, r1
 800113e:	619a      	str	r2, [r3, #24]
 8001140:	4b51      	ldr	r3, [pc, #324]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <HAL_GPIO_Init+0x2cc>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	2390      	movs	r3, #144	; 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1e2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1de>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_GPIO_Init+0x2d4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1da>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1d6>
 8001192:	2303      	movs	r3, #3
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 8001196:	2305      	movs	r3, #5
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x1e4>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2103      	movs	r1, #3
 80011a8:	400a      	ands	r2, r1
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2cc>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	035b      	lsls	r3, r3, #13
 80011da:	4013      	ands	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	039b      	lsls	r3, r3, #14
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	029b      	lsls	r3, r3, #10
 800122e:	4013      	ands	r3, r2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_GPIO_Init+0x2dc>)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_GPIO_Init+0x2dc>)
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3301      	adds	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	40da      	lsrs	r2, r3
 8001278:	1e13      	subs	r3, r2, #0
 800127a:	d000      	beq.n	800127e <HAL_GPIO_Init+0x2be>
 800127c:	e6a8      	b.n	8000fd0 <HAL_GPIO_Init+0x10>
  } 
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b006      	add	sp, #24
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	40010400 	.word	0x40010400

080012a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	0008      	movs	r0, r1
 80012aa:	0011      	movs	r1, r2
 80012ac:	1cbb      	adds	r3, r7, #2
 80012ae:	1c02      	adds	r2, r0, #0
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	1c7b      	adds	r3, r7, #1
 80012b4:	1c0a      	adds	r2, r1, #0
 80012b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b8:	1c7b      	adds	r3, r7, #1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c0:	1cbb      	adds	r3, r7, #2
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c8:	e003      	b.n	80012d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ca:	1cbb      	adds	r3, r7, #2
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	000a      	movs	r2, r1
 80012e4:	1cbb      	adds	r3, r7, #2
 80012e6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ee:	1cbb      	adds	r3, r7, #2
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4013      	ands	r3, r2
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	1cb9      	adds	r1, r7, #2
 80012fe:	8809      	ldrh	r1, [r1, #0]
 8001300:	400b      	ands	r3, r1
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b004      	add	sp, #16
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e305      	b.n	800192e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x1e>
 800132c:	e08d      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800132e:	4bc5      	ldr	r3, [pc, #788]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	220c      	movs	r2, #12
 8001334:	4013      	ands	r3, r2
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00e      	beq.n	8001358 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133a:	4bc2      	ldr	r3, [pc, #776]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	220c      	movs	r2, #12
 8001340:	4013      	ands	r3, r2
 8001342:	2b08      	cmp	r3, #8
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
 8001346:	4bbf      	ldr	r3, [pc, #764]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	23c0      	movs	r3, #192	; 0xc0
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	401a      	ands	r2, r3
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	429a      	cmp	r2, r3
 8001356:	d10d      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	4bba      	ldr	r3, [pc, #744]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	029b      	lsls	r3, r3, #10
 8001360:	4013      	ands	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x56>
 8001364:	e070      	b.n	8001448 <HAL_RCC_OscConfig+0x138>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d000      	beq.n	8001370 <HAL_RCC_OscConfig+0x60>
 800136e:	e06b      	b.n	8001448 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e2dc      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x7c>
 800137c:	4bb1      	ldr	r3, [pc, #708]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4bb0      	ldr	r3, [pc, #704]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	0249      	lsls	r1, r1, #9
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e02f      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x9e>
 8001394:	4bab      	ldr	r3, [pc, #684]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4baa      	ldr	r3, [pc, #680]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800139a:	49ab      	ldr	r1, [pc, #684]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	4ba8      	ldr	r3, [pc, #672]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4ba7      	ldr	r3, [pc, #668]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013a6:	49a9      	ldr	r1, [pc, #676]	; (800164c <HAL_RCC_OscConfig+0x33c>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e01e      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10e      	bne.n	80013d4 <HAL_RCC_OscConfig+0xc4>
 80013b6:	4ba3      	ldr	r3, [pc, #652]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	02c9      	lsls	r1, r1, #11
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	4b9f      	ldr	r3, [pc, #636]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b9e      	ldr	r3, [pc, #632]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0249      	lsls	r1, r1, #9
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 80013d4:	4b9b      	ldr	r3, [pc, #620]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b9a      	ldr	r3, [pc, #616]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013da:	499b      	ldr	r1, [pc, #620]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	4b98      	ldr	r3, [pc, #608]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b97      	ldr	r3, [pc, #604]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013e6:	4999      	ldr	r1, [pc, #612]	; (800164c <HAL_RCC_OscConfig+0x33c>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d014      	beq.n	800141e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fcb0 	bl	8000d58 <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fe:	f7ff fcab 	bl	8000d58 <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e28e      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	4b8c      	ldr	r3, [pc, #560]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	029b      	lsls	r3, r3, #10
 8001418:	4013      	ands	r3, r2
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0xee>
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fc9b 	bl	8000d58 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fc96 	bl	8000d58 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e279      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b82      	ldr	r3, [pc, #520]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x118>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x146>
 8001454:	e06c      	b.n	8001530 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001456:	4b7b      	ldr	r3, [pc, #492]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	220c      	movs	r2, #12
 800145c:	4013      	ands	r3, r2
 800145e:	d00e      	beq.n	800147e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	220c      	movs	r2, #12
 8001466:	4013      	ands	r3, r2
 8001468:	2b08      	cmp	r3, #8
 800146a:	d11f      	bne.n	80014ac <HAL_RCC_OscConfig+0x19c>
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	23c0      	movs	r3, #192	; 0xc0
 8001472:	025b      	lsls	r3, r3, #9
 8001474:	401a      	ands	r2, r3
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	429a      	cmp	r2, r3
 800147c:	d116      	bne.n	80014ac <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	4b71      	ldr	r3, [pc, #452]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2202      	movs	r2, #2
 8001484:	4013      	ands	r3, r2
 8001486:	d005      	beq.n	8001494 <HAL_RCC_OscConfig+0x184>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d001      	beq.n	8001494 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e24c      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b6b      	ldr	r3, [pc, #428]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	22f8      	movs	r2, #248	; 0xf8
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00da      	lsls	r2, r3, #3
 80014a4:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014aa:	e041      	b.n	8001530 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d024      	beq.n	80014fe <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b4:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b62      	ldr	r3, [pc, #392]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fc4a 	bl	8000d58 <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc45 	bl	8000d58 <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e228      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2202      	movs	r2, #2
 80014e2:	4013      	ands	r3, r2
 80014e4:	d0f1      	beq.n	80014ca <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b57      	ldr	r3, [pc, #348]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	22f8      	movs	r2, #248	; 0xf8
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	00da      	lsls	r2, r3, #3
 80014f6:	4b53      	ldr	r3, [pc, #332]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001504:	2101      	movs	r1, #1
 8001506:	438a      	bics	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fc25 	bl	8000d58 <HAL_GetTick>
 800150e:	0003      	movs	r3, r0
 8001510:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fc20 	bl	8000d58 <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e203      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d1f1      	bne.n	8001514 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2208      	movs	r2, #8
 8001536:	4013      	ands	r3, r2
 8001538:	d036      	beq.n	80015a8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d019      	beq.n	8001576 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001542:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001548:	2101      	movs	r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff fc03 	bl	8000d58 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fbfe 	bl	8000d58 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1e1      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d0f1      	beq.n	8001558 <HAL_RCC_OscConfig+0x248>
 8001574:	e018      	b.n	80015a8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800157c:	2101      	movs	r1, #1
 800157e:	438a      	bics	r2, r1
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff fbe9 	bl	8000d58 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fbe4 	bl	8000d58 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1c7      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	2202      	movs	r2, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d1f1      	bne.n	800158c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2204      	movs	r2, #4
 80015ae:	4013      	ands	r3, r2
 80015b0:	d100      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2a4>
 80015b2:	e0b5      	b.n	8001720 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b4:	201f      	movs	r0, #31
 80015b6:	183b      	adds	r3, r7, r0
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	055b      	lsls	r3, r3, #21
 80015c4:	4013      	ands	r3, r2
 80015c6:	d110      	bne.n	80015ea <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0549      	lsls	r1, r1, #21
 80015d2:	430a      	orrs	r2, r1
 80015d4:	61da      	str	r2, [r3, #28]
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	055b      	lsls	r3, r3, #21
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015e4:	183b      	adds	r3, r7, r0
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0049      	lsls	r1, r1, #1
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001604:	f7ff fba8 	bl	8000d58 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fba3 	bl	8000d58 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e186      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x340>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4013      	ands	r3, r2
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10f      	bne.n	8001654 <HAL_RCC_OscConfig+0x344>
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 8001636:	6a1a      	ldr	r2, [r3, #32]
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 800163a:	2101      	movs	r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	621a      	str	r2, [r3, #32]
 8001640:	e036      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000
 8001648:	fffeffff 	.word	0xfffeffff
 800164c:	fffbffff 	.word	0xfffbffff
 8001650:	40007000 	.word	0x40007000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x366>
 800165c:	4bb6      	ldr	r3, [pc, #728]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	4bb5      	ldr	r3, [pc, #724]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001662:	2101      	movs	r1, #1
 8001664:	438a      	bics	r2, r1
 8001666:	621a      	str	r2, [r3, #32]
 8001668:	4bb3      	ldr	r3, [pc, #716]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	4bb2      	ldr	r3, [pc, #712]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800166e:	2104      	movs	r1, #4
 8001670:	438a      	bics	r2, r1
 8001672:	621a      	str	r2, [r3, #32]
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x388>
 800167e:	4bae      	ldr	r3, [pc, #696]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	4bad      	ldr	r3, [pc, #692]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001684:	2104      	movs	r1, #4
 8001686:	430a      	orrs	r2, r1
 8001688:	621a      	str	r2, [r3, #32]
 800168a:	4bab      	ldr	r3, [pc, #684]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	4baa      	ldr	r3, [pc, #680]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	621a      	str	r2, [r3, #32]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x3a0>
 8001698:	4ba7      	ldr	r3, [pc, #668]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800169a:	6a1a      	ldr	r2, [r3, #32]
 800169c:	4ba6      	ldr	r3, [pc, #664]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	621a      	str	r2, [r3, #32]
 80016a4:	4ba4      	ldr	r3, [pc, #656]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	4ba3      	ldr	r3, [pc, #652]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80016aa:	2104      	movs	r1, #4
 80016ac:	438a      	bics	r2, r1
 80016ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d014      	beq.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fb4e 	bl	8000d58 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb49 	bl	8000d58 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a9b      	ldr	r2, [pc, #620]	; (800193c <HAL_RCC_OscConfig+0x62c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e12b      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	4b98      	ldr	r3, [pc, #608]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3b2>
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fb39 	bl	8000d58 <HAL_GetTick>
 80016e6:	0003      	movs	r3, r0
 80016e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	e009      	b.n	8001700 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fb34 	bl	8000d58 <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a91      	ldr	r2, [pc, #580]	; (800193c <HAL_RCC_OscConfig+0x62c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e116      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	4b8d      	ldr	r3, [pc, #564]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800170a:	231f      	movs	r3, #31
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	4b87      	ldr	r3, [pc, #540]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800171a:	4989      	ldr	r1, [pc, #548]	; (8001940 <HAL_RCC_OscConfig+0x630>)
 800171c:	400a      	ands	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2210      	movs	r2, #16
 8001726:	4013      	ands	r3, r2
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d12a      	bne.n	8001788 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001738:	2104      	movs	r1, #4
 800173a:	430a      	orrs	r2, r1
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800173e:	4b7e      	ldr	r3, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb05 	bl	8000d58 <HAL_GetTick>
 800174e:	0003      	movs	r3, r0
 8001750:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001754:	f7ff fb00 	bl	8000d58 <HAL_GetTick>
 8001758:	0002      	movs	r2, r0
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0e3      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d0f1      	beq.n	8001754 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001770:	4b71      	ldr	r3, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	22f8      	movs	r2, #248	; 0xf8
 8001776:	4393      	bics	r3, r2
 8001778:	0019      	movs	r1, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	00da      	lsls	r2, r3, #3
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	e034      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	3305      	adds	r3, #5
 800178e:	d111      	bne.n	80017b4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001790:	4b69      	ldr	r3, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001796:	2104      	movs	r1, #4
 8001798:	438a      	bics	r2, r1
 800179a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800179c:	4b66      	ldr	r3, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	22f8      	movs	r2, #248	; 0xf8
 80017a2:	4393      	bics	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	00da      	lsls	r2, r3, #3
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
 80017b2:	e01e      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017ba:	2104      	movs	r1, #4
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fac4 	bl	8000d58 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017d6:	f7ff fabf 	bl	8000d58 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0a2      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f1      	bne.n	80017d6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d100      	bne.n	80017fc <HAL_RCC_OscConfig+0x4ec>
 80017fa:	e097      	b.n	800192c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	220c      	movs	r2, #12
 8001802:	4013      	ands	r3, r2
 8001804:	2b08      	cmp	r3, #8
 8001806:	d100      	bne.n	800180a <HAL_RCC_OscConfig+0x4fa>
 8001808:	e06b      	b.n	80018e2 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d14c      	bne.n	80018ac <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001818:	494a      	ldr	r1, [pc, #296]	; (8001944 <HAL_RCC_OscConfig+0x634>)
 800181a:	400a      	ands	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fa9b 	bl	8000d58 <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff fa96 	bl	8000d58 <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e079      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	049b      	lsls	r3, r3, #18
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	220f      	movs	r2, #15
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001856:	430a      	orrs	r2, r1
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a3a      	ldr	r2, [pc, #232]	; (8001948 <HAL_RCC_OscConfig+0x638>)
 8001860:	4013      	ands	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	431a      	orrs	r2, r3
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	0449      	lsls	r1, r1, #17
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fa69 	bl	8000d58 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fa64 	bl	8000d58 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e047      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	049b      	lsls	r3, r3, #18
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x57c>
 80018aa:	e03f      	b.n	800192c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018b2:	4924      	ldr	r1, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x634>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa4e 	bl	8000d58 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff fa49 	bl	8000d58 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e02c      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	049b      	lsls	r3, r3, #18
 80018dc:	4013      	ands	r3, r2
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5b2>
 80018e0:	e024      	b.n	800192c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e01f      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	23c0      	movs	r3, #192	; 0xc0
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	401a      	ands	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	429a      	cmp	r2, r3
 8001908:	d10e      	bne.n	8001928 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	220f      	movs	r2, #15
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	23f0      	movs	r3, #240	; 0xf0
 800191c:	039b      	lsls	r3, r3, #14
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b008      	add	sp, #32
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	40021000 	.word	0x40021000
 800193c:	00001388 	.word	0x00001388
 8001940:	efffffff 	.word	0xefffffff
 8001944:	feffffff 	.word	0xfeffffff
 8001948:	ffc27fff 	.word	0xffc27fff

0800194c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b3      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d911      	bls.n	8001992 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	4b55      	ldr	r3, [pc, #340]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e09a      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d015      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2204      	movs	r2, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	d006      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a6:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019ac:	21e0      	movs	r1, #224	; 0xe0
 80019ae:	00c9      	lsls	r1, r1, #3
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	4393      	bics	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	d040      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	029b      	lsls	r3, r3, #10
 80019e2:	4013      	ands	r3, r2
 80019e4:	d114      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06e      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	049b      	lsls	r3, r3, #18
 80019fa:	4013      	ands	r3, r2
 80019fc:	d108      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e062      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2202      	movs	r2, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e05b      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a10:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2203      	movs	r2, #3
 8001a16:	4393      	bics	r3, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a20:	430a      	orrs	r2, r1
 8001a22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a24:	f7ff f998 	bl	8000d58 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7ff f993 	bl	8000d58 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <HAL_RCC_ClockConfig+0x18c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e042      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	220c      	movs	r2, #12
 8001a48:	401a      	ands	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d1ec      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d211      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4393      	bics	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_RCC_ClockConfig+0x184>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e020      	b.n	8001ac8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_RCC_ClockConfig+0x190>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001aa4:	f000 f820 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa8:	0001      	movs	r1, r0
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x188>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x194>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	000a      	movs	r2, r1
 8001aba:	40da      	lsrs	r2, r3
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x198>)
 8001abe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f7fe ff35 	bl	8000930 <HAL_InitTick>
  
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	00001388 	.word	0x00001388
 8001adc:	fffff8ff 	.word	0xfffff8ff
 8001ae0:	080062ec 	.word	0x080062ec
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x30>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x36>
 8001b16:	e02e      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	e02e      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	220f      	movs	r2, #15
 8001b24:	4013      	ands	r3, r2
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	220f      	movs	r2, #15
 8001b32:	4013      	ands	r3, r2
 8001b34:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	23c0      	movs	r3, #192	; 0xc0
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	401a      	ands	r2, r3
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b4e:	f7fe faed 	bl	800012c <__udivsi3>
 8001b52:	0003      	movs	r3, r0
 8001b54:	001a      	movs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4353      	muls	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	480a      	ldr	r0, [pc, #40]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b62:	f7fe fae3 	bl	800012c <__udivsi3>
 8001b66:	0003      	movs	r3, r0
 8001b68:	001a      	movs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4353      	muls	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	e002      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b78:	613b      	str	r3, [r7, #16]
      break;
 8001b7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b7c:	693b      	ldr	r3, [r7, #16]
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b006      	add	sp, #24
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	007a1200 	.word	0x007a1200
 8001b90:	08006304 	.word	0x08006304
 8001b94:	08006314 	.word	0x08006314

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bb0:	f7ff fff2 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb4:	0001      	movs	r1, r0
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	40d9      	lsrs	r1, r3
 8001bc6:	000b      	movs	r3, r1
}    
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	080062fc 	.word	0x080062fc

08001bd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_RCC_GetClockConfig+0x4c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2203      	movs	r2, #3
 8001bee:	401a      	ands	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_GetClockConfig+0x4c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	22f0      	movs	r2, #240	; 0xf0
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_GetClockConfig+0x4c>)
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	23e0      	movs	r3, #224	; 0xe0
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	401a      	ands	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetClockConfig+0x50>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	401a      	ands	r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	601a      	str	r2, [r3, #0]
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40022000 	.word	0x40022000

08001c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	025b      	lsls	r3, r3, #9
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c48:	e08e      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2017      	movs	r0, #23
 8001c4c:	183b      	adds	r3, r7, r0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c54:	69da      	ldr	r2, [r3, #28]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d110      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	055b      	lsls	r3, r3, #21
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	4b54      	ldr	r3, [pc, #336]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d11a      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8c:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0049      	lsls	r1, r1, #1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f85d 	bl	8000d58 <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca4:	f7ff f858 	bl	8000d58 <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e087      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	23c0      	movs	r3, #192	; 0xc0
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d034      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	23c0      	movs	r3, #192	; 0xc0
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d02c      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a3b      	ldr	r2, [pc, #236]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0249      	lsls	r1, r1, #9
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cfe:	6a1a      	ldr	r2, [r3, #32]
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d02:	4936      	ldr	r1, [pc, #216]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d08:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	4013      	ands	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f81f 	bl	8000d58 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	e009      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff f81a 	bl	8000d58 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e048      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d52:	2317      	movs	r3, #23
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d5e:	69da      	ldr	r2, [r3, #28]
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d62:	4920      	ldr	r1, [pc, #128]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	2203      	movs	r2, #3
 8001d78:	4393      	bics	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	2210      	movs	r2, #16
 8001d96:	4393      	bics	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	d009      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	fffffcff 	.word	0xfffffcff
 8001ddc:	fffeffff 	.word	0xfffeffff
 8001de0:	00001388 	.word	0x00001388
 8001de4:	efffffff 	.word	0xefffffff

08001de8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001df0:	230f      	movs	r3, #15
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e081      	b.n	8001f06 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7f5b      	ldrb	r3, [r3, #29]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe fd1f 	bl	8000858 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2210      	movs	r2, #16
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d05c      	beq.n	8001ee8 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	22ca      	movs	r2, #202	; 0xca
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2253      	movs	r2, #83	; 0x53
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001e3e:	250f      	movs	r5, #15
 8001e40:	197c      	adds	r4, r7, r5
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f88f 	bl	8001f68 <RTC_EnterInitMode>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001e4e:	0028      	movs	r0, r5
 8001e50:	183b      	adds	r3, r7, r0
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d12c      	bne.n	8001eb2 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	492b      	ldr	r1, [pc, #172]	; (8001f10 <HAL_RTC_Init+0x128>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68d2      	ldr	r2, [r2, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6919      	ldr	r1, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	041a      	lsls	r2, r3, #16
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001ea4:	183c      	adds	r4, r7, r0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 f8a0 	bl	8001fee <RTC_ExitInitMode>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d110      	bne.n	8001ede <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4913      	ldr	r1, [pc, #76]	; (8001f14 <HAL_RTC_Init+0x12c>)
 8001ec8:	400a      	ands	r2, r1
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	22ff      	movs	r2, #255	; 0xff
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ee6:	e003      	b.n	8001ef0 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001ee8:	230f      	movs	r3, #15
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001f00:	230f      	movs	r3, #15
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	781b      	ldrb	r3, [r3, #0]
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	ff8fffbf 	.word	0xff8fffbf
 8001f14:	fffbffff 	.word	0xfffbffff

08001f18 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_RTC_WaitForSynchro+0x4c>)
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2c:	f7fe ff14 	bl	8000d58 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f34:	e00a      	b.n	8001f4c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f36:	f7fe ff0f 	bl	8000d58 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1ad2      	subs	r2, r2, r3
 8001f40:	23fa      	movs	r3, #250	; 0xfa
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d901      	bls.n	8001f4c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e006      	b.n	8001f5a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	4013      	ands	r3, r2
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b004      	add	sp, #16
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	00017d5d 	.word	0x00017d5d

08001f68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	230f      	movs	r3, #15
 8001f76:	18fb      	adds	r3, r7, r3
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2240      	movs	r2, #64	; 0x40
 8001f84:	4013      	ands	r3, r2
 8001f86:	d12b      	bne.n	8001fe0 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	430a      	orrs	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fede 	bl	8000d58 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001fa0:	e013      	b.n	8001fca <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fa2:	f7fe fed9 	bl	8000d58 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1ad2      	subs	r2, r2, r3
 8001fac:	200f      	movs	r0, #15
 8001fae:	183b      	adds	r3, r7, r0
 8001fb0:	1839      	adds	r1, r7, r0
 8001fb2:	7809      	ldrb	r1, [r1, #0]
 8001fb4:	7019      	strb	r1, [r3, #0]
 8001fb6:	23fa      	movs	r3, #250	; 0xfa
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d905      	bls.n	8001fca <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001fc4:	183b      	adds	r3, r7, r0
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d104      	bne.n	8001fe0 <RTC_EnterInitMode+0x78>
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d1e0      	bne.n	8001fa2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	781b      	ldrb	r3, [r3, #0]
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}

08001fee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001fee:	b590      	push	{r4, r7, lr}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	240f      	movs	r4, #15
 8001ff8:	193b      	adds	r3, r7, r4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	438a      	bics	r2, r1
 800200c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2220      	movs	r2, #32
 8002016:	4013      	ands	r3, r2
 8002018:	d10b      	bne.n	8002032 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff ff7b 	bl	8001f18 <HAL_RTC_WaitForSynchro>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d005      	beq.n	8002032 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800202c:	193b      	adds	r3, r7, r4
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002032:	230f      	movs	r3, #15
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	781b      	ldrb	r3, [r3, #0]
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b005      	add	sp, #20
 800203e:	bd90      	pop	{r4, r7, pc}

08002040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e042      	b.n	80020d8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	223d      	movs	r2, #61	; 0x3d
 8002056:	5c9b      	ldrb	r3, [r3, r2]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	223c      	movs	r2, #60	; 0x3c
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f839 	bl	80020e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223d      	movs	r2, #61	; 0x3d
 8002072:	2102      	movs	r1, #2
 8002074:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	0019      	movs	r1, r3
 8002080:	0010      	movs	r0, r2
 8002082:	f000 f9b7 	bl	80023f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2246      	movs	r2, #70	; 0x46
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	223e      	movs	r2, #62	; 0x3e
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	223f      	movs	r2, #63	; 0x3f
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2240      	movs	r2, #64	; 0x40
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2241      	movs	r2, #65	; 0x41
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2242      	movs	r2, #66	; 0x42
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2243      	movs	r2, #67	; 0x43
 80020ba:	2101      	movs	r1, #1
 80020bc:	5499      	strb	r1, [r3, r2]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2244      	movs	r2, #68	; 0x44
 80020c2:	2101      	movs	r1, #1
 80020c4:	5499      	strb	r1, [r3, r2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2245      	movs	r2, #69	; 0x45
 80020ca:	2101      	movs	r1, #1
 80020cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	223d      	movs	r2, #61	; 0x3d
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020e8:	46c0      	nop			; (mov r8, r8)
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	223d      	movs	r2, #61	; 0x3d
 80020fc:	5c9b      	ldrb	r3, [r3, r2]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d001      	beq.n	8002108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e035      	b.n	8002174 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	223d      	movs	r2, #61	; 0x3d
 800210c:	2102      	movs	r1, #2
 800210e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2101      	movs	r1, #1
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <HAL_TIM_Base_Start_IT+0x8c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_TIM_Base_Start_IT+0x4e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_TIM_Base_Start_IT+0x90>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_TIM_Base_Start_IT+0x4e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_TIM_Base_Start_IT+0x94>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2207      	movs	r2, #7
 8002146:	4013      	ands	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b06      	cmp	r3, #6
 800214e:	d010      	beq.n	8002172 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002160:	e007      	b.n	8002172 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b004      	add	sp, #16
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40012c00 	.word	0x40012c00
 8002180:	40000400 	.word	0x40000400
 8002184:	40014000 	.word	0x40014000

08002188 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d124      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d11d      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4252      	negs	r2, r2
 80021b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2203      	movs	r2, #3
 80021c4:	4013      	ands	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f8fa 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e007      	b.n	80021e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f8ed 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f8f9 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2204      	movs	r2, #4
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d125      	bne.n	8002242 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2204      	movs	r2, #4
 80021fe:	4013      	ands	r3, r2
 8002200:	2b04      	cmp	r3, #4
 8002202:	d11e      	bne.n	8002242 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2205      	movs	r2, #5
 800220a:	4252      	negs	r2, r2
 800220c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	23c0      	movs	r3, #192	; 0xc0
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 f8cd 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 800222a:	e007      	b.n	800223c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	0018      	movs	r0, r3
 8002230:	f000 f8c0 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 f8cc 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2208      	movs	r2, #8
 800224a:	4013      	ands	r3, r2
 800224c:	2b08      	cmp	r3, #8
 800224e:	d124      	bne.n	800229a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2208      	movs	r2, #8
 8002258:	4013      	ands	r3, r2
 800225a:	2b08      	cmp	r3, #8
 800225c:	d11d      	bne.n	800229a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2209      	movs	r2, #9
 8002264:	4252      	negs	r2, r2
 8002266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2204      	movs	r2, #4
 800226c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2203      	movs	r2, #3
 8002276:	4013      	ands	r3, r2
 8002278:	d004      	beq.n	8002284 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 f8a1 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 8002282:	e007      	b.n	8002294 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f894 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	0018      	movs	r0, r3
 8002290:	f000 f8a0 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d125      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2210      	movs	r2, #16
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d11e      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2211      	movs	r2, #17
 80022bc:	4252      	negs	r2, r2
 80022be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2208      	movs	r2, #8
 80022c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69da      	ldr	r2, [r3, #28]
 80022cc:	23c0      	movs	r3, #192	; 0xc0
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f874 	bl	80023c4 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e007      	b.n	80022ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f867 	bl	80023b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 f873 	bl	80023d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10f      	bne.n	8002322 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	2b01      	cmp	r3, #1
 800230e:	d108      	bne.n	8002322 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2202      	movs	r2, #2
 8002316:	4252      	negs	r2, r2
 8002318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f7fe fa59 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	4013      	ands	r3, r2
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d10f      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	4013      	ands	r3, r2
 800233a:	2b80      	cmp	r3, #128	; 0x80
 800233c:	d108      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2281      	movs	r2, #129	; 0x81
 8002344:	4252      	negs	r2, r2
 8002346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f8d0 	bl	80024f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	4013      	ands	r3, r2
 800235a:	2b40      	cmp	r3, #64	; 0x40
 800235c:	d10f      	bne.n	800237e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	4013      	ands	r3, r2
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d108      	bne.n	800237e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2241      	movs	r2, #65	; 0x41
 8002372:	4252      	negs	r2, r2
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f833 	bl	80023e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2220      	movs	r2, #32
 8002386:	4013      	ands	r3, r2
 8002388:	2b20      	cmp	r3, #32
 800238a:	d10f      	bne.n	80023ac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	4013      	ands	r3, r2
 8002396:	2b20      	cmp	r3, #32
 8002398:	d108      	bne.n	80023ac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2221      	movs	r2, #33	; 0x21
 80023a0:	4252      	negs	r2, r2
 80023a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f89a 	bl	80024e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <TIM_Base_SetConfig+0xd0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <TIM_Base_SetConfig+0x20>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a2e      	ldr	r2, [pc, #184]	; (80024c8 <TIM_Base_SetConfig+0xd4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d108      	bne.n	8002426 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2270      	movs	r2, #112	; 0x70
 8002418:	4393      	bics	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <TIM_Base_SetConfig+0xd0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <TIM_Base_SetConfig+0x62>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <TIM_Base_SetConfig+0xd4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00f      	beq.n	8002456 <TIM_Base_SetConfig+0x62>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <TIM_Base_SetConfig+0xd8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00b      	beq.n	8002456 <TIM_Base_SetConfig+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <TIM_Base_SetConfig+0xdc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <TIM_Base_SetConfig+0x62>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <TIM_Base_SetConfig+0xe0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d003      	beq.n	8002456 <TIM_Base_SetConfig+0x62>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <TIM_Base_SetConfig+0xe4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d108      	bne.n	8002468 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <TIM_Base_SetConfig+0xe8>)
 800245a:	4013      	ands	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	4393      	bics	r3, r2
 800246e:	001a      	movs	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <TIM_Base_SetConfig+0xd0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0xba>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <TIM_Base_SetConfig+0xdc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0xba>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <TIM_Base_SetConfig+0xe0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0xba>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <TIM_Base_SetConfig+0xe4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d103      	bne.n	80024b6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	615a      	str	r2, [r3, #20]
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b004      	add	sp, #16
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40002000 	.word	0x40002000
 80024d0:	40014000 	.word	0x40014000
 80024d4:	40014400 	.word	0x40014400
 80024d8:	40014800 	.word	0x40014800
 80024dc:	fffffcff 	.word	0xfffffcff

080024e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e044      	b.n	800259c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2278      	movs	r2, #120	; 0x78
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe f9af 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2224      	movs	r2, #36	; 0x24
 800252e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	438a      	bics	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f000 fc0c 	bl	8002d60 <UART_SetConfig>
 8002548:	0003      	movs	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e024      	b.n	800259c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fd57 	bl	8003010 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	490d      	ldr	r1, [pc, #52]	; (80025a4 <HAL_UART_Init+0xa4>)
 800256e:	400a      	ands	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2108      	movs	r1, #8
 800257e:	438a      	bics	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 fdef 	bl	8003178 <UART_CheckIdleState>
 800259a:	0003      	movs	r3, r0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	fffff7ff 	.word	0xfffff7ff

080025a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	1dbb      	adds	r3, r7, #6
 80025b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d000      	beq.n	80025c2 <HAL_UART_Transmit+0x1a>
 80025c0:	e08d      	b.n	80026de <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_UART_Transmit+0x28>
 80025c8:	1dbb      	adds	r3, r7, #6
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e085      	b.n	80026e0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	015b      	lsls	r3, r3, #5
 80025dc:	429a      	cmp	r2, r3
 80025de:	d109      	bne.n	80025f4 <HAL_UART_Transmit+0x4c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e075      	b.n	80026e0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2284      	movs	r2, #132	; 0x84
 80025f8:	2100      	movs	r1, #0
 80025fa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2221      	movs	r2, #33	; 0x21
 8002600:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002602:	f7fe fba9 	bl	8000d58 <HAL_GetTick>
 8002606:	0003      	movs	r3, r0
 8002608:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1dba      	adds	r2, r7, #6
 800260e:	2150      	movs	r1, #80	; 0x50
 8002610:	8812      	ldrh	r2, [r2, #0]
 8002612:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1dba      	adds	r2, r7, #6
 8002618:	2152      	movs	r1, #82	; 0x52
 800261a:	8812      	ldrh	r2, [r2, #0]
 800261c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	015b      	lsls	r3, r3, #5
 8002626:	429a      	cmp	r2, r3
 8002628:	d108      	bne.n	800263c <HAL_UART_Transmit+0x94>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d104      	bne.n	800263c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	e003      	b.n	8002644 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002644:	e030      	b.n	80026a8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	0013      	movs	r3, r2
 8002650:	2200      	movs	r2, #0
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	f000 fe38 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d004      	beq.n	8002666 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e03c      	b.n	80026e0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	881a      	ldrh	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	05d2      	lsls	r2, r2, #23
 8002676:	0dd2      	lsrs	r2, r2, #23
 8002678:	b292      	uxth	r2, r2
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	3302      	adds	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	e008      	b.n	8002696 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b292      	uxth	r2, r2
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	3301      	adds	r3, #1
 8002694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2252      	movs	r2, #82	; 0x52
 800269a:	5a9b      	ldrh	r3, [r3, r2]
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b299      	uxth	r1, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2252      	movs	r2, #82	; 0x52
 80026a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2252      	movs	r2, #82	; 0x52
 80026ac:	5a9b      	ldrh	r3, [r3, r2]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1c8      	bne.n	8002646 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	0013      	movs	r3, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	2140      	movs	r1, #64	; 0x40
 80026c2:	f000 fe01 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e005      	b.n	80026e0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
  }
}
 80026e0:	0018      	movs	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b008      	add	sp, #32
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	1dbb      	adds	r3, r7, #6
 80026f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	589b      	ldr	r3, [r3, r2]
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d145      	bne.n	800278c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_UART_Receive_IT+0x26>
 8002706:	1dbb      	adds	r3, r7, #6
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e03d      	b.n	800278e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	015b      	lsls	r3, r3, #5
 800271a:	429a      	cmp	r2, r3
 800271c:	d109      	bne.n	8002732 <HAL_UART_Receive_IT+0x4a>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	d001      	beq.n	8002732 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e02d      	b.n	800278e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	4013      	ands	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002746:	f3ef 8310 	mrs	r3, PRIMASK
 800274a:	613b      	str	r3, [r7, #16]
  return(result);
 800274c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	2301      	movs	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f383 8810 	msr	PRIMASK, r3
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	04c9      	lsls	r1, r1, #19
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f383 8810 	msr	PRIMASK, r3
}
 8002778:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800277a:	1dbb      	adds	r3, r7, #6
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	0018      	movs	r0, r3
 8002784:	f000 fe0a 	bl	800339c <UART_Start_Receive_IT>
 8002788:	0003      	movs	r3, r0
 800278a:	e000      	b.n	800278e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b008      	add	sp, #32
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b0ab      	sub	sp, #172	; 0xac
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	22a4      	movs	r2, #164	; 0xa4
 80027a8:	18b9      	adds	r1, r7, r2
 80027aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	20a0      	movs	r0, #160	; 0xa0
 80027b4:	1839      	adds	r1, r7, r0
 80027b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	219c      	movs	r1, #156	; 0x9c
 80027c0:	1879      	adds	r1, r7, r1
 80027c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027c4:	0011      	movs	r1, r2
 80027c6:	18bb      	adds	r3, r7, r2
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a99      	ldr	r2, [pc, #612]	; (8002a30 <HAL_UART_IRQHandler+0x298>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	2298      	movs	r2, #152	; 0x98
 80027d0:	18bc      	adds	r4, r7, r2
 80027d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80027d4:	18bb      	adds	r3, r7, r2
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d114      	bne.n	8002806 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00f      	beq.n	8002806 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2220      	movs	r2, #32
 80027ec:	4013      	ands	r3, r2
 80027ee:	d00a      	beq.n	8002806 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d100      	bne.n	80027fa <HAL_UART_IRQHandler+0x62>
 80027f8:	e286      	b.n	8002d08 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	0010      	movs	r0, r2
 8002802:	4798      	blx	r3
      }
      return;
 8002804:	e280      	b.n	8002d08 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002806:	2398      	movs	r3, #152	; 0x98
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d100      	bne.n	8002812 <HAL_UART_IRQHandler+0x7a>
 8002810:	e114      	b.n	8002a3c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002812:	239c      	movs	r3, #156	; 0x9c
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	4013      	ands	r3, r2
 800281c:	d106      	bne.n	800282c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800281e:	23a0      	movs	r3, #160	; 0xa0
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a83      	ldr	r2, [pc, #524]	; (8002a34 <HAL_UART_IRQHandler+0x29c>)
 8002826:	4013      	ands	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_UART_IRQHandler+0x94>
 800282a:	e107      	b.n	8002a3c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800282c:	23a4      	movs	r3, #164	; 0xa4
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d012      	beq.n	800285e <HAL_UART_IRQHandler+0xc6>
 8002838:	23a0      	movs	r3, #160	; 0xa0
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4013      	ands	r3, r2
 8002844:	d00b      	beq.n	800285e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2284      	movs	r2, #132	; 0x84
 8002852:	589b      	ldr	r3, [r3, r2]
 8002854:	2201      	movs	r2, #1
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2184      	movs	r1, #132	; 0x84
 800285c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800285e:	23a4      	movs	r3, #164	; 0xa4
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d011      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
 800286a:	239c      	movs	r3, #156	; 0x9c
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d00b      	beq.n	800288e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2284      	movs	r2, #132	; 0x84
 8002882:	589b      	ldr	r3, [r3, r2]
 8002884:	2204      	movs	r2, #4
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2184      	movs	r1, #132	; 0x84
 800288c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800288e:	23a4      	movs	r3, #164	; 0xa4
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2204      	movs	r2, #4
 8002896:	4013      	ands	r3, r2
 8002898:	d011      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
 800289a:	239c      	movs	r3, #156	; 0x9c
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	d00b      	beq.n	80028be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2284      	movs	r2, #132	; 0x84
 80028b2:	589b      	ldr	r3, [r3, r2]
 80028b4:	2202      	movs	r2, #2
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2184      	movs	r1, #132	; 0x84
 80028bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028be:	23a4      	movs	r3, #164	; 0xa4
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2208      	movs	r2, #8
 80028c6:	4013      	ands	r3, r2
 80028c8:	d017      	beq.n	80028fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028ca:	23a0      	movs	r3, #160	; 0xa0
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	d105      	bne.n	80028e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028d6:	239c      	movs	r3, #156	; 0x9c
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e0:	d00b      	beq.n	80028fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2208      	movs	r2, #8
 80028e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2284      	movs	r2, #132	; 0x84
 80028ee:	589b      	ldr	r3, [r3, r2]
 80028f0:	2208      	movs	r2, #8
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2184      	movs	r1, #132	; 0x84
 80028f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028fa:	23a4      	movs	r3, #164	; 0xa4
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	4013      	ands	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_UART_IRQHandler+0x198>
 8002908:	23a0      	movs	r3, #160	; 0xa0
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	; 0x80
 8002910:	04db      	lsls	r3, r3, #19
 8002912:	4013      	ands	r3, r2
 8002914:	d00c      	beq.n	8002930 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2284      	movs	r2, #132	; 0x84
 8002924:	589b      	ldr	r3, [r3, r2]
 8002926:	2220      	movs	r2, #32
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2184      	movs	r1, #132	; 0x84
 800292e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2284      	movs	r2, #132	; 0x84
 8002934:	589b      	ldr	r3, [r3, r2]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d100      	bne.n	800293c <HAL_UART_IRQHandler+0x1a4>
 800293a:	e1e7      	b.n	8002d0c <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800293c:	23a4      	movs	r3, #164	; 0xa4
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2220      	movs	r2, #32
 8002944:	4013      	ands	r3, r2
 8002946:	d00e      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002948:	23a0      	movs	r3, #160	; 0xa0
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2220      	movs	r2, #32
 8002950:	4013      	ands	r3, r2
 8002952:	d008      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	0010      	movs	r0, r2
 8002964:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2284      	movs	r2, #132	; 0x84
 800296a:	589b      	ldr	r3, [r3, r2]
 800296c:	2194      	movs	r1, #148	; 0x94
 800296e:	187a      	adds	r2, r7, r1
 8002970:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	4013      	ands	r3, r2
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d004      	beq.n	800298a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002980:	187b      	adds	r3, r7, r1
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2228      	movs	r2, #40	; 0x28
 8002986:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002988:	d047      	beq.n	8002a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fdcf 	bl	8003530 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	4013      	ands	r3, r2
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d137      	bne.n	8002a10 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a0:	f3ef 8310 	mrs	r3, PRIMASK
 80029a4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80029a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a8:	2090      	movs	r0, #144	; 0x90
 80029aa:	183a      	adds	r2, r7, r0
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029b4:	f383 8810 	msr	PRIMASK, r3
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	438a      	bics	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	183b      	adds	r3, r7, r0
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_UART_IRQHandler+0x2a0>)
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fe faa2 	bl	8000f36 <HAL_DMA_Abort_IT>
 80029f2:	1e03      	subs	r3, r0, #0
 80029f4:	d01a      	beq.n	8002a2c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a00:	0018      	movs	r0, r3
 8002a02:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e012      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f995 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0e:	e00d      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f990 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a18:	e008      	b.n	8002a2c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f98b 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2284      	movs	r2, #132	; 0x84
 8002a26:	2100      	movs	r1, #0
 8002a28:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a2a:	e16f      	b.n	8002d0c <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	46c0      	nop			; (mov r8, r8)
    return;
 8002a2e:	e16d      	b.n	8002d0c <HAL_UART_IRQHandler+0x574>
 8002a30:	0000080f 	.word	0x0000080f
 8002a34:	04000120 	.word	0x04000120
 8002a38:	080035f9 	.word	0x080035f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d000      	beq.n	8002a46 <HAL_UART_IRQHandler+0x2ae>
 8002a44:	e139      	b.n	8002cba <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a46:	23a4      	movs	r3, #164	; 0xa4
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d100      	bne.n	8002a54 <HAL_UART_IRQHandler+0x2bc>
 8002a52:	e132      	b.n	8002cba <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <HAL_UART_IRQHandler+0x2ca>
 8002a60:	e12b      	b.n	8002cba <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2240      	movs	r2, #64	; 0x40
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d000      	beq.n	8002a7a <HAL_UART_IRQHandler+0x2e2>
 8002a78:	e09f      	b.n	8002bba <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	217e      	movs	r1, #126	; 0x7e
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <HAL_UART_IRQHandler+0x2fa>
 8002a90:	e13e      	b.n	8002d10 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2258      	movs	r2, #88	; 0x58
 8002a96:	5a9b      	ldrh	r3, [r3, r2]
 8002a98:	187a      	adds	r2, r7, r1
 8002a9a:	8812      	ldrh	r2, [r2, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d300      	bcc.n	8002aa2 <HAL_UART_IRQHandler+0x30a>
 8002aa0:	e136      	b.n	8002d10 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	187a      	adds	r2, r7, r1
 8002aa6:	215a      	movs	r1, #90	; 0x5a
 8002aa8:	8812      	ldrh	r2, [r2, #0]
 8002aaa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d06f      	beq.n	8002b96 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002abe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	f383 8810 	msr	PRIMASK, r3
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4992      	ldr	r1, [pc, #584]	; (8002d20 <HAL_UART_IRQHandler+0x588>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	f383 8810 	msr	PRIMASK, r3
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af0:	677b      	str	r3, [r7, #116]	; 0x74
 8002af2:	2301      	movs	r3, #1
 8002af4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af8:	f383 8810 	msr	PRIMASK, r3
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b14:	f383 8810 	msr	PRIMASK, r3
}
 8002b18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b22:	673b      	str	r3, [r7, #112]	; 0x70
 8002b24:	2301      	movs	r3, #1
 8002b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2140      	movs	r1, #64	; 0x40
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b42:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	f383 8810 	msr	PRIMASK, r3
}
 8002b4a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	2120      	movs	r1, #32
 8002b52:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b64:	2301      	movs	r3, #1
 8002b66:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6a:	f383 8810 	msr	PRIMASK, r3
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	438a      	bics	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b82:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	f383 8810 	msr	PRIMASK, r3
}
 8002b8a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fe f998 	bl	8000ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2258      	movs	r2, #88	; 0x58
 8002ba0:	5a9a      	ldrh	r2, [r3, r2]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	215a      	movs	r1, #90	; 0x5a
 8002ba6:	5a5b      	ldrh	r3, [r3, r1]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f8c8 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb8:	e0aa      	b.n	8002d10 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2258      	movs	r2, #88	; 0x58
 8002bbe:	5a99      	ldrh	r1, [r3, r2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	225a      	movs	r2, #90	; 0x5a
 8002bc4:	5a9b      	ldrh	r3, [r3, r2]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	208e      	movs	r0, #142	; 0x8e
 8002bca:	183b      	adds	r3, r7, r0
 8002bcc:	1a8a      	subs	r2, r1, r2
 8002bce:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	225a      	movs	r2, #90	; 0x5a
 8002bd4:	5a9b      	ldrh	r3, [r3, r2]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d100      	bne.n	8002bde <HAL_UART_IRQHandler+0x446>
 8002bdc:	e09a      	b.n	8002d14 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002bde:	183b      	adds	r3, r7, r0
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d100      	bne.n	8002be8 <HAL_UART_IRQHandler+0x450>
 8002be6:	e095      	b.n	8002d14 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf0:	2488      	movs	r4, #136	; 0x88
 8002bf2:	193a      	adds	r2, r7, r4
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f383 8810 	msr	PRIMASK, r3
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4945      	ldr	r1, [pc, #276]	; (8002d24 <HAL_UART_IRQHandler+0x58c>)
 8002c0e:	400a      	ands	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c20:	f3ef 8310 	mrs	r3, PRIMASK
 8002c24:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c26:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c28:	2484      	movs	r4, #132	; 0x84
 8002c2a:	193a      	adds	r2, r7, r4
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f383 8810 	msr	PRIMASK, r3
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	438a      	bics	r2, r1
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c74:	2480      	movs	r4, #128	; 0x80
 8002c76:	193a      	adds	r2, r7, r4
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	f383 8810 	msr	PRIMASK, r3
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2110      	movs	r1, #16
 8002c92:	438a      	bics	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ca2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0011      	movs	r1, r2
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f848 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cb8:	e02c      	b.n	8002d14 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cba:	23a4      	movs	r3, #164	; 0xa4
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d00f      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002cc6:	23a0      	movs	r3, #160	; 0xa0
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01e      	beq.n	8002d18 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	4798      	blx	r3
    }
    return;
 8002ce4:	e018      	b.n	8002d18 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ce6:	23a4      	movs	r3, #164	; 0xa4
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2240      	movs	r2, #64	; 0x40
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_UART_IRQHandler+0x582>
 8002cf2:	23a0      	movs	r3, #160	; 0xa0
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 fc90 	bl	8003626 <UART_EndTransmit_IT>
    return;
 8002d06:	e008      	b.n	8002d1a <HAL_UART_IRQHandler+0x582>
      return;
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	e006      	b.n	8002d1a <HAL_UART_IRQHandler+0x582>
    return;
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	e004      	b.n	8002d1a <HAL_UART_IRQHandler+0x582>
      return;
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	e002      	b.n	8002d1a <HAL_UART_IRQHandler+0x582>
      return;
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	e000      	b.n	8002d1a <HAL_UART_IRQHandler+0x582>
    return;
 8002d18:	46c0      	nop			; (mov r8, r8)
  }

}
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b02b      	add	sp, #172	; 0xac
 8002d1e:	bd90      	pop	{r4, r7, pc}
 8002d20:	fffffeff 	.word	0xfffffeff
 8002d24:	fffffedf 	.word	0xfffffedf

08002d28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	000a      	movs	r2, r1
 8002d52:	1cbb      	adds	r3, r7, #2
 8002d54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b002      	add	sp, #8
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d68:	231e      	movs	r3, #30
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a97      	ldr	r2, [pc, #604]	; (8002fec <UART_SetConfig+0x28c>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a92      	ldr	r2, [pc, #584]	; (8002ff0 <UART_SetConfig+0x290>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	4a89      	ldr	r2, [pc, #548]	; (8002ff4 <UART_SetConfig+0x294>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a85      	ldr	r2, [pc, #532]	; (8002ff8 <UART_SetConfig+0x298>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d127      	bne.n	8002e36 <UART_SetConfig+0xd6>
 8002de6:	4b85      	ldr	r3, [pc, #532]	; (8002ffc <UART_SetConfig+0x29c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	2203      	movs	r2, #3
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d00d      	beq.n	8002e0e <UART_SetConfig+0xae>
 8002df2:	d81b      	bhi.n	8002e2c <UART_SetConfig+0xcc>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d014      	beq.n	8002e22 <UART_SetConfig+0xc2>
 8002df8:	d818      	bhi.n	8002e2c <UART_SetConfig+0xcc>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <UART_SetConfig+0xa4>
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d00a      	beq.n	8002e18 <UART_SetConfig+0xb8>
 8002e02:	e013      	b.n	8002e2c <UART_SetConfig+0xcc>
 8002e04:	231f      	movs	r3, #31
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e035      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e0e:	231f      	movs	r3, #31
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	2202      	movs	r2, #2
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e030      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e18:	231f      	movs	r3, #31
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e02b      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e22:	231f      	movs	r3, #31
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	2208      	movs	r2, #8
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	e026      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e2c:	231f      	movs	r3, #31
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2210      	movs	r2, #16
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e021      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a71      	ldr	r2, [pc, #452]	; (8003000 <UART_SetConfig+0x2a0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d104      	bne.n	8002e4a <UART_SetConfig+0xea>
 8002e40:	231f      	movs	r3, #31
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e017      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6d      	ldr	r2, [pc, #436]	; (8003004 <UART_SetConfig+0x2a4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d104      	bne.n	8002e5e <UART_SetConfig+0xfe>
 8002e54:	231f      	movs	r3, #31
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e00d      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a69      	ldr	r2, [pc, #420]	; (8003008 <UART_SetConfig+0x2a8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d104      	bne.n	8002e72 <UART_SetConfig+0x112>
 8002e68:	231f      	movs	r3, #31
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e003      	b.n	8002e7a <UART_SetConfig+0x11a>
 8002e72:	231f      	movs	r3, #31
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2210      	movs	r2, #16
 8002e78:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d15c      	bne.n	8002f40 <UART_SetConfig+0x1e0>
  {
    switch (clocksource)
 8002e86:	231f      	movs	r3, #31
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d015      	beq.n	8002ebc <UART_SetConfig+0x15c>
 8002e90:	dc18      	bgt.n	8002ec4 <UART_SetConfig+0x164>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d00d      	beq.n	8002eb2 <UART_SetConfig+0x152>
 8002e96:	dc15      	bgt.n	8002ec4 <UART_SetConfig+0x164>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <UART_SetConfig+0x142>
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d005      	beq.n	8002eac <UART_SetConfig+0x14c>
 8002ea0:	e010      	b.n	8002ec4 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f7fe fe83 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	61bb      	str	r3, [r7, #24]
        break;
 8002eaa:	e012      	b.n	8002ed2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eac:	4b57      	ldr	r3, [pc, #348]	; (800300c <UART_SetConfig+0x2ac>)
 8002eae:	61bb      	str	r3, [r7, #24]
        break;
 8002eb0:	e00f      	b.n	8002ed2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb2:	f7fe fe19 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	61bb      	str	r3, [r7, #24]
        break;
 8002eba:	e00a      	b.n	8002ed2 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	61bb      	str	r3, [r7, #24]
        break;
 8002ec2:	e006      	b.n	8002ed2 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ec8:	231e      	movs	r3, #30
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
        break;
 8002ed0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d100      	bne.n	8002eda <UART_SetConfig+0x17a>
 8002ed8:	e07a      	b.n	8002fd0 <UART_SetConfig+0x270>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	005a      	lsls	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	18d2      	adds	r2, r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	0019      	movs	r1, r3
 8002eec:	0010      	movs	r0, r2
 8002eee:	f7fd f91d 	bl	800012c <__udivsi3>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b0f      	cmp	r3, #15
 8002efa:	d91c      	bls.n	8002f36 <UART_SetConfig+0x1d6>
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	025b      	lsls	r3, r3, #9
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d217      	bcs.n	8002f36 <UART_SetConfig+0x1d6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	200e      	movs	r0, #14
 8002f0c:	183b      	adds	r3, r7, r0
 8002f0e:	210f      	movs	r1, #15
 8002f10:	438a      	bics	r2, r1
 8002f12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b299      	uxth	r1, r3
 8002f20:	183b      	adds	r3, r7, r0
 8002f22:	183a      	adds	r2, r7, r0
 8002f24:	8812      	ldrh	r2, [r2, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	183a      	adds	r2, r7, r0
 8002f30:	8812      	ldrh	r2, [r2, #0]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	e04c      	b.n	8002fd0 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8002f36:	231e      	movs	r3, #30
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e047      	b.n	8002fd0 <UART_SetConfig+0x270>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f40:	231f      	movs	r3, #31
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d015      	beq.n	8002f76 <UART_SetConfig+0x216>
 8002f4a:	dc18      	bgt.n	8002f7e <UART_SetConfig+0x21e>
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d00d      	beq.n	8002f6c <UART_SetConfig+0x20c>
 8002f50:	dc15      	bgt.n	8002f7e <UART_SetConfig+0x21e>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <UART_SetConfig+0x1fc>
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d005      	beq.n	8002f66 <UART_SetConfig+0x206>
 8002f5a:	e010      	b.n	8002f7e <UART_SetConfig+0x21e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7fe fe26 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8002f60:	0003      	movs	r3, r0
 8002f62:	61bb      	str	r3, [r7, #24]
        break;
 8002f64:	e012      	b.n	8002f8c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <UART_SetConfig+0x2ac>)
 8002f68:	61bb      	str	r3, [r7, #24]
        break;
 8002f6a:	e00f      	b.n	8002f8c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6c:	f7fe fdbc 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8002f70:	0003      	movs	r3, r0
 8002f72:	61bb      	str	r3, [r7, #24]
        break;
 8002f74:	e00a      	b.n	8002f8c <UART_SetConfig+0x22c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	61bb      	str	r3, [r7, #24]
        break;
 8002f7c:	e006      	b.n	8002f8c <UART_SetConfig+0x22c>
      default:
        pclk = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f82:	231e      	movs	r3, #30
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
        break;
 8002f8a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01e      	beq.n	8002fd0 <UART_SetConfig+0x270>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	085a      	lsrs	r2, r3, #1
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	18d2      	adds	r2, r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	f7fd f8c2 	bl	800012c <__udivsi3>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	d90a      	bls.n	8002fc8 <UART_SetConfig+0x268>
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	025b      	lsls	r3, r3, #9
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d205      	bcs.n	8002fc8 <UART_SetConfig+0x268>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	e003      	b.n	8002fd0 <UART_SetConfig+0x270>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc8:	231e      	movs	r3, #30
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fdc:	231e      	movs	r3, #30
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b008      	add	sp, #32
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	efff69f3 	.word	0xefff69f3
 8002ff0:	ffffcfff 	.word	0xffffcfff
 8002ff4:	fffff4ff 	.word	0xfffff4ff
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40004400 	.word	0x40004400
 8003004:	40004800 	.word	0x40004800
 8003008:	40004c00 	.word	0x40004c00
 800300c:	007a1200 	.word	0x007a1200

08003010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2201      	movs	r2, #1
 800301e:	4013      	ands	r3, r2
 8003020:	d00b      	beq.n	800303a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <UART_AdvFeatureConfig+0x144>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2202      	movs	r2, #2
 8003040:	4013      	ands	r3, r2
 8003042:	d00b      	beq.n	800305c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a43      	ldr	r2, [pc, #268]	; (8003158 <UART_AdvFeatureConfig+0x148>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2204      	movs	r2, #4
 8003062:	4013      	ands	r3, r2
 8003064:	d00b      	beq.n	800307e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a3b      	ldr	r2, [pc, #236]	; (800315c <UART_AdvFeatureConfig+0x14c>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2208      	movs	r2, #8
 8003084:	4013      	ands	r3, r2
 8003086:	d00b      	beq.n	80030a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a34      	ldr	r2, [pc, #208]	; (8003160 <UART_AdvFeatureConfig+0x150>)
 8003090:	4013      	ands	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2210      	movs	r2, #16
 80030a6:	4013      	ands	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <UART_AdvFeatureConfig+0x154>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2220      	movs	r2, #32
 80030c8:	4013      	ands	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	4a25      	ldr	r2, [pc, #148]	; (8003168 <UART_AdvFeatureConfig+0x158>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2240      	movs	r2, #64	; 0x40
 80030ea:	4013      	ands	r3, r2
 80030ec:	d01d      	beq.n	800312a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <UART_AdvFeatureConfig+0x15c>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	035b      	lsls	r3, r3, #13
 800310e:	429a      	cmp	r2, r3
 8003110:	d10b      	bne.n	800312a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <UART_AdvFeatureConfig+0x160>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	4013      	ands	r3, r2
 8003132:	d00b      	beq.n	800314c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <UART_AdvFeatureConfig+0x164>)
 800313c:	4013      	ands	r3, r2
 800313e:	0019      	movs	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	605a      	str	r2, [r3, #4]
  }
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}
 8003154:	fffdffff 	.word	0xfffdffff
 8003158:	fffeffff 	.word	0xfffeffff
 800315c:	fffbffff 	.word	0xfffbffff
 8003160:	ffff7fff 	.word	0xffff7fff
 8003164:	ffffefff 	.word	0xffffefff
 8003168:	ffffdfff 	.word	0xffffdfff
 800316c:	ffefffff 	.word	0xffefffff
 8003170:	ff9fffff 	.word	0xff9fffff
 8003174:	fff7ffff 	.word	0xfff7ffff

08003178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b092      	sub	sp, #72	; 0x48
 800317c:	af02      	add	r7, sp, #8
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2284      	movs	r2, #132	; 0x84
 8003184:	2100      	movs	r1, #0
 8003186:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003188:	f7fd fde6 	bl	8000d58 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2208      	movs	r2, #8
 8003198:	4013      	ands	r3, r2
 800319a:	2b08      	cmp	r3, #8
 800319c:	d12c      	bne.n	80031f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	0391      	lsls	r1, r2, #14
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4a46      	ldr	r2, [pc, #280]	; (80032c0 <UART_CheckIdleState+0x148>)
 80031a8:	9200      	str	r2, [sp, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f000 f88c 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d021      	beq.n	80031f8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b4:	f3ef 8310 	mrs	r3, PRIMASK
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80031be:	2301      	movs	r3, #1
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	f383 8810 	msr	PRIMASK, r3
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	438a      	bics	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2278      	movs	r2, #120	; 0x78
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e05f      	b.n	80032b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2204      	movs	r2, #4
 8003200:	4013      	ands	r3, r2
 8003202:	2b04      	cmp	r3, #4
 8003204:	d146      	bne.n	8003294 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	03d1      	lsls	r1, r2, #15
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <UART_CheckIdleState+0x148>)
 8003210:	9200      	str	r2, [sp, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	f000 f858 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d03b      	beq.n	8003294 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321c:	f3ef 8310 	mrs	r3, PRIMASK
 8003220:	60fb      	str	r3, [r7, #12]
  return(result);
 8003222:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
 8003226:	2301      	movs	r3, #1
 8003228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f383 8810 	msr	PRIMASK, r3
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4921      	ldr	r1, [pc, #132]	; (80032c4 <UART_CheckIdleState+0x14c>)
 800323e:	400a      	ands	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f383 8810 	msr	PRIMASK, r3
}
 800324c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324e:	f3ef 8310 	mrs	r3, PRIMASK
 8003252:	61bb      	str	r3, [r7, #24]
  return(result);
 8003254:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
 8003258:	2301      	movs	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f383 8810 	msr	PRIMASK, r3
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2101      	movs	r1, #1
 8003270:	438a      	bics	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f383 8810 	msr	PRIMASK, r3
}
 800327e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	2120      	movs	r1, #32
 8003286:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2278      	movs	r2, #120	; 0x78
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e011      	b.n	80032b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2280      	movs	r2, #128	; 0x80
 800329e:	2120      	movs	r1, #32
 80032a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2278      	movs	r2, #120	; 0x78
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b010      	add	sp, #64	; 0x40
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	01ffffff 	.word	0x01ffffff
 80032c4:	fffffedf 	.word	0xfffffedf

080032c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d8:	e04b      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3301      	adds	r3, #1
 80032de:	d048      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e0:	f7fd fd3a 	bl	8000d58 <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d302      	bcc.n	80032f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04b      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2204      	movs	r2, #4
 8003302:	4013      	ands	r3, r2
 8003304:	d035      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2208      	movs	r2, #8
 800330e:	4013      	ands	r3, r2
 8003310:	2b08      	cmp	r3, #8
 8003312:	d111      	bne.n	8003338 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2208      	movs	r2, #8
 800331a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	0018      	movs	r0, r3
 8003320:	f000 f906 	bl	8003530 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2284      	movs	r2, #132	; 0x84
 8003328:	2108      	movs	r1, #8
 800332a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2278      	movs	r2, #120	; 0x78
 8003330:	2100      	movs	r1, #0
 8003332:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e02c      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	401a      	ands	r2, r3
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	429a      	cmp	r2, r3
 800334a:	d112      	bne.n	8003372 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0018      	movs	r0, r3
 800335a:	f000 f8e9 	bl	8003530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2284      	movs	r2, #132	; 0x84
 8003362:	2120      	movs	r1, #32
 8003364:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2278      	movs	r2, #120	; 0x78
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e00f      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	425a      	negs	r2, r3
 8003382:	4153      	adcs	r3, r2
 8003384:	b2db      	uxtb	r3, r3
 8003386:	001a      	movs	r2, r3
 8003388:	1dfb      	adds	r3, r7, #7
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d0a4      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b090      	sub	sp, #64	; 0x40
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	1dbb      	adds	r3, r7, #6
 80033a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1dba      	adds	r2, r7, #6
 80033b4:	2158      	movs	r1, #88	; 0x58
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1dba      	adds	r2, r7, #6
 80033be:	215a      	movs	r1, #90	; 0x5a
 80033c0:	8812      	ldrh	r2, [r2, #0]
 80033c2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	015b      	lsls	r3, r3, #5
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d10d      	bne.n	80033f2 <UART_Start_Receive_IT+0x56>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <UART_Start_Receive_IT+0x4c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	225c      	movs	r2, #92	; 0x5c
 80033e2:	4950      	ldr	r1, [pc, #320]	; (8003524 <UART_Start_Receive_IT+0x188>)
 80033e4:	5299      	strh	r1, [r3, r2]
 80033e6:	e02e      	b.n	8003446 <UART_Start_Receive_IT+0xaa>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	225c      	movs	r2, #92	; 0x5c
 80033ec:	21ff      	movs	r1, #255	; 0xff
 80033ee:	5299      	strh	r1, [r3, r2]
 80033f0:	e029      	b.n	8003446 <UART_Start_Receive_IT+0xaa>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10d      	bne.n	8003416 <UART_Start_Receive_IT+0x7a>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <UART_Start_Receive_IT+0x70>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	225c      	movs	r2, #92	; 0x5c
 8003406:	21ff      	movs	r1, #255	; 0xff
 8003408:	5299      	strh	r1, [r3, r2]
 800340a:	e01c      	b.n	8003446 <UART_Start_Receive_IT+0xaa>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	225c      	movs	r2, #92	; 0x5c
 8003410:	217f      	movs	r1, #127	; 0x7f
 8003412:	5299      	strh	r1, [r3, r2]
 8003414:	e017      	b.n	8003446 <UART_Start_Receive_IT+0xaa>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	055b      	lsls	r3, r3, #21
 800341e:	429a      	cmp	r2, r3
 8003420:	d10d      	bne.n	800343e <UART_Start_Receive_IT+0xa2>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <UART_Start_Receive_IT+0x98>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	225c      	movs	r2, #92	; 0x5c
 800342e:	217f      	movs	r1, #127	; 0x7f
 8003430:	5299      	strh	r1, [r3, r2]
 8003432:	e008      	b.n	8003446 <UART_Start_Receive_IT+0xaa>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	225c      	movs	r2, #92	; 0x5c
 8003438:	213f      	movs	r1, #63	; 0x3f
 800343a:	5299      	strh	r1, [r3, r2]
 800343c:	e003      	b.n	8003446 <UART_Start_Receive_IT+0xaa>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	225c      	movs	r2, #92	; 0x5c
 8003442:	2100      	movs	r1, #0
 8003444:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2284      	movs	r2, #132	; 0x84
 800344a:	2100      	movs	r1, #0
 800344c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	2122      	movs	r1, #34	; 0x22
 8003454:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003456:	f3ef 8310 	mrs	r3, PRIMASK
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003460:	2301      	movs	r3, #1
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	f383 8810 	msr	PRIMASK, r3
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2101      	movs	r1, #1
 8003478:	430a      	orrs	r2, r1
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	f383 8810 	msr	PRIMASK, r3
}
 8003486:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	015b      	lsls	r3, r3, #5
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <UART_Start_Receive_IT+0x108>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d103      	bne.n	80034a4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <UART_Start_Receive_IT+0x18c>)
 80034a0:	669a      	str	r2, [r3, #104]	; 0x68
 80034a2:	e002      	b.n	80034aa <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <UART_Start_Receive_IT+0x190>)
 80034a8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d019      	beq.n	80034e6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b2:	f3ef 8310 	mrs	r3, PRIMASK
 80034b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80034b8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
 80034bc:	2301      	movs	r3, #1
 80034be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2190      	movs	r1, #144	; 0x90
 80034d4:	0049      	lsls	r1, r1, #1
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	e018      	b.n	8003518 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ea:	613b      	str	r3, [r7, #16]
  return(result);
 80034ec:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f383 8810 	msr	PRIMASK, r3
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2120      	movs	r1, #32
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f383 8810 	msr	PRIMASK, r3
}
 8003516:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b010      	add	sp, #64	; 0x40
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	000001ff 	.word	0x000001ff
 8003528:	08003835 	.word	0x08003835
 800352c:	0800367d 	.word	0x0800367d

08003530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08e      	sub	sp, #56	; 0x38
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003538:	f3ef 8310 	mrs	r3, PRIMASK
 800353c:	617b      	str	r3, [r7, #20]
  return(result);
 800353e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
 8003542:	2301      	movs	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f383 8810 	msr	PRIMASK, r3
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4926      	ldr	r1, [pc, #152]	; (80035f4 <UART_EndRxTransfer+0xc4>)
 800355a:	400a      	ands	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003560:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f383 8810 	msr	PRIMASK, r3
}
 8003568:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356a:	f3ef 8310 	mrs	r3, PRIMASK
 800356e:	623b      	str	r3, [r7, #32]
  return(result);
 8003570:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f383 8810 	msr	PRIMASK, r3
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2101      	movs	r1, #1
 800358c:	438a      	bics	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	f383 8810 	msr	PRIMASK, r3
}
 800359a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d118      	bne.n	80035d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a4:	f3ef 8310 	mrs	r3, PRIMASK
 80035a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80035aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ae:	2301      	movs	r3, #1
 80035b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2110      	movs	r1, #16
 80035c6:	438a      	bics	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	2120      	movs	r1, #32
 80035dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b00e      	add	sp, #56	; 0x38
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	fffffedf 	.word	0xfffffedf

080035f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	225a      	movs	r2, #90	; 0x5a
 800360a:	2100      	movs	r1, #0
 800360c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2252      	movs	r2, #82	; 0x52
 8003612:	2100      	movs	r1, #0
 8003614:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff fb8d 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b004      	add	sp, #16
 8003624:	bd80      	pop	{r7, pc}

08003626 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362e:	f3ef 8310 	mrs	r3, PRIMASK
 8003632:	60bb      	str	r3, [r7, #8]
  return(result);
 8003634:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	2301      	movs	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2140      	movs	r1, #64	; 0x40
 8003650:	438a      	bics	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f383 8810 	msr	PRIMASK, r3
}
 800365e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f7ff fb5a 	bl	8002d28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b006      	add	sp, #24
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b094      	sub	sp, #80	; 0x50
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003684:	204e      	movs	r0, #78	; 0x4e
 8003686:	183b      	adds	r3, r7, r0
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	215c      	movs	r1, #92	; 0x5c
 800368c:	5a52      	ldrh	r2, [r2, r1]
 800368e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	589b      	ldr	r3, [r3, r2]
 8003696:	2b22      	cmp	r3, #34	; 0x22
 8003698:	d000      	beq.n	800369c <UART_RxISR_8BIT+0x20>
 800369a:	e0ba      	b.n	8003812 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	214c      	movs	r1, #76	; 0x4c
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80036a6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	b2d9      	uxtb	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	400a      	ands	r2, r1
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	225a      	movs	r2, #90	; 0x5a
 80036cc:	5a9b      	ldrh	r3, [r3, r2]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b299      	uxth	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	225a      	movs	r2, #90	; 0x5a
 80036d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	225a      	movs	r2, #90	; 0x5a
 80036de:	5a9b      	ldrh	r3, [r3, r2]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d000      	beq.n	80036e8 <UART_RxISR_8BIT+0x6c>
 80036e6:	e09c      	b.n	8003822 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f2:	2301      	movs	r3, #1
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	f383 8810 	msr	PRIMASK, r3
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4948      	ldr	r1, [pc, #288]	; (800382c <UART_RxISR_8BIT+0x1b0>)
 800370a:	400a      	ands	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	f383 8810 	msr	PRIMASK, r3
}
 8003718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371a:	f3ef 8310 	mrs	r3, PRIMASK
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003722:	647b      	str	r3, [r7, #68]	; 0x44
 8003724:	2301      	movs	r3, #1
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003742:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	2120      	movs	r1, #32
 8003752:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	4013      	ands	r3, r2
 800376c:	d018      	beq.n	80037a0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800376e:	f3ef 8310 	mrs	r3, PRIMASK
 8003772:	61bb      	str	r3, [r7, #24]
  return(result);
 8003774:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003776:	643b      	str	r3, [r7, #64]	; 0x40
 8003778:	2301      	movs	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f383 8810 	msr	PRIMASK, r3
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4928      	ldr	r1, [pc, #160]	; (8003830 <UART_RxISR_8BIT+0x1b4>)
 8003790:	400a      	ands	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003796:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d12f      	bne.n	8003808 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ae:	f3ef 8310 	mrs	r3, PRIMASK
 80037b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80037b4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b8:	2301      	movs	r3, #1
 80037ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f383 8810 	msr	PRIMASK, r3
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2110      	movs	r1, #16
 80037d0:	438a      	bics	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f383 8810 	msr	PRIMASK, r3
}
 80037de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2210      	movs	r2, #16
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d103      	bne.n	80037f6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2210      	movs	r2, #16
 80037f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2258      	movs	r2, #88	; 0x58
 80037fa:	5a9a      	ldrh	r2, [r3, r2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f7ff faa1 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003806:	e00c      	b.n	8003822 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	0018      	movs	r0, r3
 800380c:	f7fc ff2e 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8003810:	e007      	b.n	8003822 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2108      	movs	r1, #8
 800381e:	430a      	orrs	r2, r1
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b014      	add	sp, #80	; 0x50
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	fffffedf 	.word	0xfffffedf
 8003830:	fbffffff 	.word	0xfbffffff

08003834 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b094      	sub	sp, #80	; 0x50
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800383c:	204e      	movs	r0, #78	; 0x4e
 800383e:	183b      	adds	r3, r7, r0
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	215c      	movs	r1, #92	; 0x5c
 8003844:	5a52      	ldrh	r2, [r2, r1]
 8003846:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	589b      	ldr	r3, [r3, r2]
 800384e:	2b22      	cmp	r3, #34	; 0x22
 8003850:	d000      	beq.n	8003854 <UART_RxISR_16BIT+0x20>
 8003852:	e0ba      	b.n	80039ca <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	214c      	movs	r1, #76	; 0x4c
 800385a:	187b      	adds	r3, r7, r1
 800385c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800385e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003866:	187b      	adds	r3, r7, r1
 8003868:	183a      	adds	r2, r7, r0
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	8812      	ldrh	r2, [r2, #0]
 800386e:	4013      	ands	r3, r2
 8003870:	b29a      	uxth	r2, r3
 8003872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003874:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	1c9a      	adds	r2, r3, #2
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	225a      	movs	r2, #90	; 0x5a
 8003884:	5a9b      	ldrh	r3, [r3, r2]
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b299      	uxth	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	225a      	movs	r2, #90	; 0x5a
 8003890:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	225a      	movs	r2, #90	; 0x5a
 8003896:	5a9b      	ldrh	r3, [r3, r2]
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d000      	beq.n	80038a0 <UART_RxISR_16BIT+0x6c>
 800389e:	e09c      	b.n	80039da <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	623b      	str	r3, [r7, #32]
  return(result);
 80038a6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
 80038aa:	2301      	movs	r3, #1
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4948      	ldr	r1, [pc, #288]	; (80039e4 <UART_RxISR_16BIT+0x1b0>)
 80038c2:	400a      	ands	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
 80038dc:	2301      	movs	r3, #1
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2101      	movs	r1, #1
 80038f4:	438a      	bics	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	2120      	movs	r1, #32
 800390a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	4013      	ands	r3, r2
 8003924:	d018      	beq.n	8003958 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003926:	f3ef 8310 	mrs	r3, PRIMASK
 800392a:	617b      	str	r3, [r7, #20]
  return(result);
 800392c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800392e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003930:	2301      	movs	r3, #1
 8003932:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4928      	ldr	r1, [pc, #160]	; (80039e8 <UART_RxISR_16BIT+0x1b4>)
 8003948:	400a      	ands	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	2b01      	cmp	r3, #1
 800395e:	d12f      	bne.n	80039c0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	60bb      	str	r3, [r7, #8]
  return(result);
 800396c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003970:	2301      	movs	r3, #1
 8003972:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2110      	movs	r1, #16
 8003988:	438a      	bics	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	2210      	movs	r2, #16
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d103      	bne.n	80039ae <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2210      	movs	r2, #16
 80039ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2258      	movs	r2, #88	; 0x58
 80039b2:	5a9a      	ldrh	r2, [r3, r2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff f9c5 	bl	8002d48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039be:	e00c      	b.n	80039da <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fc fe52 	bl	800066c <HAL_UART_RxCpltCallback>
}
 80039c8:	e007      	b.n	80039da <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2108      	movs	r1, #8
 80039d6:	430a      	orrs	r2, r1
 80039d8:	619a      	str	r2, [r3, #24]
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	b014      	add	sp, #80	; 0x50
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	fffffedf 	.word	0xfffffedf
 80039e8:	fbffffff 	.word	0xfbffffff

080039ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	0002      	movs	r2, r0
 80039f4:	1dbb      	adds	r3, r7, #6
 80039f6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80039fc:	1dbb      	adds	r3, r7, #6
 80039fe:	2200      	movs	r2, #0
 8003a00:	5e9b      	ldrsh	r3, [r3, r2]
 8003a02:	2b84      	cmp	r3, #132	; 0x84
 8003a04:	d006      	beq.n	8003a14 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	5e9a      	ldrsh	r2, [r3, r2]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	18d3      	adds	r3, r2, r3
 8003a10:	3303      	adds	r3, #3
 8003a12:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a14:	68fb      	ldr	r3, [r7, #12]
}
 8003a16:	0018      	movs	r0, r3
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b004      	add	sp, #16
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a22:	f000 ff77 	bl	8004914 <vTaskStartScheduler>
  
  return osOK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a30:	b089      	sub	sp, #36	; 0x24
 8003a32:	af04      	add	r7, sp, #16
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <osThreadCreate+0x54>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01c      	beq.n	8003a82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685c      	ldr	r4, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681d      	ldr	r5, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691e      	ldr	r6, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2208      	movs	r2, #8
 8003a58:	5e9b      	ldrsh	r3, [r3, r2]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff ffc6 	bl	80039ec <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a68:	6839      	ldr	r1, [r7, #0]
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	9201      	str	r2, [sp, #4]
 8003a6e:	9000      	str	r0, [sp, #0]
 8003a70:	000b      	movs	r3, r1
 8003a72:	0032      	movs	r2, r6
 8003a74:	0029      	movs	r1, r5
 8003a76:	0020      	movs	r0, r4
 8003a78:	f000 fdb9 	bl	80045ee <xTaskCreateStatic>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e01d      	b.n	8003abe <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685c      	ldr	r4, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a8e:	b29e      	uxth	r6, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2208      	movs	r2, #8
 8003a94:	5e9b      	ldrsh	r3, [r3, r2]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7ff ffa8 	bl	80039ec <makeFreeRtosPriority>
 8003a9c:	0001      	movs	r1, r0
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	9100      	str	r1, [sp, #0]
 8003aa8:	0013      	movs	r3, r2
 8003aaa:	0032      	movs	r2, r6
 8003aac:	0029      	movs	r1, r5
 8003aae:	0020      	movs	r0, r4
 8003ab0:	f000 fde0 	bl	8004674 <xTaskCreate>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e000      	b.n	8003ac0 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b005      	add	sp, #20
 8003ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4252      	negs	r2, r2
 8003ae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3308      	adds	r3, #8
 8003af0:	001a      	movs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	d103      	bne.n	8003b7c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e00c      	b.n	8003b96 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	e002      	b.n	8003b8a <vListInsert+0x2c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d2f6      	bcs.n	8003b84 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6892      	ldr	r2, [r2, #8]
 8003be0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6852      	ldr	r2, [r2, #4]
 8003bea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d103      	bne.n	8003bfe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1e5a      	subs	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b004      	add	sp, #16
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <xQueueGenericReset+0x18>
 8003c2e:	b672      	cpsid	i
 8003c30:	e7fe      	b.n	8003c30 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003c32:	f001 fff5 	bl	8005c20 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	434b      	muls	r3, r1
 8003c44:	18d2      	adds	r2, r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	1e59      	subs	r1, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	434b      	muls	r3, r1
 8003c68:	18d2      	adds	r2, r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2244      	movs	r2, #68	; 0x44
 8003c72:	21ff      	movs	r1, #255	; 0xff
 8003c74:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2245      	movs	r2, #69	; 0x45
 8003c7a:	21ff      	movs	r1, #255	; 0xff
 8003c7c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10d      	bne.n	8003ca0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3310      	adds	r3, #16
 8003c90:	0018      	movs	r0, r3
 8003c92:	f001 f883 	bl	8004d9c <xTaskRemoveFromEventList>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d00c      	beq.n	8003cb4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c9a:	f001 ffb1 	bl	8005c00 <vPortYield>
 8003c9e:	e009      	b.n	8003cb4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3310      	adds	r3, #16
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7ff ff0f 	bl	8003ac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3324      	adds	r3, #36	; 0x24
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7ff ff0a 	bl	8003ac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cb4:	f001 ffc6 	bl	8005c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cb8:	2301      	movs	r3, #1
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cc2:	b590      	push	{r4, r7, lr}
 8003cc4:	b089      	sub	sp, #36	; 0x24
 8003cc6:	af02      	add	r7, sp, #8
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <xQueueGenericCreateStatic+0x18>
 8003cd6:	b672      	cpsid	i
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <xQueueGenericCreateStatic+0x22>
 8003ce0:	b672      	cpsid	i
 8003ce2:	e7fe      	b.n	8003ce2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <xQueueGenericCreateStatic+0x2e>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <xQueueGenericCreateStatic+0x32>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <xQueueGenericCreateStatic+0x34>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <xQueueGenericCreateStatic+0x3c>
 8003cfa:	b672      	cpsid	i
 8003cfc:	e7fe      	b.n	8003cfc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <xQueueGenericCreateStatic+0x48>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <xQueueGenericCreateStatic+0x4c>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <xQueueGenericCreateStatic+0x4e>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <xQueueGenericCreateStatic+0x56>
 8003d14:	b672      	cpsid	i
 8003d16:	e7fe      	b.n	8003d16 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d18:	2348      	movs	r3, #72	; 0x48
 8003d1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b48      	cmp	r3, #72	; 0x48
 8003d20:	d001      	beq.n	8003d26 <xQueueGenericCreateStatic+0x64>
 8003d22:	b672      	cpsid	i
 8003d24:	e7fe      	b.n	8003d24 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00e      	beq.n	8003d4e <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2246      	movs	r2, #70	; 0x46
 8003d34:	2101      	movs	r1, #1
 8003d36:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d38:	2328      	movs	r3, #40	; 0x28
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	781c      	ldrb	r4, [r3, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	0023      	movs	r3, r4
 8003d4a:	f000 f83b 	bl	8003dc4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d4e:	697b      	ldr	r3, [r7, #20]
	}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b007      	add	sp, #28
 8003d56:	bd90      	pop	{r4, r7, pc}

08003d58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b08b      	sub	sp, #44	; 0x2c
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	1dfb      	adds	r3, r7, #7
 8003d64:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <xQueueGenericCreate+0x18>
 8003d6c:	b672      	cpsid	i
 8003d6e:	e7fe      	b.n	8003d6e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	e003      	b.n	8003d84 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4353      	muls	r3, r2
 8003d82:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	3348      	adds	r3, #72	; 0x48
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f001 ffe1 	bl	8005d50 <pvPortMalloc>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d010      	beq.n	8003dba <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3348      	adds	r3, #72	; 0x48
 8003d9c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2246      	movs	r2, #70	; 0x46
 8003da2:	2100      	movs	r1, #0
 8003da4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	781c      	ldrb	r4, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	0023      	movs	r3, r4
 8003db6:	f000 f805 	bl	8003dc4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003dba:	69bb      	ldr	r3, [r7, #24]
	}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b009      	add	sp, #36	; 0x24
 8003dc2:	bd90      	pop	{r4, r7, pc}

08003dc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	1cfb      	adds	r3, r7, #3
 8003dd4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e002      	b.n	8003dea <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff ff0d 	bl	8003c1a <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e00:	46c0      	nop			; (mov r8, r8)
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b004      	add	sp, #16
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <xQueueGenericSend+0x20>
 8003e24:	b672      	cpsid	i
 8003e26:	e7fe      	b.n	8003e26 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <xQueueGenericSend+0x2e>
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <xQueueGenericSend+0x32>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueGenericSend+0x34>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <xQueueGenericSend+0x3c>
 8003e40:	b672      	cpsid	i
 8003e42:	e7fe      	b.n	8003e42 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d103      	bne.n	8003e52 <xQueueGenericSend+0x4a>
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <xQueueGenericSend+0x4e>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <xQueueGenericSend+0x50>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <xQueueGenericSend+0x58>
 8003e5c:	b672      	cpsid	i
 8003e5e:	e7fe      	b.n	8003e5e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e60:	f001 f934 	bl	80050cc <xTaskGetSchedulerState>
 8003e64:	1e03      	subs	r3, r0, #0
 8003e66:	d102      	bne.n	8003e6e <xQueueGenericSend+0x66>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xQueueGenericSend+0x6a>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <xQueueGenericSend+0x6c>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xQueueGenericSend+0x74>
 8003e78:	b672      	cpsid	i
 8003e7a:	e7fe      	b.n	8003e7a <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e7c:	f001 fed0 	bl	8005c20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d302      	bcc.n	8003e92 <xQueueGenericSend+0x8a>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d11e      	bne.n	8003ed0 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f000 fa17 	bl	80042cc <prvCopyDataToQueue>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	3324      	adds	r3, #36	; 0x24
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 ff74 	bl	8004d9c <xTaskRemoveFromEventList>
 8003eb4:	1e03      	subs	r3, r0, #0
 8003eb6:	d007      	beq.n	8003ec8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003eb8:	f001 fea2 	bl	8005c00 <vPortYield>
 8003ebc:	e004      	b.n	8003ec8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ec4:	f001 fe9c 	bl	8005c00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ec8:	f001 febc 	bl	8005c44 <vPortExitCritical>
				return pdPASS;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e05b      	b.n	8003f88 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ed6:	f001 feb5 	bl	8005c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e054      	b.n	8003f88 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ee4:	2314      	movs	r3, #20
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 ffb3 	bl	8004e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ef2:	f001 fea7 	bl	8005c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ef6:	f000 fd61 	bl	80049bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003efa:	f001 fe91 	bl	8005c20 <vPortEnterCritical>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2244      	movs	r2, #68	; 0x44
 8003f02:	5c9b      	ldrb	r3, [r3, r2]
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	3301      	adds	r3, #1
 8003f08:	d103      	bne.n	8003f12 <xQueueGenericSend+0x10a>
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	2244      	movs	r2, #68	; 0x44
 8003f0e:	2100      	movs	r1, #0
 8003f10:	5499      	strb	r1, [r3, r2]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2245      	movs	r2, #69	; 0x45
 8003f16:	5c9b      	ldrb	r3, [r3, r2]
 8003f18:	b25b      	sxtb	r3, r3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	d103      	bne.n	8003f26 <xQueueGenericSend+0x11e>
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	2245      	movs	r2, #69	; 0x45
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	f001 fe8d 	bl	8005c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f2a:	1d3a      	adds	r2, r7, #4
 8003f2c:	2314      	movs	r3, #20
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f000 ffa2 	bl	8004e7c <xTaskCheckForTimeOut>
 8003f38:	1e03      	subs	r3, r0, #0
 8003f3a:	d11e      	bne.n	8003f7a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fac9 	bl	80044d6 <prvIsQueueFull>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d011      	beq.n	8003f6c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	3310      	adds	r3, #16
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	0011      	movs	r1, r2
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 fedf 	bl	8004d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 fa48 	bl	80043ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f5e:	f000 fd39 	bl	80049d4 <xTaskResumeAll>
 8003f62:	1e03      	subs	r3, r0, #0
 8003f64:	d18a      	bne.n	8003e7c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003f66:	f001 fe4b 	bl	8005c00 <vPortYield>
 8003f6a:	e787      	b.n	8003e7c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 fa3d 	bl	80043ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f74:	f000 fd2e 	bl	80049d4 <xTaskResumeAll>
 8003f78:	e780      	b.n	8003e7c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 fa36 	bl	80043ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f82:	f000 fd27 	bl	80049d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f86:	2300      	movs	r3, #0
		}
	}
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b00a      	add	sp, #40	; 0x28
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <xQueueGenericSendFromISR+0x1c>
 8003fa8:	b672      	cpsid	i
 8003faa:	e7fe      	b.n	8003faa <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <xQueueGenericSendFromISR+0x2a>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <xQueueGenericSendFromISR+0x2e>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueGenericSendFromISR+0x30>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <xQueueGenericSendFromISR+0x38>
 8003fc4:	b672      	cpsid	i
 8003fc6:	e7fe      	b.n	8003fc6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d103      	bne.n	8003fd6 <xQueueGenericSendFromISR+0x46>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <xQueueGenericSendFromISR+0x4a>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <xQueueGenericSendFromISR+0x4c>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <xQueueGenericSendFromISR+0x54>
 8003fe0:	b672      	cpsid	i
 8003fe2:	e7fe      	b.n	8003fe2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe4:	f001 fe46 	bl	8005c74 <ulSetInterruptMaskFromISR>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d302      	bcc.n	8003ffe <xQueueGenericSendFromISR+0x6e>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d12e      	bne.n	800405c <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ffe:	2413      	movs	r4, #19
 8004000:	193b      	adds	r3, r7, r4
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	2145      	movs	r1, #69	; 0x45
 8004006:	5c52      	ldrb	r2, [r2, r1]
 8004008:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	0018      	movs	r0, r3
 8004012:	f000 f95b 	bl	80042cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004016:	193b      	adds	r3, r7, r4
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	b25b      	sxtb	r3, r3
 800401c:	3301      	adds	r3, #1
 800401e:	d111      	bne.n	8004044 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	0018      	movs	r0, r3
 800402e:	f000 feb5 	bl	8004d9c <xTaskRemoveFromEventList>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d00f      	beq.n	8004056 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e008      	b.n	8004056 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004044:	2313      	movs	r3, #19
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	b259      	sxtb	r1, r3
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2245      	movs	r2, #69	; 0x45
 8004054:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004056:	2301      	movs	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
		{
 800405a:	e001      	b.n	8004060 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	0018      	movs	r0, r3
 8004064:	f001 fe0c 	bl	8005c80 <vClearInterruptMaskFromISR>

	return xReturn;
 8004068:	69fb      	ldr	r3, [r7, #28]
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b009      	add	sp, #36	; 0x24
 8004070:	bd90      	pop	{r4, r7, pc}

08004072 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08a      	sub	sp, #40	; 0x28
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <xQueueReceive+0x1e>
 800408c:	b672      	cpsid	i
 800408e:	e7fe      	b.n	800408e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <xQueueReceive+0x2c>
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <xQueueReceive+0x30>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <xQueueReceive+0x32>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <xQueueReceive+0x3a>
 80040a8:	b672      	cpsid	i
 80040aa:	e7fe      	b.n	80040aa <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ac:	f001 f80e 	bl	80050cc <xTaskGetSchedulerState>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d102      	bne.n	80040ba <xQueueReceive+0x48>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <xQueueReceive+0x4c>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <xQueueReceive+0x4e>
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueReceive+0x56>
 80040c4:	b672      	cpsid	i
 80040c6:	e7fe      	b.n	80040c6 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80040c8:	f001 fdaa 	bl	8005c20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01a      	beq.n	800410e <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	0011      	movs	r1, r2
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 f95f 	bl	80043a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1e5a      	subs	r2, r3, #1
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	3310      	adds	r3, #16
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 fe4f 	bl	8004d9c <xTaskRemoveFromEventList>
 80040fe:	1e03      	subs	r3, r0, #0
 8004100:	d001      	beq.n	8004106 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004102:	f001 fd7d 	bl	8005c00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004106:	f001 fd9d 	bl	8005c44 <vPortExitCritical>
				return pdPASS;
 800410a:	2301      	movs	r3, #1
 800410c:	e062      	b.n	80041d4 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004114:	f001 fd96 	bl	8005c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004118:	2300      	movs	r3, #0
 800411a:	e05b      	b.n	80041d4 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004122:	2314      	movs	r3, #20
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fe94 	bl	8004e54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800412c:	2301      	movs	r3, #1
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004130:	f001 fd88 	bl	8005c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004134:	f000 fc42 	bl	80049bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004138:	f001 fd72 	bl	8005c20 <vPortEnterCritical>
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	2244      	movs	r2, #68	; 0x44
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	b25b      	sxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	d103      	bne.n	8004150 <xQueueReceive+0xde>
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	2244      	movs	r2, #68	; 0x44
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	2245      	movs	r2, #69	; 0x45
 8004154:	5c9b      	ldrb	r3, [r3, r2]
 8004156:	b25b      	sxtb	r3, r3
 8004158:	3301      	adds	r3, #1
 800415a:	d103      	bne.n	8004164 <xQueueReceive+0xf2>
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	2245      	movs	r2, #69	; 0x45
 8004160:	2100      	movs	r1, #0
 8004162:	5499      	strb	r1, [r3, r2]
 8004164:	f001 fd6e 	bl	8005c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004168:	1d3a      	adds	r2, r7, #4
 800416a:	2314      	movs	r3, #20
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f000 fe83 	bl	8004e7c <xTaskCheckForTimeOut>
 8004176:	1e03      	subs	r3, r0, #0
 8004178:	d11e      	bne.n	80041b8 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 f994 	bl	80044aa <prvIsQueueEmpty>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d011      	beq.n	80041aa <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	3324      	adds	r3, #36	; 0x24
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	0011      	movs	r1, r2
 800418e:	0018      	movs	r0, r3
 8004190:	f000 fdc0 	bl	8004d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 f929 	bl	80043ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800419c:	f000 fc1a 	bl	80049d4 <xTaskResumeAll>
 80041a0:	1e03      	subs	r3, r0, #0
 80041a2:	d191      	bne.n	80040c8 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80041a4:	f001 fd2c 	bl	8005c00 <vPortYield>
 80041a8:	e78e      	b.n	80040c8 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 f91e 	bl	80043ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041b2:	f000 fc0f 	bl	80049d4 <xTaskResumeAll>
 80041b6:	e787      	b.n	80040c8 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 f917 	bl	80043ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041c0:	f000 fc08 	bl	80049d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f96f 	bl	80044aa <prvIsQueueEmpty>
 80041cc:	1e03      	subs	r3, r0, #0
 80041ce:	d100      	bne.n	80041d2 <xQueueReceive+0x160>
 80041d0:	e77a      	b.n	80040c8 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b00a      	add	sp, #40	; 0x28
 80041da:	bd80      	pop	{r7, pc}

080041dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b08b      	sub	sp, #44	; 0x2c
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <xQueueReceiveFromISR+0x1a>
 80041f2:	b672      	cpsid	i
 80041f4:	e7fe      	b.n	80041f4 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <xQueueReceiveFromISR+0x28>
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <xQueueReceiveFromISR+0x2c>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <xQueueReceiveFromISR+0x2e>
 8004208:	2300      	movs	r3, #0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <xQueueReceiveFromISR+0x36>
 800420e:	b672      	cpsid	i
 8004210:	e7fe      	b.n	8004210 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004212:	f001 fd2f 	bl	8005c74 <ulSetInterruptMaskFromISR>
 8004216:	0003      	movs	r3, r0
 8004218:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d032      	beq.n	800428c <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004226:	2417      	movs	r4, #23
 8004228:	193b      	adds	r3, r7, r4
 800422a:	6a3a      	ldr	r2, [r7, #32]
 800422c:	2144      	movs	r1, #68	; 0x44
 800422e:	5c52      	ldrb	r2, [r2, r1]
 8004230:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f000 f8b2 	bl	80043a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	1e5a      	subs	r2, r3, #1
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004246:	193b      	adds	r3, r7, r4
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b25b      	sxtb	r3, r3
 800424c:	3301      	adds	r3, #1
 800424e:	d111      	bne.n	8004274 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d016      	beq.n	8004286 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	3310      	adds	r3, #16
 800425c:	0018      	movs	r0, r3
 800425e:	f000 fd9d 	bl	8004d9c <xTaskRemoveFromEventList>
 8004262:	1e03      	subs	r3, r0, #0
 8004264:	d00f      	beq.n	8004286 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e008      	b.n	8004286 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004274:	2317      	movs	r3, #23
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	b259      	sxtb	r1, r3
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2244      	movs	r2, #68	; 0x44
 8004284:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004286:	2301      	movs	r3, #1
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	e001      	b.n	8004290 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	0018      	movs	r0, r3
 8004294:	f001 fcf4 	bl	8005c80 <vClearInterruptMaskFromISR>

	return xReturn;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b00b      	add	sp, #44	; 0x2c
 80042a0:	bd90      	pop	{r4, r7, pc}

080042a2 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <uxQueueMessagesWaiting+0x12>
 80042b0:	b672      	cpsid	i
 80042b2:	e7fe      	b.n	80042b2 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 80042b4:	f001 fcb4 	bl	8005c20 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80042be:	f001 fcc1 	bl	8005c44 <vPortExitCritical>

	return uxReturn;
 80042c2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80042c4:	0018      	movs	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b004      	add	sp, #16
 80042ca:	bd80      	pop	{r7, pc}

080042cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10e      	bne.n	8004308 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d14e      	bne.n	8004390 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 ff04 	bl	8005104 <xTaskPriorityDisinherit>
 80042fc:	0003      	movs	r3, r0
 80042fe:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e043      	b.n	8004390 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d119      	bne.n	8004342 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6898      	ldr	r0, [r3, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	0019      	movs	r1, r3
 800431a:	f001 fee3 	bl	80060e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	18d2      	adds	r2, r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d32b      	bcc.n	8004390 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e026      	b.n	8004390 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	68d8      	ldr	r0, [r3, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	0019      	movs	r1, r3
 800434e:	f001 fec9 	bl	80060e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	425b      	negs	r3, r3
 800435c:	18d2      	adds	r2, r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d207      	bcs.n	800437e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	425b      	negs	r3, r3
 8004378:	18d2      	adds	r2, r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d105      	bne.n	8004390 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3b01      	subs	r3, #1
 800438e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004398:	697b      	ldr	r3, [r7, #20]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b006      	add	sp, #24
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d018      	beq.n	80043e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	18d2      	adds	r2, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d303      	bcc.n	80043d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68d9      	ldr	r1, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f001 fe7f 	bl	80060e4 <memcpy>
	}
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}

080043ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043f6:	f001 fc13 	bl	8005c20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043fa:	230f      	movs	r3, #15
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	2145      	movs	r1, #69	; 0x45
 8004402:	5c52      	ldrb	r2, [r2, r1]
 8004404:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004406:	e013      	b.n	8004430 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d016      	beq.n	800443e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	0018      	movs	r0, r3
 8004416:	f000 fcc1 	bl	8004d9c <xTaskRemoveFromEventList>
 800441a:	1e03      	subs	r3, r0, #0
 800441c:	d001      	beq.n	8004422 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800441e:	f000 fd7d 	bl	8004f1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004422:	210f      	movs	r1, #15
 8004424:	187b      	adds	r3, r7, r1
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	3b01      	subs	r3, #1
 800442a:	b2da      	uxtb	r2, r3
 800442c:	187b      	adds	r3, r7, r1
 800442e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004430:	230f      	movs	r3, #15
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b25b      	sxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	dce5      	bgt.n	8004408 <prvUnlockQueue+0x1a>
 800443c:	e000      	b.n	8004440 <prvUnlockQueue+0x52>
					break;
 800443e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2245      	movs	r2, #69	; 0x45
 8004444:	21ff      	movs	r1, #255	; 0xff
 8004446:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004448:	f001 fbfc 	bl	8005c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800444c:	f001 fbe8 	bl	8005c20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004450:	230e      	movs	r3, #14
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	2144      	movs	r1, #68	; 0x44
 8004458:	5c52      	ldrb	r2, [r2, r1]
 800445a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800445c:	e013      	b.n	8004486 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3310      	adds	r3, #16
 800446a:	0018      	movs	r0, r3
 800446c:	f000 fc96 	bl	8004d9c <xTaskRemoveFromEventList>
 8004470:	1e03      	subs	r3, r0, #0
 8004472:	d001      	beq.n	8004478 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004474:	f000 fd52 	bl	8004f1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004478:	210e      	movs	r1, #14
 800447a:	187b      	adds	r3, r7, r1
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	187b      	adds	r3, r7, r1
 8004484:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004486:	230e      	movs	r3, #14
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	b25b      	sxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	dce5      	bgt.n	800445e <prvUnlockQueue+0x70>
 8004492:	e000      	b.n	8004496 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004494:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2244      	movs	r2, #68	; 0x44
 800449a:	21ff      	movs	r1, #255	; 0xff
 800449c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800449e:	f001 fbd1 	bl	8005c44 <vPortExitCritical>
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b004      	add	sp, #16
 80044a8:	bd80      	pop	{r7, pc}

080044aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044b2:	f001 fbb5 	bl	8005c20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044be:	2301      	movs	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e001      	b.n	80044c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044c8:	f001 fbbc 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b004      	add	sp, #16
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044de:	f001 fb9f 	bl	8005c20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d102      	bne.n	80044f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e001      	b.n	80044f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044f8:	f001 fba4 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 80044fc:	68fb      	ldr	r3, [r7, #12]
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bd80      	pop	{r7, pc}

08004506 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <xQueueIsQueueFullFromISR+0x12>
 8004514:	b672      	cpsid	i
 8004516:	e7fe      	b.n	8004516 <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004520:	429a      	cmp	r2, r3
 8004522:	d102      	bne.n	800452a <xQueueIsQueueFullFromISR+0x24>
	{
		xReturn = pdTRUE;
 8004524:	2301      	movs	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	e001      	b.n	800452e <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800452e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b004      	add	sp, #16
 8004536:	bd80      	pop	{r7, pc}

08004538 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e015      	b.n	8004574 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <vQueueAddToRegistry+0x4c>)
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	00d2      	lsls	r2, r2, #3
 800454e:	58d3      	ldr	r3, [r2, r3]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10c      	bne.n	800456e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <vQueueAddToRegistry+0x4c>)
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	00d2      	lsls	r2, r2, #3
 800455a:	6839      	ldr	r1, [r7, #0]
 800455c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800455e:	4a09      	ldr	r2, [pc, #36]	; (8004584 <vQueueAddToRegistry+0x4c>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	3304      	adds	r3, #4
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800456c:	e006      	b.n	800457c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b07      	cmp	r3, #7
 8004578:	d9e6      	bls.n	8004548 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200007ec 	.word	0x200007ec

08004588 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004598:	f001 fb42 	bl	8005c20 <vPortEnterCritical>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2244      	movs	r2, #68	; 0x44
 80045a0:	5c9b      	ldrb	r3, [r3, r2]
 80045a2:	b25b      	sxtb	r3, r3
 80045a4:	3301      	adds	r3, #1
 80045a6:	d103      	bne.n	80045b0 <vQueueWaitForMessageRestricted+0x28>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2244      	movs	r2, #68	; 0x44
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2245      	movs	r2, #69	; 0x45
 80045b4:	5c9b      	ldrb	r3, [r3, r2]
 80045b6:	b25b      	sxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	d103      	bne.n	80045c4 <vQueueWaitForMessageRestricted+0x3c>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2245      	movs	r2, #69	; 0x45
 80045c0:	2100      	movs	r1, #0
 80045c2:	5499      	strb	r1, [r3, r2]
 80045c4:	f001 fb3e 	bl	8005c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 fbb9 	bl	8004d50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff ff04 	bl	80043ee <prvUnlockQueue>
	}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b006      	add	sp, #24
 80045ec:	bd80      	pop	{r7, pc}

080045ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045ee:	b590      	push	{r4, r7, lr}
 80045f0:	b08d      	sub	sp, #52	; 0x34
 80045f2:	af04      	add	r7, sp, #16
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <xTaskCreateStatic+0x18>
 8004602:	b672      	cpsid	i
 8004604:	e7fe      	b.n	8004604 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <xTaskCreateStatic+0x22>
 800460c:	b672      	cpsid	i
 800460e:	e7fe      	b.n	800460e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004610:	2354      	movs	r3, #84	; 0x54
 8004612:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b54      	cmp	r3, #84	; 0x54
 8004618:	d001      	beq.n	800461e <xTaskCreateStatic+0x30>
 800461a:	b672      	cpsid	i
 800461c:	e7fe      	b.n	800461c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <xTaskCreateStatic+0x78>
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01d      	beq.n	8004666 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004632:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2251      	movs	r2, #81	; 0x51
 8004638:	2102      	movs	r1, #2
 800463a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800463c:	683c      	ldr	r4, [r7, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	2300      	movs	r3, #0
 8004646:	9303      	str	r3, [sp, #12]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	9302      	str	r3, [sp, #8]
 800464c:	2318      	movs	r3, #24
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	0023      	movs	r3, r4
 8004658:	f000 f858 	bl	800470c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	0018      	movs	r0, r3
 8004660:	f000 f8ce 	bl	8004800 <prvAddNewTaskToReadyList>
 8004664:	e001      	b.n	800466a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800466a:	69bb      	ldr	r3, [r7, #24]
	}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	b009      	add	sp, #36	; 0x24
 8004672:	bd90      	pop	{r4, r7, pc}

08004674 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b08d      	sub	sp, #52	; 0x34
 8004678:	af04      	add	r7, sp, #16
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	1dbb      	adds	r3, r7, #6
 8004682:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004684:	1dbb      	adds	r3, r7, #6
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	0018      	movs	r0, r3
 800468c:	f001 fb60 	bl	8005d50 <pvPortMalloc>
 8004690:	0003      	movs	r3, r0
 8004692:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d010      	beq.n	80046bc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800469a:	2054      	movs	r0, #84	; 0x54
 800469c:	f001 fb58 	bl	8005d50 <pvPortMalloc>
 80046a0:	0003      	movs	r3, r0
 80046a2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
 80046b0:	e006      	b.n	80046c0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f001 fbf1 	bl	8005e9c <vPortFree>
 80046ba:	e001      	b.n	80046c0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01a      	beq.n	80046fc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2251      	movs	r2, #81	; 0x51
 80046ca:	2100      	movs	r1, #0
 80046cc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046ce:	1dbb      	adds	r3, r7, #6
 80046d0:	881a      	ldrh	r2, [r3, #0]
 80046d2:	683c      	ldr	r4, [r7, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	2300      	movs	r3, #0
 80046da:	9303      	str	r3, [sp, #12]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	9302      	str	r3, [sp, #8]
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	9301      	str	r3, [sp, #4]
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	0023      	movs	r3, r4
 80046ea:	f000 f80f 	bl	800470c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 f885 	bl	8004800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	e002      	b.n	8004702 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046fc:	2301      	movs	r3, #1
 80046fe:	425b      	negs	r3, r3
 8004700:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004702:	69bb      	ldr	r3, [r7, #24]
	}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	b009      	add	sp, #36	; 0x24
 800470a:	bd90      	pop	{r4, r7, pc}

0800470c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4936      	ldr	r1, [pc, #216]	; (80047fc <prvInitialiseNewTask+0xf0>)
 8004722:	468c      	mov	ip, r1
 8004724:	4463      	add	r3, ip
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2207      	movs	r2, #7
 8004730:	4393      	bics	r3, r2
 8004732:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2207      	movs	r2, #7
 8004738:	4013      	ands	r3, r2
 800473a:	d001      	beq.n	8004740 <prvInitialiseNewTask+0x34>
 800473c:	b672      	cpsid	i
 800473e:	e7fe      	b.n	800473e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	e013      	b.n	800476e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	18d3      	adds	r3, r2, r3
 800474c:	7818      	ldrb	r0, [r3, #0]
 800474e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004750:	2134      	movs	r1, #52	; 0x34
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	18d3      	adds	r3, r2, r3
 8004756:	185b      	adds	r3, r3, r1
 8004758:	1c02      	adds	r2, r0, #0
 800475a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	18d3      	adds	r3, r2, r3
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b0f      	cmp	r3, #15
 8004772:	d9e8      	bls.n	8004746 <prvInitialiseNewTask+0x3a>
 8004774:	e000      	b.n	8004778 <prvInitialiseNewTask+0x6c>
		{
			break;
 8004776:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2243      	movs	r2, #67	; 0x43
 800477c:	2100      	movs	r1, #0
 800477e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b06      	cmp	r3, #6
 8004784:	d901      	bls.n	800478a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004786:	2306      	movs	r3, #6
 8004788:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	6a3a      	ldr	r2, [r7, #32]
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	6a3a      	ldr	r2, [r7, #32]
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	2200      	movs	r2, #0
 800479a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	3304      	adds	r3, #4
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7ff f9af 	bl	8003b04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	3318      	adds	r3, #24
 80047aa:	0018      	movs	r0, r3
 80047ac:	f7ff f9aa 	bl	8003b04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	2207      	movs	r2, #7
 80047ba:	1ad2      	subs	r2, r2, r3
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	2200      	movs	r2, #0
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	2250      	movs	r2, #80	; 0x50
 80047d0:	2100      	movs	r1, #0
 80047d2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	0018      	movs	r0, r3
 80047dc:	f001 f986 	bl	8005aec <pxPortInitialiseStack>
 80047e0:	0002      	movs	r2, r0
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b006      	add	sp, #24
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	3fffffff 	.word	0x3fffffff

08004800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004808:	f001 fa0a 	bl	8005c20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <prvAddNewTaskToReadyList+0xb0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <prvAddNewTaskToReadyList+0xb0>)
 8004814:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004816:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <prvAddNewTaskToReadyList+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800481e:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <prvAddNewTaskToReadyList+0xb4>)
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004824:	4b22      	ldr	r3, [pc, #136]	; (80048b0 <prvAddNewTaskToReadyList+0xb0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d110      	bne.n	800484e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800482c:	f000 fb90 	bl	8004f50 <prvInitialiseTaskLists>
 8004830:	e00d      	b.n	800484e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004832:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <prvAddNewTaskToReadyList+0xb8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800483a:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <prvAddNewTaskToReadyList+0xb4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d802      	bhi.n	800484e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <prvAddNewTaskToReadyList+0xb4>)
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <prvAddNewTaskToReadyList+0xbc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <prvAddNewTaskToReadyList+0xbc>)
 8004856:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485c:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <prvAddNewTaskToReadyList+0xc0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d903      	bls.n	800486c <prvAddNewTaskToReadyList+0x6c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <prvAddNewTaskToReadyList+0xc0>)
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	0013      	movs	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	189b      	adds	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <prvAddNewTaskToReadyList+0xc4>)
 800487a:	189a      	adds	r2, r3, r2
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	0019      	movs	r1, r3
 8004882:	0010      	movs	r0, r2
 8004884:	f7ff f949 	bl	8003b1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004888:	f001 f9dc 	bl	8005c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <prvAddNewTaskToReadyList+0xb8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <prvAddNewTaskToReadyList+0xb4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	429a      	cmp	r2, r3
 80048a0:	d201      	bcs.n	80048a6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048a2:	f001 f9ad 	bl	8005c00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b002      	add	sp, #8
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	2000092c 	.word	0x2000092c
 80048b4:	2000082c 	.word	0x2000082c
 80048b8:	20000938 	.word	0x20000938
 80048bc:	20000948 	.word	0x20000948
 80048c0:	20000934 	.word	0x20000934
 80048c4:	20000830 	.word	0x20000830

080048c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d010      	beq.n	80048fc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048da:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <vTaskDelay+0x48>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <vTaskDelay+0x1e>
 80048e2:	b672      	cpsid	i
 80048e4:	e7fe      	b.n	80048e4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80048e6:	f000 f869 	bl	80049bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2100      	movs	r1, #0
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 fdee 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048f4:	f000 f86e 	bl	80049d4 <xTaskResumeAll>
 80048f8:	0003      	movs	r3, r0
 80048fa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004902:	f001 f97d 	bl	8005c00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	b004      	add	sp, #16
 800490c:	bd80      	pop	{r7, pc}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	20000954 	.word	0x20000954

08004914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004922:	003a      	movs	r2, r7
 8004924:	1d39      	adds	r1, r7, #4
 8004926:	2308      	movs	r3, #8
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	0018      	movs	r0, r3
 800492c:	f7fb fc8a 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004930:	683c      	ldr	r4, [r7, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	491b      	ldr	r1, [pc, #108]	; (80049a4 <vTaskStartScheduler+0x90>)
 8004938:	481b      	ldr	r0, [pc, #108]	; (80049a8 <vTaskStartScheduler+0x94>)
 800493a:	9202      	str	r2, [sp, #8]
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	0022      	movs	r2, r4
 8004946:	f7ff fe52 	bl	80045ee <xTaskCreateStatic>
 800494a:	0002      	movs	r2, r0
 800494c:	4b17      	ldr	r3, [pc, #92]	; (80049ac <vTaskStartScheduler+0x98>)
 800494e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004950:	4b16      	ldr	r3, [pc, #88]	; (80049ac <vTaskStartScheduler+0x98>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e001      	b.n	8004962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d103      	bne.n	8004970 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004968:	f000 fe06 	bl	8005578 <xTimerCreateTimerTask>
 800496c:	0003      	movs	r3, r0
 800496e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d10d      	bne.n	8004992 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004976:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <vTaskStartScheduler+0x9c>)
 800497a:	2201      	movs	r2, #1
 800497c:	4252      	negs	r2, r2
 800497e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <vTaskStartScheduler+0xa0>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <vTaskStartScheduler+0xa4>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800498c:	f001 f914 	bl	8005bb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004990:	e004      	b.n	800499c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3301      	adds	r3, #1
 8004996:	d101      	bne.n	800499c <vTaskStartScheduler+0x88>
 8004998:	b672      	cpsid	i
 800499a:	e7fe      	b.n	800499a <vTaskStartScheduler+0x86>
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b005      	add	sp, #20
 80049a2:	bd90      	pop	{r4, r7, pc}
 80049a4:	080062d4 	.word	0x080062d4
 80049a8:	08004f31 	.word	0x08004f31
 80049ac:	20000950 	.word	0x20000950
 80049b0:	2000094c 	.word	0x2000094c
 80049b4:	20000938 	.word	0x20000938
 80049b8:	20000930 	.word	0x20000930

080049bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <vTaskSuspendAll+0x14>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	4b02      	ldr	r3, [pc, #8]	; (80049d0 <vTaskSuspendAll+0x14>)
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000954 	.word	0x20000954

080049d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80049e2:	4b3a      	ldr	r3, [pc, #232]	; (8004acc <xTaskResumeAll+0xf8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <xTaskResumeAll+0x1a>
 80049ea:	b672      	cpsid	i
 80049ec:	e7fe      	b.n	80049ec <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049ee:	f001 f917 	bl	8005c20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049f2:	4b36      	ldr	r3, [pc, #216]	; (8004acc <xTaskResumeAll+0xf8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	4b34      	ldr	r3, [pc, #208]	; (8004acc <xTaskResumeAll+0xf8>)
 80049fa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049fc:	4b33      	ldr	r3, [pc, #204]	; (8004acc <xTaskResumeAll+0xf8>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d15b      	bne.n	8004abc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a04:	4b32      	ldr	r3, [pc, #200]	; (8004ad0 <xTaskResumeAll+0xfc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d057      	beq.n	8004abc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a0c:	e02f      	b.n	8004a6e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004a0e:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <xTaskResumeAll+0x100>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3318      	adds	r3, #24
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7ff f8d5 	bl	8003bca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3304      	adds	r3, #4
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff f8d0 	bl	8003bca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	4b2a      	ldr	r3, [pc, #168]	; (8004ad8 <xTaskResumeAll+0x104>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d903      	bls.n	8004a3e <xTaskResumeAll+0x6a>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3a:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <xTaskResumeAll+0x104>)
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	0013      	movs	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a24      	ldr	r2, [pc, #144]	; (8004adc <xTaskResumeAll+0x108>)
 8004a4c:	189a      	adds	r2, r3, r2
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3304      	adds	r3, #4
 8004a52:	0019      	movs	r1, r3
 8004a54:	0010      	movs	r0, r2
 8004a56:	f7ff f860 	bl	8003b1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <xTaskResumeAll+0x10c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <xTaskResumeAll+0x110>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a6e:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <xTaskResumeAll+0x100>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1cb      	bne.n	8004a0e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a7c:	f000 fb02 	bl	8005084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a80:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <xTaskResumeAll+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00f      	beq.n	8004aac <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a8c:	f000 f83c 	bl	8004b08 <xTaskIncrementTick>
 8004a90:	1e03      	subs	r3, r0, #0
 8004a92:	d002      	beq.n	8004a9a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <xTaskResumeAll+0x110>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f2      	bne.n	8004a8c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <xTaskResumeAll+0x114>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <xTaskResumeAll+0x110>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ab8:	f001 f8a2 	bl	8005c00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004abc:	f001 f8c2 	bl	8005c44 <vPortExitCritical>

	return xAlreadyYielded;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b004      	add	sp, #16
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	20000954 	.word	0x20000954
 8004ad0:	2000092c 	.word	0x2000092c
 8004ad4:	200008ec 	.word	0x200008ec
 8004ad8:	20000934 	.word	0x20000934
 8004adc:	20000830 	.word	0x20000830
 8004ae0:	2000082c 	.word	0x2000082c
 8004ae4:	20000940 	.word	0x20000940
 8004ae8:	2000093c 	.word	0x2000093c

08004aec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <xTaskGetTickCount+0x18>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004af8:	687b      	ldr	r3, [r7, #4]
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b002      	add	sp, #8
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	20000930 	.word	0x20000930

08004b08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b12:	4b4c      	ldr	r3, [pc, #304]	; (8004c44 <xTaskIncrementTick+0x13c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d000      	beq.n	8004b1c <xTaskIncrementTick+0x14>
 8004b1a:	e083      	b.n	8004c24 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b1c:	4b4a      	ldr	r3, [pc, #296]	; (8004c48 <xTaskIncrementTick+0x140>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b24:	4b48      	ldr	r3, [pc, #288]	; (8004c48 <xTaskIncrementTick+0x140>)
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d117      	bne.n	8004b60 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b30:	4b46      	ldr	r3, [pc, #280]	; (8004c4c <xTaskIncrementTick+0x144>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <xTaskIncrementTick+0x36>
 8004b3a:	b672      	cpsid	i
 8004b3c:	e7fe      	b.n	8004b3c <xTaskIncrementTick+0x34>
 8004b3e:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <xTaskIncrementTick+0x144>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <xTaskIncrementTick+0x148>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <xTaskIncrementTick+0x144>)
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <xTaskIncrementTick+0x148>)
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	4b40      	ldr	r3, [pc, #256]	; (8004c54 <xTaskIncrementTick+0x14c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <xTaskIncrementTick+0x14c>)
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	f000 fa92 	bl	8005084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b60:	4b3d      	ldr	r3, [pc, #244]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d34e      	bcc.n	8004c08 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <xTaskIncrementTick+0x144>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <xTaskIncrementTick+0x70>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <xTaskIncrementTick+0x72>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b7e:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	4252      	negs	r2, r2
 8004b84:	601a      	str	r2, [r3, #0]
					break;
 8004b86:	e03f      	b.n	8004c08 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b88:	4b30      	ldr	r3, [pc, #192]	; (8004c4c <xTaskIncrementTick+0x144>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d203      	bcs.n	8004ba8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <xTaskIncrementTick+0x150>)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
						break;
 8004ba6:	e02f      	b.n	8004c08 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3304      	adds	r3, #4
 8004bac:	0018      	movs	r0, r3
 8004bae:	f7ff f80c 	bl	8003bca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7ff f803 	bl	8003bca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc8:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <xTaskIncrementTick+0x154>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d903      	bls.n	8004bd8 <xTaskIncrementTick+0xd0>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <xTaskIncrementTick+0x154>)
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	0013      	movs	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	189b      	adds	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <xTaskIncrementTick+0x158>)
 8004be6:	189a      	adds	r2, r3, r2
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	3304      	adds	r3, #4
 8004bec:	0019      	movs	r1, r3
 8004bee:	0010      	movs	r0, r2
 8004bf0:	f7fe ff93 	bl	8003b1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <xTaskIncrementTick+0x15c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d3b3      	bcc.n	8004b6a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004c02:	2301      	movs	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c06:	e7b0      	b.n	8004b6a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c08:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <xTaskIncrementTick+0x15c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	4914      	ldr	r1, [pc, #80]	; (8004c60 <xTaskIncrementTick+0x158>)
 8004c10:	0013      	movs	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	585b      	ldr	r3, [r3, r1]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d907      	bls.n	8004c2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e004      	b.n	8004c2e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c24:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <xTaskIncrementTick+0x160>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <xTaskIncrementTick+0x160>)
 8004c2c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <xTaskIncrementTick+0x164>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004c36:	2301      	movs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c3a:	697b      	ldr	r3, [r7, #20]
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b006      	add	sp, #24
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000954 	.word	0x20000954
 8004c48:	20000930 	.word	0x20000930
 8004c4c:	200008e4 	.word	0x200008e4
 8004c50:	200008e8 	.word	0x200008e8
 8004c54:	20000944 	.word	0x20000944
 8004c58:	2000094c 	.word	0x2000094c
 8004c5c:	20000934 	.word	0x20000934
 8004c60:	20000830 	.word	0x20000830
 8004c64:	2000082c 	.word	0x2000082c
 8004c68:	2000093c 	.word	0x2000093c
 8004c6c:	20000940 	.word	0x20000940

08004c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c76:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <vTaskSwitchContext+0x90>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <vTaskSwitchContext+0x94>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c84:	e037      	b.n	8004cf6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004c86:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <vTaskSwitchContext+0x94>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c8c:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <vTaskSwitchContext+0x98>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	607b      	str	r3, [r7, #4]
 8004c92:	e007      	b.n	8004ca4 <vTaskSwitchContext+0x34>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <vTaskSwitchContext+0x2e>
 8004c9a:	b672      	cpsid	i
 8004c9c:	e7fe      	b.n	8004c9c <vTaskSwitchContext+0x2c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	4919      	ldr	r1, [pc, #100]	; (8004d0c <vTaskSwitchContext+0x9c>)
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	0013      	movs	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	189b      	adds	r3, r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	585b      	ldr	r3, [r3, r1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0ee      	beq.n	8004c94 <vTaskSwitchContext+0x24>
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	0013      	movs	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	189b      	adds	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <vTaskSwitchContext+0x9c>)
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d104      	bne.n	8004ce6 <vTaskSwitchContext+0x76>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <vTaskSwitchContext+0xa0>)
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <vTaskSwitchContext+0x98>)
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b002      	add	sp, #8
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	20000954 	.word	0x20000954
 8004d04:	20000940 	.word	0x20000940
 8004d08:	20000934 	.word	0x20000934
 8004d0c:	20000830 	.word	0x20000830
 8004d10:	2000082c 	.word	0x2000082c

08004d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <vTaskPlaceOnEventList+0x14>
 8004d24:	b672      	cpsid	i
 8004d26:	e7fe      	b.n	8004d26 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <vTaskPlaceOnEventList+0x38>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3318      	adds	r3, #24
 8004d2e:	001a      	movs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0011      	movs	r1, r2
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fe ff12 	bl	8003b5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 fbc6 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	2000082c 	.word	0x2000082c

08004d50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <vTaskPlaceOnEventListRestricted+0x16>
 8004d62:	b672      	cpsid	i
 8004d64:	e7fe      	b.n	8004d64 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <vTaskPlaceOnEventListRestricted+0x48>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3318      	adds	r3, #24
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	0011      	movs	r1, r2
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7fe fed1 	bl	8003b1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	425b      	negs	r3, r3
 8004d82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0011      	movs	r1, r2
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 fba0 	bl	80054d0 <prvAddCurrentTaskToDelayedList>
	}
 8004d90:	46c0      	nop			; (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b004      	add	sp, #16
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	2000082c 	.word	0x2000082c

08004d9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <xTaskRemoveFromEventList+0x1a>
 8004db2:	b672      	cpsid	i
 8004db4:	e7fe      	b.n	8004db4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3318      	adds	r3, #24
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7fe ff05 	bl	8003bca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <xTaskRemoveFromEventList+0xa0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11d      	bne.n	8004e04 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7fe fefc 	bl	8003bca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <xTaskRemoveFromEventList+0xa4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d903      	bls.n	8004de6 <xTaskRemoveFromEventList+0x4a>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <xTaskRemoveFromEventList+0xa4>)
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	0013      	movs	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <xTaskRemoveFromEventList+0xa8>)
 8004df4:	189a      	adds	r2, r3, r2
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	0010      	movs	r0, r2
 8004dfe:	f7fe fe8c 	bl	8003b1a <vListInsertEnd>
 8004e02:	e007      	b.n	8004e14 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3318      	adds	r3, #24
 8004e08:	001a      	movs	r2, r3
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <xTaskRemoveFromEventList+0xac>)
 8004e0c:	0011      	movs	r1, r2
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f7fe fe83 	bl	8003b1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <xTaskRemoveFromEventList+0xb0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d905      	bls.n	8004e2e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <xTaskRemoveFromEventList+0xb4>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e001      	b.n	8004e32 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000954 	.word	0x20000954
 8004e40:	20000934 	.word	0x20000934
 8004e44:	20000830 	.word	0x20000830
 8004e48:	200008ec 	.word	0x200008ec
 8004e4c:	2000082c 	.word	0x2000082c
 8004e50:	20000940 	.word	0x20000940

08004e54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <vTaskInternalSetTimeOutState+0x20>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <vTaskInternalSetTimeOutState+0x24>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	605a      	str	r2, [r3, #4]
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20000944 	.word	0x20000944
 8004e78:	20000930 	.word	0x20000930

08004e7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <xTaskCheckForTimeOut+0x14>
 8004e8c:	b672      	cpsid	i
 8004e8e:	e7fe      	b.n	8004e8e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <xTaskCheckForTimeOut+0x1e>
 8004e96:	b672      	cpsid	i
 8004e98:	e7fe      	b.n	8004e98 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004e9a:	f000 fec1 	bl	8005c20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e9e:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <xTaskCheckForTimeOut+0x98>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e024      	b.n	8004f06 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <xTaskCheckForTimeOut+0x9c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d007      	beq.n	8004ed8 <xTaskCheckForTimeOut+0x5c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e016      	b.n	8004f06 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d20c      	bcs.n	8004efc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad2      	subs	r2, r2, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f7ff ffaf 	bl	8004e54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e004      	b.n	8004f06 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004f06:	f000 fe9d 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 8004f0a:	697b      	ldr	r3, [r7, #20]
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b006      	add	sp, #24
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000930 	.word	0x20000930
 8004f18:	20000944 	.word	0x20000944

08004f1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f20:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <vTaskMissedYield+0x10>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000940 	.word	0x20000940

08004f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f38:	f000 f84e 	bl	8004fd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <prvIdleTask+0x1c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d9f9      	bls.n	8004f38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f44:	f000 fe5c 	bl	8005c00 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004f48:	e7f6      	b.n	8004f38 <prvIdleTask+0x8>
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	20000830 	.word	0x20000830

08004f50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e00c      	b.n	8004f76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	0013      	movs	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <prvInitialiseTaskLists+0x68>)
 8004f68:	189b      	adds	r3, r3, r2
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f7fe fdac 	bl	8003ac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3301      	adds	r3, #1
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d9ef      	bls.n	8004f5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <prvInitialiseTaskLists+0x6c>)
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f7fe fda2 	bl	8003ac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <prvInitialiseTaskLists+0x70>)
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7fe fd9e 	bl	8003ac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <prvInitialiseTaskLists+0x74>)
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f7fe fd9a 	bl	8003ac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <prvInitialiseTaskLists+0x78>)
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7fe fd96 	bl	8003ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <prvInitialiseTaskLists+0x7c>)
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7fe fd92 	bl	8003ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <prvInitialiseTaskLists+0x80>)
 8004fa6:	4a05      	ldr	r2, [pc, #20]	; (8004fbc <prvInitialiseTaskLists+0x6c>)
 8004fa8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004faa:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <prvInitialiseTaskLists+0x84>)
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvInitialiseTaskLists+0x70>)
 8004fae:	601a      	str	r2, [r3, #0]
}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b002      	add	sp, #8
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000830 	.word	0x20000830
 8004fbc:	200008bc 	.word	0x200008bc
 8004fc0:	200008d0 	.word	0x200008d0
 8004fc4:	200008ec 	.word	0x200008ec
 8004fc8:	20000900 	.word	0x20000900
 8004fcc:	20000918 	.word	0x20000918
 8004fd0:	200008e4 	.word	0x200008e4
 8004fd4:	200008e8 	.word	0x200008e8

08004fd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fde:	e01a      	b.n	8005016 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004fe0:	f000 fe1e 	bl	8005c20 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004fe4:	4b10      	ldr	r3, [pc, #64]	; (8005028 <prvCheckTasksWaitingTermination+0x50>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7fe fdea 	bl	8003bca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <prvCheckTasksWaitingTermination+0x54>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1e5a      	subs	r2, r3, #1
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <prvCheckTasksWaitingTermination+0x54>)
 8004ffe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <prvCheckTasksWaitingTermination+0x58>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <prvCheckTasksWaitingTermination+0x58>)
 8005008:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800500a:	f000 fe1b 	bl	8005c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	0018      	movs	r0, r3
 8005012:	f000 f80f 	bl	8005034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <prvCheckTasksWaitingTermination+0x58>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e0      	bne.n	8004fe0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	46c0      	nop			; (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	b002      	add	sp, #8
 8005026:	bd80      	pop	{r7, pc}
 8005028:	20000900 	.word	0x20000900
 800502c:	2000092c 	.word	0x2000092c
 8005030:	20000914 	.word	0x20000914

08005034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2251      	movs	r2, #81	; 0x51
 8005040:	5c9b      	ldrb	r3, [r3, r2]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	0018      	movs	r0, r3
 800504c:	f000 ff26 	bl	8005e9c <vPortFree>
				vPortFree( pxTCB );
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	0018      	movs	r0, r3
 8005054:	f000 ff22 	bl	8005e9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005058:	e010      	b.n	800507c <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2251      	movs	r2, #81	; 0x51
 800505e:	5c9b      	ldrb	r3, [r3, r2]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d104      	bne.n	800506e <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	0018      	movs	r0, r3
 8005068:	f000 ff18 	bl	8005e9c <vPortFree>
	}
 800506c:	e006      	b.n	800507c <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2251      	movs	r2, #81	; 0x51
 8005072:	5c9b      	ldrb	r3, [r3, r2]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d001      	beq.n	800507c <prvDeleteTCB+0x48>
 8005078:	b672      	cpsid	i
 800507a:	e7fe      	b.n	800507a <prvDeleteTCB+0x46>
	}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	b002      	add	sp, #8
 8005082:	bd80      	pop	{r7, pc}

08005084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800508a:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <prvResetNextTaskUnblockTime+0x40>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <prvResetNextTaskUnblockTime+0x14>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <prvResetNextTaskUnblockTime+0x16>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvResetNextTaskUnblockTime+0x44>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	4252      	negs	r2, r2
 80050a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050a6:	e008      	b.n	80050ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <prvResetNextTaskUnblockTime+0x40>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <prvResetNextTaskUnblockTime+0x44>)
 80050b8:	601a      	str	r2, [r3, #0]
}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	46bd      	mov	sp, r7
 80050be:	b002      	add	sp, #8
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	200008e4 	.word	0x200008e4
 80050c8:	2000094c 	.word	0x2000094c

080050cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <xTaskGetSchedulerState+0x30>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d102      	bne.n	80050e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050da:	2301      	movs	r3, #1
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	e008      	b.n	80050f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <xTaskGetSchedulerState+0x34>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050e8:	2302      	movs	r3, #2
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	e001      	b.n	80050f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050ee:	2300      	movs	r3, #0
 80050f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050f2:	687b      	ldr	r3, [r7, #4]
	}
 80050f4:	0018      	movs	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b002      	add	sp, #8
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000938 	.word	0x20000938
 8005100:	20000954 	.word	0x20000954

08005104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d044      	beq.n	80051a4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800511a:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <xTaskPriorityDisinherit+0xac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <xTaskPriorityDisinherit+0x24>
 8005124:	b672      	cpsid	i
 8005126:	e7fe      	b.n	8005126 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <xTaskPriorityDisinherit+0x30>
 8005130:	b672      	cpsid	i
 8005132:	e7fe      	b.n	8005132 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	429a      	cmp	r2, r3
 8005148:	d02c      	beq.n	80051a4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d128      	bne.n	80051a4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	3304      	adds	r3, #4
 8005156:	0018      	movs	r0, r3
 8005158:	f7fe fd37 	bl	8003bca <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	2207      	movs	r2, #7
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <xTaskPriorityDisinherit+0xb0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d903      	bls.n	8005184 <xTaskPriorityDisinherit+0x80>
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <xTaskPriorityDisinherit+0xb0>)
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	0013      	movs	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	189b      	adds	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <xTaskPriorityDisinherit+0xb4>)
 8005192:	189a      	adds	r2, r3, r2
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	3304      	adds	r3, #4
 8005198:	0019      	movs	r1, r3
 800519a:	0010      	movs	r0, r2
 800519c:	f7fe fcbd 	bl	8003b1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051a4:	68fb      	ldr	r3, [r7, #12]
	}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	2000082c 	.word	0x2000082c
 80051b4:	20000934 	.word	0x20000934
 80051b8:	20000830 	.word	0x20000830

080051bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80051ca:	f000 fd29 	bl	8005c20 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <xTaskNotifyWait+0xa4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2250      	movs	r2, #80	; 0x50
 80051d4:	5c9b      	ldrb	r3, [r3, r2]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d015      	beq.n	8005208 <xTaskNotifyWait+0x4c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80051dc:	4b20      	ldr	r3, [pc, #128]	; (8005260 <xTaskNotifyWait+0xa4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	43c9      	mvns	r1, r1
 80051e6:	400a      	ands	r2, r1
 80051e8:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80051ea:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <xTaskNotifyWait+0xa4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2250      	movs	r2, #80	; 0x50
 80051f0:	2101      	movs	r1, #1
 80051f2:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <xTaskNotifyWait+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2101      	movs	r1, #1
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f966 	bl	80054d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005204:	f000 fcfc 	bl	8005c00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005208:	f000 fd1c 	bl	8005c44 <vPortExitCritical>

		taskENTER_CRITICAL();
 800520c:	f000 fd08 	bl	8005c20 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <xTaskNotifyWait+0x64>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <xTaskNotifyWait+0xa4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <xTaskNotifyWait+0xa4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2250      	movs	r2, #80	; 0x50
 8005226:	5c9b      	ldrb	r3, [r3, r2]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d002      	beq.n	8005234 <xTaskNotifyWait+0x78>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e008      	b.n	8005246 <xTaskNotifyWait+0x8a>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <xTaskNotifyWait+0xa4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	43c9      	mvns	r1, r1
 800523e:	400a      	ands	r2, r1
 8005240:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <xTaskNotifyWait+0xa4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2250      	movs	r2, #80	; 0x50
 800524c:	2100      	movs	r1, #0
 800524e:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8005250:	f000 fcf8 	bl	8005c44 <vPortExitCritical>

		return xReturn;
 8005254:	697b      	ldr	r3, [r7, #20]
	}
 8005256:	0018      	movs	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	b006      	add	sp, #24
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	2000082c 	.word	0x2000082c

08005264 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	1dfb      	adds	r3, r7, #7
 8005272:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005274:	2301      	movs	r3, #1
 8005276:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <xTaskGenericNotify+0x1e>
 800527e:	b672      	cpsid	i
 8005280:	e7fe      	b.n	8005280 <xTaskGenericNotify+0x1c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8005286:	f000 fccb 	bl	8005c20 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <xTaskGenericNotify+0x34>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005298:	2317      	movs	r3, #23
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	2150      	movs	r1, #80	; 0x50
 80052a0:	5c52      	ldrb	r2, [r2, r1]
 80052a2:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2250      	movs	r2, #80	; 0x50
 80052a8:	2102      	movs	r1, #2
 80052aa:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d822      	bhi.n	80052fa <xTaskGenericNotify+0x96>
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	4b2d      	ldr	r3, [pc, #180]	; (800536c <xTaskGenericNotify+0x108>)
 80052b8:	18d3      	adds	r3, r2, r3
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80052ca:	e016      	b.n	80052fa <xTaskGenericNotify+0x96>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80052d6:	e010      	b.n	80052fa <xTaskGenericNotify+0x96>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80052de:	e00c      	b.n	80052fa <xTaskGenericNotify+0x96>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80052e0:	2317      	movs	r3, #23
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d003      	beq.n	80052f2 <xTaskGenericNotify+0x8e>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80052f0:	e003      	b.n	80052fa <xTaskGenericNotify+0x96>
						xReturn = pdFAIL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
					break;
 80052f6:	e000      	b.n	80052fa <xTaskGenericNotify+0x96>

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 80052f8:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052fa:	2317      	movs	r3, #23
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d12b      	bne.n	800535c <xTaskGenericNotify+0xf8>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	3304      	adds	r3, #4
 8005308:	0018      	movs	r0, r3
 800530a:	f7fe fc5e 	bl	8003bca <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005312:	4b17      	ldr	r3, [pc, #92]	; (8005370 <xTaskGenericNotify+0x10c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <xTaskGenericNotify+0xbe>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <xTaskGenericNotify+0x10c>)
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005326:	0013      	movs	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	189b      	adds	r3, r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <xTaskGenericNotify+0x110>)
 8005330:	189a      	adds	r2, r3, r2
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	3304      	adds	r3, #4
 8005336:	0019      	movs	r1, r3
 8005338:	0010      	movs	r0, r2
 800533a:	f7fe fbee 	bl	8003b1a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <xTaskGenericNotify+0xe6>
 8005346:	b672      	cpsid	i
 8005348:	e7fe      	b.n	8005348 <xTaskGenericNotify+0xe4>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <xTaskGenericNotify+0x114>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	429a      	cmp	r2, r3
 8005356:	d901      	bls.n	800535c <xTaskGenericNotify+0xf8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005358:	f000 fc52 	bl	8005c00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800535c:	f000 fc72 	bl	8005c44 <vPortExitCritical>

		return xReturn;
 8005360:	69fb      	ldr	r3, [r7, #28]
	}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b008      	add	sp, #32
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	08006324 	.word	0x08006324
 8005370:	20000934 	.word	0x20000934
 8005374:	20000830 	.word	0x20000830
 8005378:	2000082c 	.word	0x2000082c

0800537c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	1dfb      	adds	r3, r7, #7
 800538a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800538c:	2301      	movs	r3, #1
 800538e:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <xTaskGenericNotifyFromISR+0x1e>
 8005396:	b672      	cpsid	i
 8005398:	e7fe      	b.n	8005398 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800539e:	f000 fc69 	bl	8005c74 <ulSetInterruptMaskFromISR>
 80053a2:	0003      	movs	r3, r0
 80053a4:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <xTaskGenericNotifyFromISR+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80053b4:	2313      	movs	r3, #19
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	2150      	movs	r1, #80	; 0x50
 80053bc:	5c52      	ldrb	r2, [r2, r1]
 80053be:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2250      	movs	r2, #80	; 0x50
 80053c4:	2102      	movs	r1, #2
 80053c6:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d822      	bhi.n	8005416 <xTaskGenericNotifyFromISR+0x9a>
 80053d0:	009a      	lsls	r2, r3, #2
 80053d2:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <xTaskGenericNotifyFromISR+0x138>)
 80053d4:	18d3      	adds	r3, r2, r3
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	431a      	orrs	r2, r3
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80053e6:	e016      	b.n	8005416 <xTaskGenericNotifyFromISR+0x9a>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80053f2:	e010      	b.n	8005416 <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80053fa:	e00c      	b.n	8005416 <xTaskGenericNotifyFromISR+0x9a>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80053fc:	2313      	movs	r3, #19
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d003      	beq.n	800540e <xTaskGenericNotifyFromISR+0x92>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800540c:	e003      	b.n	8005416 <xTaskGenericNotifyFromISR+0x9a>
						xReturn = pdFAIL;
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
					break;
 8005412:	e000      	b.n	8005416 <xTaskGenericNotifyFromISR+0x9a>

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 8005414:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005416:	2313      	movs	r3, #19
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d140      	bne.n	80054a2 <xTaskGenericNotifyFromISR+0x126>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <xTaskGenericNotifyFromISR+0xb0>
 8005428:	b672      	cpsid	i
 800542a:	e7fe      	b.n	800542a <xTaskGenericNotifyFromISR+0xae>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542c:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <xTaskGenericNotifyFromISR+0x13c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d11d      	bne.n	8005470 <xTaskGenericNotifyFromISR+0xf4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	3304      	adds	r3, #4
 8005438:	0018      	movs	r0, r3
 800543a:	f7fe fbc6 	bl	8003bca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005442:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <xTaskGenericNotifyFromISR+0x140>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d903      	bls.n	8005452 <xTaskGenericNotifyFromISR+0xd6>
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <xTaskGenericNotifyFromISR+0x140>)
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005456:	0013      	movs	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	189b      	adds	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4a18      	ldr	r2, [pc, #96]	; (80054c0 <xTaskGenericNotifyFromISR+0x144>)
 8005460:	189a      	adds	r2, r3, r2
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	3304      	adds	r3, #4
 8005466:	0019      	movs	r1, r3
 8005468:	0010      	movs	r0, r2
 800546a:	f7fe fb56 	bl	8003b1a <vListInsertEnd>
 800546e:	e007      	b.n	8005480 <xTaskGenericNotifyFromISR+0x104>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	3318      	adds	r3, #24
 8005474:	001a      	movs	r2, r3
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <xTaskGenericNotifyFromISR+0x148>)
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f7fe fb4d 	bl	8003b1a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <xTaskGenericNotifyFromISR+0x14c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	429a      	cmp	r2, r3
 800548c:	d909      	bls.n	80054a2 <xTaskGenericNotifyFromISR+0x126>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <xTaskGenericNotifyFromISR+0x120>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e002      	b.n	80054a2 <xTaskGenericNotifyFromISR+0x126>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <xTaskGenericNotifyFromISR+0x150>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 fbeb 	bl	8005c80 <vClearInterruptMaskFromISR>

		return xReturn;
 80054aa:	69fb      	ldr	r3, [r7, #28]
	}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b008      	add	sp, #32
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	08006338 	.word	0x08006338
 80054b8:	20000954 	.word	0x20000954
 80054bc:	20000934 	.word	0x20000934
 80054c0:	20000830 	.word	0x20000830
 80054c4:	200008ec 	.word	0x200008ec
 80054c8:	2000082c 	.word	0x2000082c
 80054cc:	20000940 	.word	0x20000940

080054d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054da:	4b21      	ldr	r3, [pc, #132]	; (8005560 <prvAddCurrentTaskToDelayedList+0x90>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e0:	4b20      	ldr	r3, [pc, #128]	; (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3304      	adds	r3, #4
 80054e6:	0018      	movs	r0, r3
 80054e8:	f7fe fb6f 	bl	8003bca <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3301      	adds	r3, #1
 80054f0:	d10b      	bne.n	800550a <prvAddCurrentTaskToDelayedList+0x3a>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f8:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <prvAddCurrentTaskToDelayedList+0x98>)
 8005500:	0011      	movs	r1, r2
 8005502:	0018      	movs	r0, r3
 8005504:	f7fe fb09 	bl	8003b1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005508:	e026      	b.n	8005558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	18d3      	adds	r3, r2, r3
 8005510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005512:	4b14      	ldr	r3, [pc, #80]	; (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	429a      	cmp	r2, r3
 8005520:	d209      	bcs.n	8005536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3304      	adds	r3, #4
 800552c:	0019      	movs	r1, r3
 800552e:	0010      	movs	r0, r2
 8005530:	f7fe fb15 	bl	8003b5e <vListInsert>
}
 8005534:	e010      	b.n	8005558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005536:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <prvAddCurrentTaskToDelayedList+0x94>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3304      	adds	r3, #4
 8005540:	0019      	movs	r1, r3
 8005542:	0010      	movs	r0, r2
 8005544:	f7fe fb0b 	bl	8003b5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <prvAddCurrentTaskToDelayedList+0xa4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d202      	bcs.n	8005558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	601a      	str	r2, [r3, #0]
}
 8005558:	46c0      	nop			; (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b004      	add	sp, #16
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000930 	.word	0x20000930
 8005564:	2000082c 	.word	0x2000082c
 8005568:	20000918 	.word	0x20000918
 800556c:	200008e8 	.word	0x200008e8
 8005570:	200008e4 	.word	0x200008e4
 8005574:	2000094c 	.word	0x2000094c

08005578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005582:	f000 fa71 	bl	8005a68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <xTimerCreateTimerTask+0x6c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d020      	beq.n	80055d0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005596:	003a      	movs	r2, r7
 8005598:	1d39      	adds	r1, r7, #4
 800559a:	2308      	movs	r3, #8
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	0018      	movs	r0, r3
 80055a0:	f7fa fe68 	bl	8000274 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80055a4:	683c      	ldr	r4, [r7, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	490f      	ldr	r1, [pc, #60]	; (80055e8 <xTimerCreateTimerTask+0x70>)
 80055ac:	480f      	ldr	r0, [pc, #60]	; (80055ec <xTimerCreateTimerTask+0x74>)
 80055ae:	9202      	str	r2, [sp, #8]
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	2302      	movs	r3, #2
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	2300      	movs	r3, #0
 80055b8:	0022      	movs	r2, r4
 80055ba:	f7ff f818 	bl	80045ee <xTaskCreateStatic>
 80055be:	0002      	movs	r2, r0
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <xTimerCreateTimerTask+0x78>)
 80055c2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <xTimerCreateTimerTask+0x78>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80055cc:	2301      	movs	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <xTimerCreateTimerTask+0x62>
 80055d6:	b672      	cpsid	i
 80055d8:	e7fe      	b.n	80055d8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80055da:	68fb      	ldr	r3, [r7, #12]
}
 80055dc:	0018      	movs	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	b005      	add	sp, #20
 80055e2:	bd90      	pop	{r4, r7, pc}
 80055e4:	20000988 	.word	0x20000988
 80055e8:	080062dc 	.word	0x080062dc
 80055ec:	080056f9 	.word	0x080056f9
 80055f0:	2000098c 	.word	0x2000098c

080055f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b089      	sub	sp, #36	; 0x24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <xTimerGenericCommand+0x1c>
 800560c:	b672      	cpsid	i
 800560e:	e7fe      	b.n	800560e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005610:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <xTimerGenericCommand+0x90>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d030      	beq.n	800567a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005618:	2410      	movs	r4, #16
 800561a:	193b      	adds	r3, r7, r4
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005620:	193b      	adds	r3, r7, r4
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005626:	193b      	adds	r3, r7, r4
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b05      	cmp	r3, #5
 8005630:	dc19      	bgt.n	8005666 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005632:	f7ff fd4b 	bl	80050cc <xTaskGetSchedulerState>
 8005636:	0003      	movs	r3, r0
 8005638:	2b02      	cmp	r3, #2
 800563a:	d109      	bne.n	8005650 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <xTimerGenericCommand+0x90>)
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005642:	1939      	adds	r1, r7, r4
 8005644:	2300      	movs	r3, #0
 8005646:	f7fe fbdf 	bl	8003e08 <xQueueGenericSend>
 800564a:	0003      	movs	r3, r0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e014      	b.n	800567a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <xTimerGenericCommand+0x90>)
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	2310      	movs	r3, #16
 8005656:	18f9      	adds	r1, r7, r3
 8005658:	2300      	movs	r3, #0
 800565a:	2200      	movs	r2, #0
 800565c:	f7fe fbd4 	bl	8003e08 <xQueueGenericSend>
 8005660:	0003      	movs	r3, r0
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	e009      	b.n	800567a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <xTimerGenericCommand+0x90>)
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	2310      	movs	r3, #16
 800566e:	18f9      	adds	r1, r7, r3
 8005670:	2300      	movs	r3, #0
 8005672:	f7fe fc8d 	bl	8003f90 <xQueueGenericSendFromISR>
 8005676:	0003      	movs	r3, r0
 8005678:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800567a:	69fb      	ldr	r3, [r7, #28]
}
 800567c:	0018      	movs	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	b009      	add	sp, #36	; 0x24
 8005682:	bd90      	pop	{r4, r7, pc}
 8005684:	20000988 	.word	0x20000988

08005688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af02      	add	r7, sp, #8
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005692:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <prvProcessExpiredTimer+0x6c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7fe fa92 	bl	8003bca <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d119      	bne.n	80056e2 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	18d1      	adds	r1, r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f8b6 	bl	800582c <prvInsertTimerInActiveList>
 80056c0:	1e03      	subs	r3, r0, #0
 80056c2:	d00e      	beq.n	80056e2 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	2100      	movs	r1, #0
 80056d0:	f7ff ff90 	bl	80055f4 <xTimerGenericCommand>
 80056d4:	0003      	movs	r3, r0
 80056d6:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <prvProcessExpiredTimer+0x5a>
 80056de:	b672      	cpsid	i
 80056e0:	e7fe      	b.n	80056e0 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	0010      	movs	r0, r2
 80056ea:	4798      	blx	r3
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b004      	add	sp, #16
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000980 	.word	0x20000980

080056f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005700:	2308      	movs	r3, #8
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	0018      	movs	r0, r3
 8005706:	f000 f851 	bl	80057ac <prvGetNextExpireTime>
 800570a:	0003      	movs	r3, r0
 800570c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f000 f803 	bl	8005720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800571a:	f000 f8c9 	bl	80058b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800571e:	e7ef      	b.n	8005700 <prvTimerTask+0x8>

08005720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800572a:	f7ff f947 	bl	80049bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800572e:	2308      	movs	r3, #8
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f85a 	bl	80057ec <prvSampleTimeNow>
 8005738:	0003      	movs	r3, r0
 800573a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d129      	bne.n	8005796 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10c      	bne.n	8005762 <prvProcessTimerOrBlockTask+0x42>
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d808      	bhi.n	8005762 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005750:	f7ff f940 	bl	80049d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0011      	movs	r1, r2
 800575a:	0018      	movs	r0, r3
 800575c:	f7ff ff94 	bl	8005688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005760:	e01b      	b.n	800579a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d006      	beq.n	8005776 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <prvProcessTimerOrBlockTask+0x84>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	425a      	negs	r2, r3
 8005770:	4153      	adcs	r3, r2
 8005772:	b2db      	uxtb	r3, r3
 8005774:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvProcessTimerOrBlockTask+0x88>)
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	0019      	movs	r1, r3
 8005784:	f7fe ff00 	bl	8004588 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005788:	f7ff f924 	bl	80049d4 <xTaskResumeAll>
 800578c:	1e03      	subs	r3, r0, #0
 800578e:	d104      	bne.n	800579a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005790:	f000 fa36 	bl	8005c00 <vPortYield>
}
 8005794:	e001      	b.n	800579a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005796:	f7ff f91d 	bl	80049d4 <xTaskResumeAll>
}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	46bd      	mov	sp, r7
 800579e:	b004      	add	sp, #16
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	20000984 	.word	0x20000984
 80057a8:	20000988 	.word	0x20000988

080057ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <prvGetNextExpireTime+0x3c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	425a      	negs	r2, r3
 80057bc:	4153      	adcs	r3, r2
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	001a      	movs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <prvGetNextExpireTime+0x3c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e001      	b.n	80057de <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057de:	68fb      	ldr	r3, [r7, #12]
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b004      	add	sp, #16
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000980 	.word	0x20000980

080057ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057f4:	f7ff f97a 	bl	8004aec <xTaskGetTickCount>
 80057f8:	0003      	movs	r3, r0
 80057fa:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <prvSampleTimeNow+0x3c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	429a      	cmp	r2, r3
 8005804:	d205      	bcs.n	8005812 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005806:	f000 f8d5 	bl	80059b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e002      	b.n	8005818 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005818:	4b03      	ldr	r3, [pc, #12]	; (8005828 <prvSampleTimeNow+0x3c>)
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	0018      	movs	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	b004      	add	sp, #16
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000990 	.word	0x20000990

0800582c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	429a      	cmp	r2, r3
 8005850:	d812      	bhi.n	8005878 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	429a      	cmp	r2, r3
 800585e:	d302      	bcc.n	8005866 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005860:	2301      	movs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e01b      	b.n	800589e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <prvInsertTimerInActiveList+0x7c>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3304      	adds	r3, #4
 800586e:	0019      	movs	r1, r3
 8005870:	0010      	movs	r0, r2
 8005872:	f7fe f974 	bl	8003b5e <vListInsert>
 8005876:	e012      	b.n	800589e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d206      	bcs.n	800588e <prvInsertTimerInActiveList+0x62>
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	e007      	b.n	800589e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800588e:	4b07      	ldr	r3, [pc, #28]	; (80058ac <prvInsertTimerInActiveList+0x80>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	0019      	movs	r1, r3
 8005898:	0010      	movs	r0, r2
 800589a:	f7fe f960 	bl	8003b5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800589e:	697b      	ldr	r3, [r7, #20]
}
 80058a0:	0018      	movs	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b006      	add	sp, #24
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	20000984 	.word	0x20000984
 80058ac:	20000980 	.word	0x20000980

080058b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b08b      	sub	sp, #44	; 0x2c
 80058b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058b6:	e06a      	b.n	800598e <prvProcessReceivedCommands+0xde>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058b8:	2208      	movs	r2, #8
 80058ba:	18bb      	adds	r3, r7, r2
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	db64      	blt.n	800598c <prvProcessReceivedCommands+0xdc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058c2:	18bb      	adds	r3, r7, r2
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	3304      	adds	r3, #4
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7fe f978 	bl	8003bca <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058da:	1d3b      	adds	r3, r7, #4
 80058dc:	0018      	movs	r0, r3
 80058de:	f7ff ff85 	bl	80057ec <prvSampleTimeNow>
 80058e2:	0003      	movs	r3, r0
 80058e4:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 80058e6:	2308      	movs	r3, #8
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b09      	cmp	r3, #9
 80058ee:	d84e      	bhi.n	800598e <prvProcessReceivedCommands+0xde>
 80058f0:	009a      	lsls	r2, r3, #2
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <prvProcessReceivedCommands+0xfc>)
 80058f4:	18d3      	adds	r3, r2, r3
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058fa:	2408      	movs	r4, #8
 80058fc:	193b      	adds	r3, r7, r4
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	18d1      	adds	r1, r2, r3
 8005906:	193b      	adds	r3, r7, r4
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	69f8      	ldr	r0, [r7, #28]
 800590e:	f7ff ff8d 	bl	800582c <prvInsertTimerInActiveList>
 8005912:	1e03      	subs	r3, r0, #0
 8005914:	d03b      	beq.n	800598e <prvProcessReceivedCommands+0xde>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	0010      	movs	r0, r2
 800591e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d132      	bne.n	800598e <prvProcessReceivedCommands+0xde>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005928:	193b      	adds	r3, r7, r4
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	18d2      	adds	r2, r2, r3
 8005932:	69f8      	ldr	r0, [r7, #28]
 8005934:	2300      	movs	r3, #0
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2300      	movs	r3, #0
 800593a:	2100      	movs	r1, #0
 800593c:	f7ff fe5a 	bl	80055f4 <xTimerGenericCommand>
 8005940:	0003      	movs	r3, r0
 8005942:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d121      	bne.n	800598e <prvProcessReceivedCommands+0xde>
 800594a:	b672      	cpsid	i
 800594c:	e7fe      	b.n	800594c <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800594e:	2308      	movs	r3, #8
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <prvProcessReceivedCommands+0xb4>
 8005960:	b672      	cpsid	i
 8005962:	e7fe      	b.n	8005962 <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	18d1      	adds	r1, r2, r3
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	69f8      	ldr	r0, [r7, #28]
 8005972:	f7ff ff5b 	bl	800582c <prvInsertTimerInActiveList>
					break;
 8005976:	e00a      	b.n	800598e <prvProcessReceivedCommands+0xde>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2228      	movs	r2, #40	; 0x28
 800597c:	5c9b      	ldrb	r3, [r3, r2]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d105      	bne.n	800598e <prvProcessReceivedCommands+0xde>
						{
							vPortFree( pxTimer );
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	0018      	movs	r0, r3
 8005986:	f000 fa89 	bl	8005e9c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800598a:	e000      	b.n	800598e <prvProcessReceivedCommands+0xde>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800598c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <prvProcessReceivedCommands+0x100>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2208      	movs	r2, #8
 8005994:	18b9      	adds	r1, r7, r2
 8005996:	2200      	movs	r2, #0
 8005998:	0018      	movs	r0, r3
 800599a:	f7fe fb6a 	bl	8004072 <xQueueReceive>
 800599e:	1e03      	subs	r3, r0, #0
 80059a0:	d18a      	bne.n	80058b8 <prvProcessReceivedCommands+0x8>
	}
}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b009      	add	sp, #36	; 0x24
 80059aa:	bd90      	pop	{r4, r7, pc}
 80059ac:	0800634c 	.word	0x0800634c
 80059b0:	20000988 	.word	0x20000988

080059b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059ba:	e03e      	b.n	8005a3a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059bc:	4b28      	ldr	r3, [pc, #160]	; (8005a60 <prvSwitchTimerLists+0xac>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059c6:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <prvSwitchTimerLists+0xac>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3304      	adds	r3, #4
 80059d4:	0018      	movs	r0, r3
 80059d6:	f7fe f8f8 	bl	8003bca <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	0010      	movs	r0, r2
 80059e2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d126      	bne.n	8005a3a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	18d3      	adds	r3, r2, r3
 80059f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d90e      	bls.n	8005a1c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a0a:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <prvSwitchTimerLists+0xac>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3304      	adds	r3, #4
 8005a12:	0019      	movs	r1, r3
 8005a14:	0010      	movs	r0, r2
 8005a16:	f7fe f8a2 	bl	8003b5e <vListInsert>
 8005a1a:	e00e      	b.n	8005a3a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	2100      	movs	r1, #0
 8005a28:	f7ff fde4 	bl	80055f4 <xTimerGenericCommand>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <prvSwitchTimerLists+0x86>
 8005a36:	b672      	cpsid	i
 8005a38:	e7fe      	b.n	8005a38 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <prvSwitchTimerLists+0xac>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1bb      	bne.n	80059bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <prvSwitchTimerLists+0xac>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <prvSwitchTimerLists+0xb0>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <prvSwitchTimerLists+0xac>)
 8005a50:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005a52:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <prvSwitchTimerLists+0xb0>)
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	601a      	str	r2, [r3, #0]
}
 8005a58:	46c0      	nop			; (mov r8, r8)
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b006      	add	sp, #24
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20000980 	.word	0x20000980
 8005a64:	20000984 	.word	0x20000984

08005a68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a6e:	f000 f8d7 	bl	8005c20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <prvCheckForValidListAndQueue+0x64>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d123      	bne.n	8005ac2 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <prvCheckForValidListAndQueue+0x68>)
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7fe f823 	bl	8003ac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a82:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <prvCheckForValidListAndQueue+0x6c>)
 8005a84:	0018      	movs	r0, r3
 8005a86:	f7fe f81f 	bl	8003ac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a8a:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <prvCheckForValidListAndQueue+0x70>)
 8005a8c:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <prvCheckForValidListAndQueue+0x68>)
 8005a8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <prvCheckForValidListAndQueue+0x74>)
 8005a92:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <prvCheckForValidListAndQueue+0x6c>)
 8005a94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <prvCheckForValidListAndQueue+0x78>)
 8005a98:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <prvCheckForValidListAndQueue+0x7c>)
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	9100      	str	r1, [sp, #0]
 8005a9e:	210c      	movs	r1, #12
 8005aa0:	200a      	movs	r0, #10
 8005aa2:	f7fe f90e 	bl	8003cc2 <xQueueGenericCreateStatic>
 8005aa6:	0002      	movs	r2, r0
 8005aa8:	4b08      	ldr	r3, [pc, #32]	; (8005acc <prvCheckForValidListAndQueue+0x64>)
 8005aaa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <prvCheckForValidListAndQueue+0x64>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d006      	beq.n	8005ac2 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <prvCheckForValidListAndQueue+0x64>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a0b      	ldr	r2, [pc, #44]	; (8005ae8 <prvCheckForValidListAndQueue+0x80>)
 8005aba:	0011      	movs	r1, r2
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7fe fd3b 	bl	8004538 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f000 f8bf 	bl	8005c44 <vPortExitCritical>
}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000988 	.word	0x20000988
 8005ad0:	20000958 	.word	0x20000958
 8005ad4:	2000096c 	.word	0x2000096c
 8005ad8:	20000980 	.word	0x20000980
 8005adc:	20000984 	.word	0x20000984
 8005ae0:	20000a0c 	.word	0x20000a0c
 8005ae4:	20000994 	.word	0x20000994
 8005ae8:	080062e4 	.word	0x080062e4

08005aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3b04      	subs	r3, #4
 8005afc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	0452      	lsls	r2, r2, #17
 8005b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3b04      	subs	r3, #4
 8005b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3b04      	subs	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <pxPortInitialiseStack+0x50>)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3b14      	subs	r3, #20
 8005b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3b20      	subs	r3, #32
 8005b2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	0018      	movs	r0, r3
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	08005b41 	.word	0x08005b41

08005b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <prvTaskExitError+0x2c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	d001      	beq.n	8005b56 <prvTaskExitError+0x16>
 8005b52:	b672      	cpsid	i
 8005b54:	e7fe      	b.n	8005b54 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005b56:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005b58:	46c0      	nop			; (mov r8, r8)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0fc      	beq.n	8005b5a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b60:	46c0      	nop			; (mov r8, r8)
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b002      	add	sp, #8
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	20000010 	.word	0x20000010

08005b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	0000      	movs	r0, r0
 8005b7c:	0000      	movs	r0, r0
	...

08005b80 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005b80:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <pxCurrentTCBConst2>)
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	3020      	adds	r0, #32
 8005b88:	f380 8809 	msr	PSP, r0
 8005b8c:	2002      	movs	r0, #2
 8005b8e:	f380 8814 	msr	CONTROL, r0
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005b98:	46ae      	mov	lr, r5
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	bc04      	pop	{r2}
 8005b9e:	b662      	cpsie	i
 8005ba0:	4718      	bx	r3
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	46c0      	nop			; (mov r8, r8)
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46c0      	nop			; (mov r8, r8)

08005bb0 <pxCurrentTCBConst2>:
 8005bb0:	2000082c 	.word	0x2000082c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	46c0      	nop			; (mov r8, r8)

08005bb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <xPortStartScheduler+0x40>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <xPortStartScheduler+0x40>)
 8005bc2:	21ff      	movs	r1, #255	; 0xff
 8005bc4:	0409      	lsls	r1, r1, #16
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005bca:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <xPortStartScheduler+0x40>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <xPortStartScheduler+0x40>)
 8005bd0:	21ff      	movs	r1, #255	; 0xff
 8005bd2:	0609      	lsls	r1, r1, #24
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005bd8:	f000 f898 	bl	8005d0c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <xPortStartScheduler+0x44>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005be2:	f7ff ffcd 	bl	8005b80 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005be6:	f7ff f843 	bl	8004c70 <vTaskSwitchContext>
	prvTaskExitError();
 8005bea:	f7ff ffa9 	bl	8005b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	e000ed20 	.word	0xe000ed20
 8005bfc:	20000010 	.word	0x20000010

08005c00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <vPortYield+0x1c>)
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	0552      	lsls	r2, r2, #21
 8005c0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005c0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c10:	f3bf 8f6f 	isb	sy
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005c24:	b672      	cpsid	i
    uxCriticalNesting++;
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <vPortEnterCritical+0x20>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vPortEnterCritical+0x20>)
 8005c2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005c30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c34:	f3bf 8f6f 	isb	sy
}
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	20000010 	.word	0x20000010

08005c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <vPortExitCritical+0x2c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <vPortExitCritical+0x10>
 8005c50:	b672      	cpsid	i
 8005c52:	e7fe      	b.n	8005c52 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <vPortExitCritical+0x2c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	1e5a      	subs	r2, r3, #1
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <vPortExitCritical+0x2c>)
 8005c5c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005c5e:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <vPortExitCritical+0x2c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d100      	bne.n	8005c68 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005c66:	b662      	cpsie	i
    }
}
 8005c68:	46c0      	nop			; (mov r8, r8)
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	20000010 	.word	0x20000010

08005c74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005c74:	f3ef 8010 	mrs	r0, PRIMASK
 8005c78:	b672      	cpsid	i
 8005c7a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005c7c:	46c0      	nop			; (mov r8, r8)
 8005c7e:	0018      	movs	r0, r3

08005c80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005c80:	f380 8810 	msr	PRIMASK, r0
 8005c84:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005c86:	46c0      	nop			; (mov r8, r8)
	...

08005c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c90:	f3ef 8009 	mrs	r0, PSP
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <pxCurrentTCBConst>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	3820      	subs	r0, #32
 8005c9a:	6010      	str	r0, [r2, #0]
 8005c9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005c9e:	4644      	mov	r4, r8
 8005ca0:	464d      	mov	r5, r9
 8005ca2:	4656      	mov	r6, sl
 8005ca4:	465f      	mov	r7, fp
 8005ca6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005ca8:	b508      	push	{r3, lr}
 8005caa:	b672      	cpsid	i
 8005cac:	f7fe ffe0 	bl	8004c70 <vTaskSwitchContext>
 8005cb0:	b662      	cpsie	i
 8005cb2:	bc0c      	pop	{r2, r3}
 8005cb4:	6811      	ldr	r1, [r2, #0]
 8005cb6:	6808      	ldr	r0, [r1, #0]
 8005cb8:	3010      	adds	r0, #16
 8005cba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005cbc:	46a0      	mov	r8, r4
 8005cbe:	46a9      	mov	r9, r5
 8005cc0:	46b2      	mov	sl, r6
 8005cc2:	46bb      	mov	fp, r7
 8005cc4:	f380 8809 	msr	PSP, r0
 8005cc8:	3820      	subs	r0, #32
 8005cca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005ccc:	4718      	bx	r3
 8005cce:	46c0      	nop			; (mov r8, r8)

08005cd0 <pxCurrentTCBConst>:
 8005cd0:	2000082c 	.word	0x2000082c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46c0      	nop			; (mov r8, r8)

08005cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cde:	f7ff ffc9 	bl	8005c74 <ulSetInterruptMaskFromISR>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ce6:	f7fe ff0f 	bl	8004b08 <xTaskIncrementTick>
 8005cea:	1e03      	subs	r3, r0, #0
 8005cec:	d003      	beq.n	8005cf6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <SysTick_Handler+0x30>)
 8005cf0:	2280      	movs	r2, #128	; 0x80
 8005cf2:	0552      	lsls	r2, r2, #21
 8005cf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7ff ffc1 	bl	8005c80 <vClearInterruptMaskFromISR>
}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b002      	add	sp, #8
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <prvSetupTimerInterrupt+0x34>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <prvSetupTimerInterrupt+0x38>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <prvSetupTimerInterrupt+0x3c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	22fa      	movs	r2, #250	; 0xfa
 8005d22:	0091      	lsls	r1, r2, #2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7fa fa01 	bl	800012c <__udivsi3>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <prvSetupTimerInterrupt+0x40>)
 8005d30:	3a01      	subs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005d34:	4b02      	ldr	r3, [pc, #8]	; (8005d40 <prvSetupTimerInterrupt+0x34>)
 8005d36:	2207      	movs	r2, #7
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	e000e010 	.word	0xe000e010
 8005d44:	e000e018 	.word	0xe000e018
 8005d48:	20000004 	.word	0x20000004
 8005d4c:	e000e014 	.word	0xe000e014

08005d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005d5c:	f7fe fe2e 	bl	80049bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d60:	4b49      	ldr	r3, [pc, #292]	; (8005e88 <pvPortMalloc+0x138>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d68:	f000 f8e0 	bl	8005f2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d6c:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <pvPortMalloc+0x13c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4013      	ands	r3, r2
 8005d74:	d000      	beq.n	8005d78 <pvPortMalloc+0x28>
 8005d76:	e079      	b.n	8005e6c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d012      	beq.n	8005da4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005d7e:	2208      	movs	r2, #8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	189b      	adds	r3, r3, r2
 8005d84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2207      	movs	r2, #7
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d00a      	beq.n	8005da4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2207      	movs	r2, #7
 8005d92:	4393      	bics	r3, r2
 8005d94:	3308      	adds	r3, #8
 8005d96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2207      	movs	r2, #7
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d001      	beq.n	8005da4 <pvPortMalloc+0x54>
 8005da0:	b672      	cpsid	i
 8005da2:	e7fe      	b.n	8005da2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d060      	beq.n	8005e6c <pvPortMalloc+0x11c>
 8005daa:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <pvPortMalloc+0x140>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d85b      	bhi.n	8005e6c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005db4:	4b37      	ldr	r3, [pc, #220]	; (8005e94 <pvPortMalloc+0x144>)
 8005db6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005db8:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <pvPortMalloc+0x144>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dbe:	e004      	b.n	8005dca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <pvPortMalloc+0x8c>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f1      	bne.n	8005dc0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ddc:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <pvPortMalloc+0x138>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d042      	beq.n	8005e6c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2208      	movs	r2, #8
 8005dec:	189b      	adds	r3, r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	2308      	movs	r3, #8
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d916      	bls.n	8005e36 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	18d3      	adds	r3, r2, r3
 8005e0e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2207      	movs	r2, #7
 8005e14:	4013      	ands	r3, r2
 8005e16:	d001      	beq.n	8005e1c <pvPortMalloc+0xcc>
 8005e18:	b672      	cpsid	i
 8005e1a:	e7fe      	b.n	8005e1a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 f8db 	bl	8005fec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e36:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <pvPortMalloc+0x140>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <pvPortMalloc+0x140>)
 8005e42:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e44:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <pvPortMalloc+0x140>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <pvPortMalloc+0x148>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d203      	bcs.n	8005e58 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <pvPortMalloc+0x140>)
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <pvPortMalloc+0x148>)
 8005e56:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <pvPortMalloc+0x13c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e6c:	f7fe fdb2 	bl	80049d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2207      	movs	r2, #7
 8005e74:	4013      	ands	r3, r2
 8005e76:	d001      	beq.n	8005e7c <pvPortMalloc+0x12c>
 8005e78:	b672      	cpsid	i
 8005e7a:	e7fe      	b.n	8005e7a <pvPortMalloc+0x12a>
	return pvReturn;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	0018      	movs	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b006      	add	sp, #24
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	2000165c 	.word	0x2000165c
 8005e8c:	20001668 	.word	0x20001668
 8005e90:	20001660 	.word	0x20001660
 8005e94:	20001654 	.word	0x20001654
 8005e98:	20001664 	.word	0x20001664

08005e9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d035      	beq.n	8005f1a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005eae:	2308      	movs	r3, #8
 8005eb0:	425b      	negs	r3, r3
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	18d3      	adds	r3, r2, r3
 8005eb6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <vPortFree+0x88>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d101      	bne.n	8005ecc <vPortFree+0x30>
 8005ec8:	b672      	cpsid	i
 8005eca:	e7fe      	b.n	8005eca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <vPortFree+0x3c>
 8005ed4:	b672      	cpsid	i
 8005ed6:	e7fe      	b.n	8005ed6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <vPortFree+0x88>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d01a      	beq.n	8005f1a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d116      	bne.n	8005f1a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <vPortFree+0x88>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005efc:	f7fe fd5e 	bl	80049bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <vPortFree+0x8c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	18d2      	adds	r2, r2, r3
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <vPortFree+0x8c>)
 8005f0c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 f86b 	bl	8005fec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f16:	f7fe fd5d 	bl	80049d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b004      	add	sp, #16
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	20001668 	.word	0x20001668
 8005f28:	20001660 	.word	0x20001660

08005f2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f32:	23c0      	movs	r3, #192	; 0xc0
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f38:	4b26      	ldr	r3, [pc, #152]	; (8005fd4 <prvHeapInit+0xa8>)
 8005f3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2207      	movs	r2, #7
 8005f40:	4013      	ands	r3, r2
 8005f42:	d00c      	beq.n	8005f5e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3307      	adds	r3, #7
 8005f48:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2207      	movs	r2, #7
 8005f4e:	4393      	bics	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1ad2      	subs	r2, r2, r3
 8005f58:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <prvHeapInit+0xa8>)
 8005f5a:	18d3      	adds	r3, r2, r3
 8005f5c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <prvHeapInit+0xac>)
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <prvHeapInit+0xac>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	18d3      	adds	r3, r2, r3
 8005f74:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f76:	2208      	movs	r2, #8
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2207      	movs	r2, #7
 8005f82:	4393      	bics	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <prvHeapInit+0xb0>)
 8005f8a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005f8c:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <prvHeapInit+0xb0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2200      	movs	r2, #0
 8005f92:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <prvHeapInit+0xb0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	1ad2      	subs	r2, r2, r3
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005faa:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <prvHeapInit+0xb0>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <prvHeapInit+0xb4>)
 8005fb8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <prvHeapInit+0xb8>)
 8005fc0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <prvHeapInit+0xbc>)
 8005fc4:	2280      	movs	r2, #128	; 0x80
 8005fc6:	0612      	lsls	r2, r2, #24
 8005fc8:	601a      	str	r2, [r3, #0]
}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b004      	add	sp, #16
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	20000a54 	.word	0x20000a54
 8005fd8:	20001654 	.word	0x20001654
 8005fdc:	2000165c 	.word	0x2000165c
 8005fe0:	20001664 	.word	0x20001664
 8005fe4:	20001660 	.word	0x20001660
 8005fe8:	20001668 	.word	0x20001668

08005fec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ff4:	4b27      	ldr	r3, [pc, #156]	; (8006094 <prvInsertBlockIntoFreeList+0xa8>)
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e002      	b.n	8006000 <prvInsertBlockIntoFreeList+0x14>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d8f7      	bhi.n	8005ffa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	18d3      	adds	r3, r2, r3
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d108      	bne.n	800602e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	18d2      	adds	r2, r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	18d2      	adds	r2, r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d118      	bne.n	8006074 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <prvInsertBlockIntoFreeList+0xac>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d00d      	beq.n	800606a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	18d2      	adds	r2, r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	e008      	b.n	800607c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <prvInsertBlockIntoFreeList+0xac>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	e003      	b.n	800607c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d002      	beq.n	800608a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	b004      	add	sp, #16
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	20001654 	.word	0x20001654
 8006098:	2000165c 	.word	0x2000165c

0800609c <__libc_init_array>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	2600      	movs	r6, #0
 80060a0:	4d0c      	ldr	r5, [pc, #48]	; (80060d4 <__libc_init_array+0x38>)
 80060a2:	4c0d      	ldr	r4, [pc, #52]	; (80060d8 <__libc_init_array+0x3c>)
 80060a4:	1b64      	subs	r4, r4, r5
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	42a6      	cmp	r6, r4
 80060aa:	d109      	bne.n	80060c0 <__libc_init_array+0x24>
 80060ac:	2600      	movs	r6, #0
 80060ae:	f000 f82b 	bl	8006108 <_init>
 80060b2:	4d0a      	ldr	r5, [pc, #40]	; (80060dc <__libc_init_array+0x40>)
 80060b4:	4c0a      	ldr	r4, [pc, #40]	; (80060e0 <__libc_init_array+0x44>)
 80060b6:	1b64      	subs	r4, r4, r5
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	42a6      	cmp	r6, r4
 80060bc:	d105      	bne.n	80060ca <__libc_init_array+0x2e>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	00b3      	lsls	r3, r6, #2
 80060c2:	58eb      	ldr	r3, [r5, r3]
 80060c4:	4798      	blx	r3
 80060c6:	3601      	adds	r6, #1
 80060c8:	e7ee      	b.n	80060a8 <__libc_init_array+0xc>
 80060ca:	00b3      	lsls	r3, r6, #2
 80060cc:	58eb      	ldr	r3, [r5, r3]
 80060ce:	4798      	blx	r3
 80060d0:	3601      	adds	r6, #1
 80060d2:	e7f2      	b.n	80060ba <__libc_init_array+0x1e>
 80060d4:	08006374 	.word	0x08006374
 80060d8:	08006374 	.word	0x08006374
 80060dc:	08006374 	.word	0x08006374
 80060e0:	08006378 	.word	0x08006378

080060e4 <memcpy>:
 80060e4:	2300      	movs	r3, #0
 80060e6:	b510      	push	{r4, lr}
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d100      	bne.n	80060ee <memcpy+0xa>
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	5ccc      	ldrb	r4, [r1, r3]
 80060f0:	54c4      	strb	r4, [r0, r3]
 80060f2:	3301      	adds	r3, #1
 80060f4:	e7f8      	b.n	80060e8 <memcpy+0x4>

080060f6 <memset>:
 80060f6:	0003      	movs	r3, r0
 80060f8:	1882      	adds	r2, r0, r2
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d100      	bne.n	8006100 <memset+0xa>
 80060fe:	4770      	bx	lr
 8006100:	7019      	strb	r1, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	e7f9      	b.n	80060fa <memset+0x4>
	...

08006108 <_init>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr

08006114 <_fini>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr
